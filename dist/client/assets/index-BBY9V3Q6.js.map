{"version":3,"file":"index-BBY9V3Q6.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/config/GameConstants.ts","../../../src/client/game/audio/AudioManager.ts","../../../src/client/game/input/InputManager.ts","../../../src/client/game/platform/PlatformManager.ts","../../../src/client/game/config/NoteMapping.ts","../../../src/client/game/audio/ChordDetector.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from \"phaser\";\n\nexport class Boot extends Scene {\n  constructor() {\n    super(\"Boot\");\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    // REMOVED: Background image that was persisting behind the game\n    // this.load.image(\"background\", \"assets/bg.png\");\n  }\n\n  create() {\n    this.scene.start(\"Preloader\");\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameOverText: Phaser.GameObjects.Text;\n\n  constructor() {\n    super(\"GameOver\");\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add\n      .image(0, 0, \"background\")\n      .setOrigin(0)\n      .setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameOverText = this.add\n      .text(0, 0, \"Game Over\", {\n        fontFamily: \"Arial Black\",\n        fontSize: \"64px\",\n        color: \"#ffffff\",\n        stroke: \"#000000\",\n        strokeThickness: 8,\n        align: \"center\",\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on(\"resize\", (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameOverText) {\n      this.gameOverText.setPosition(width / 2, height / 2);\n      this.gameOverText.setScale(scaleFactor);\n    }\n  }\n}\n","// Type aliases for better readability\nexport type GameKey = \"S\" | \"D\" | \"F\" | \"G\" | \"H\" | \"J\" | \"K\" | \"R\" | \"U\" | \"I\";\n\n// Centralized game configuration constants\nexport const GAME_CONSTANTS = {\n  // Character configuration\n  CHARACTER: {\n    SPEED: 100,\n    WIDTH: 30,\n    HEIGHT: 40,\n    COLOR: 0x3498db,\n    VISUAL_FEEDBACK_COLOR: 0xf39c12,\n    VISUAL_FEEDBACK_DURATION: 200,\n  },\n\n  // Platform configuration\n  PLATFORMS: {\n    WIDTH: 120,\n    HEIGHT: 20,\n    EXTENSION_DISTANCE: 150,\n    AHEAD_OFFSET: 20,\n    CLEANUP_DISTANCE: 400,\n    MIN_LENGTH: 20, // Minimum platform length for quick taps\n    GROWTH_RATE: 100, // Pixels per second growth rate (matches character speed)\n  },\n\n  // Audio configuration\n  AUDIO: {\n    NOTE_DURATION: 0.5,\n    ATTACK_TIME: 0.01,\n    VOLUME: 0.3,\n  },\n\n  // Game mechanics\n  GAME: {\n    OVER_FALL_DISTANCE: 300,\n    SCORE_PER_PLATFORM: 10,\n    GROUND_OFFSET: 60,\n    CHARACTER_HEIGHT_LERP_SPEED: 0.08,\n    FALL_VELOCITY: 300,\n    CAMERA_DEADZONE_X: 200,\n    CAMERA_DEADZONE_Y: 100,\n    CAMERA_FOLLOW_LERP_X: 0.1,\n    CAMERA_FOLLOW_LERP_Y: 0.1,\n  },\n  CHORD_DETECTION: {\n    ACCUMULATION_TIME: 1000, // ms\n    TRIAD_POINTS: 50,\n    SEVENTH_POINTS: 100,\n    POWER_CHORD_POINTS: 25,\n  },\n\n  // Level heights for each key (relative to camera height)\n  LEVEL_HEIGHTS: {\n    S: -80, // Ground level offset\n    D: -120, // Level 2 offset\n    F: -160, // Level 3 offset\n    G: -200, // Level 4 offset\n    H: -240, // Level 5 offset\n    J: -280, // Level 6 offset\n    K: -320, // Highest level offset\n    // Chromatic notes (between diatonic levels)\n    R: -100, // Between S and D (D#)\n    U: -260, // Between H and J (G#)\n    I: -300, // Between J and K (Bb)\n  } as Record<GameKey, number>,\n\n  // Level colors for each key\n  LEVEL_COLORS: {\n    S: 0xe74c3c, // Red (lowest)\n    D: 0xf39c12, // Orange\n    F: 0xf1c40f, // Yellow\n    G: 0x2ecc71, // Green\n    H: 0x3498db, // Blue\n    J: 0x9b59b6, // Purple\n    K: 0xe91e63, // Pink (highest)\n    // Chromatic notes\n    R: 0xff6b6b, // Light Red (D#)\n    U: 0x4ecdc4, // Teal (G#)\n    I: 0x45b7d1, // Light Blue (Bb)\n  } as Record<GameKey, number>,\n\n  // Valid game keys\n  VALID_KEYS: [\"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"R\", \"U\", \"I\"] as readonly GameKey[],\n\n  // Error handling\n  ERROR_HANDLING: {\n    MANAGER_INIT_FAILED: \"Failed to initialize managers\",\n    INPUT_HANDLING_ERROR: \"Input handling error\",\n    PLATFORM_EXTENSION_ERROR: \"Platform extension error\",\n    CHARACTER_HEIGHT_ERROR: \"Character height update error\",\n    PLATFORM_CLEANUP_ERROR: \"Platform cleanup error\",\n    KEY_CHANGE_ERROR: \"Key change handling error\",\n    PLATFORM_START_ERROR: \"Failed to start platform\",\n    PLATFORM_END_ERROR: \"Failed to end platform\",\n  },\n} as const;\n","import { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\n// Note frequencies for each game key (C major scale + chromatic notes)\nconst NOTE_FREQUENCIES: Record<GameKey, number> = {\n  S: 261.63, // C4\n  D: 293.66, // D4\n  F: 329.63, // E4\n  G: 349.23, // F4\n  H: 392.0, // G4\n  J: 440.0, // A4\n  K: 493.88, // B4\n  // Chromatic notes\n  R: 311.13, // D#4 (Eb4)\n  U: 415.30, // G#4 (Ab4)\n  I: 466.16, // Bb4\n};\n\nexport interface IAudioManager {\n  initialize(): void;\n  playNote(key: GameKey): void;\n  isAudioAvailable(): boolean;\n  updateLFORate(delta: number): void;\n  updateChorusDepth(delta: number): void;\n  updateFilterFrequency(delta: number): void;\n  updateReverbAmount(delta: number): void;\n}\n\nexport class AudioManager implements IAudioManager {\n  private audioContext: AudioContext | null = null;\n  private isInitialized: boolean = false;\n  private audioAvailable: boolean = false;\n  \n  // SYNTHESIS PARAMETERS\n  private lfoRate: number = 2.0; // Hz - vibrato speed\n  private chorusDepth: number = 0.1; // 0-1 - detuning amount\n  private filterFrequency: number = 2000; // Hz - low-pass filter cutoff\n  private reverbAmount: number = 0.3; // 0-1 - reverb wet/dry mix\n  private distortionAmount: number = 0.2; // 0-1 - wave shaping amount\n\n  initialize(): void {\n    try {\n      // Initialize Web Audio API context\n      this.audioContext = new (window.AudioContext ||\n        (window as unknown as { webkitAudioContext: typeof AudioContext })\n          .webkitAudioContext)();\n      this.audioAvailable = true;\n      this.isInitialized = true;\n      // AudioManager initialized successfully\n    } catch (error) {\n      console.warn(\"Web Audio API not available:\", error);\n      this.audioAvailable = false;\n      this.isInitialized = true;\n    }\n  }\n\n  playNote(key: GameKey): void {\n    if (!this.isInitialized) {\n      console.warn(\"AudioManager not initialized\");\n      return;\n    }\n\n    if (!this.audioAvailable || !this.audioContext) {\n      // Graceful degradation - audio not available\n      return;\n    }\n\n    const frequency = NOTE_FREQUENCIES[key];\n    if (!frequency) {\n      console.warn(`Unknown key: ${key}`);\n      return;\n    }\n\n    try {\n      this.playMusicalTone(frequency);\n    } catch (error) {\n      console.warn(\"Failed to play note:\", error);\n    }\n  }\n\n  isAudioAvailable(): boolean {\n    return this.audioAvailable;\n  }\n\n  // ARROW KEY CONTROLS FOR SYNTHESIS PARAMETERS\n  updateLFORate(delta: number): void {\n    this.lfoRate = Math.max(0.1, Math.min(10, this.lfoRate + delta));\n    console.log(`LFO Rate: ${this.lfoRate.toFixed(1)} Hz`);\n  }\n\n  updateChorusDepth(delta: number): void {\n    this.chorusDepth = Math.max(0, Math.min(1, this.chorusDepth + delta));\n    console.log(`Chorus Depth: ${(this.chorusDepth * 100).toFixed(0)}%`);\n  }\n\n  updateFilterFrequency(delta: number): void {\n    this.filterFrequency = Math.max(100, Math.min(8000, this.filterFrequency + delta * 100));\n    console.log(`Filter Frequency: ${this.filterFrequency.toFixed(0)} Hz`);\n  }\n\n  updateReverbAmount(delta: number): void {\n    this.reverbAmount = Math.max(0, Math.min(1, this.reverbAmount + delta));\n    console.log(`Reverb Amount: ${(this.reverbAmount * 100).toFixed(0)}%`);\n  }\n\n  // GETTERS FOR SYNTHESIS PARAMETERS\n  getLFORate(): number { return this.lfoRate; }\n  getChorusDepth(): number { return this.chorusDepth; }\n  getFilterFrequency(): number { return this.filterFrequency; }\n  getReverbAmount(): number { return this.reverbAmount; }\n  getDistortionAmount(): number { return this.distortionAmount; }\n\n  private playMusicalTone(frequency: number): void {\n    if (!this.audioContext) return;\n\n    // CREATE MAIN OSCILLATOR WITH LFO VIBRATO\n    const mainOsc = this.audioContext.createOscillator();\n    const lfoOsc = this.audioContext.createOscillator();\n    const lfoGain = this.audioContext.createGain();\n    \n    // LFO SETUP FOR VIBRATO\n    lfoOsc.frequency.setValueAtTime(this.lfoRate, this.audioContext.currentTime);\n    lfoOsc.type = \"sine\";\n    lfoGain.gain.setValueAtTime(5, this.audioContext.currentTime); // 5Hz vibrato depth\n    \n    lfoOsc.connect(lfoGain);\n    lfoGain.connect(mainOsc.frequency);\n    \n    // MAIN OSCILLATOR SETUP\n    mainOsc.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n    mainOsc.type = \"sawtooth\"; // RICHER SOUND THAN SINE\n    \n    // CREATE CHORUS EFFECT (MULTIPLE DETUNED OSCILLATORS)\n    const chorusOsc1 = this.audioContext.createOscillator();\n    const chorusOsc2 = this.audioContext.createOscillator();\n    const chorusGain1 = this.audioContext.createGain();\n    const chorusGain2 = this.audioContext.createGain();\n    \n    // DETUNE CHORUS OSCILLATORS\n    const detuneAmount = this.chorusDepth * 20; // 0-20 cents detuning\n    chorusOsc1.frequency.setValueAtTime(frequency + detuneAmount, this.audioContext.currentTime);\n    chorusOsc2.frequency.setValueAtTime(frequency - detuneAmount, this.audioContext.currentTime);\n    chorusOsc1.type = \"sawtooth\";\n    chorusOsc2.type = \"sawtooth\";\n    \n    // CHORUS VOLUME (QUIETER THAN MAIN)\n    chorusGain1.gain.setValueAtTime(0.3, this.audioContext.currentTime);\n    chorusGain2.gain.setValueAtTime(0.3, this.audioContext.currentTime);\n    \n    // CREATE FILTER\n    const filter = this.audioContext.createBiquadFilter();\n    filter.type = \"lowpass\";\n    filter.frequency.setValueAtTime(this.filterFrequency, this.audioContext.currentTime);\n    filter.Q.setValueAtTime(1, this.audioContext.currentTime); // RESONANCE\n    \n    // CREATE DISTORTION\n    const distortion = this.audioContext.createWaveShaper();\n    const distortionCurve = this.createDistortionCurve(this.distortionAmount);\n    distortion.curve = distortionCurve;\n    distortion.oversample = \"4x\";\n    \n    // CREATE REVERB USING DELAY\n    const reverbDelay = this.audioContext.createDelay();\n    const reverbGain = this.audioContext.createGain();\n    const reverbFeedback = this.audioContext.createGain();\n    \n    reverbDelay.delayTime.setValueAtTime(0.3, this.audioContext.currentTime);\n    reverbGain.gain.setValueAtTime(this.reverbAmount, this.audioContext.currentTime);\n    reverbFeedback.gain.setValueAtTime(0.4, this.audioContext.currentTime);\n    \n    // CREATE MAIN GAIN NODE\n    const mainGain = this.audioContext.createGain();\n    \n    // CONNECT AUDIO GRAPH\n    mainOsc.connect(mainGain);\n    chorusOsc1.connect(chorusGain1).connect(mainGain);\n    chorusOsc2.connect(chorusGain2).connect(mainGain);\n    \n    mainGain.connect(filter);\n    filter.connect(distortion);\n    \n    // SPLIT SIGNAL: DRY AND WET (REVERB)\n    const dryGain = this.audioContext.createGain();\n    const wetGain = this.audioContext.createGain();\n    \n    dryGain.gain.setValueAtTime(1 - this.reverbAmount, this.audioContext.currentTime);\n    wetGain.gain.setValueAtTime(this.reverbAmount, this.audioContext.currentTime);\n    \n    distortion.connect(dryGain);\n    distortion.connect(wetGain);\n    \n    // REVERB CHAIN\n    wetGain.connect(reverbDelay);\n    reverbDelay.connect(reverbFeedback);\n    reverbFeedback.connect(reverbDelay); // FEEDBACK LOOP\n    reverbDelay.connect(wetGain);\n    \n    // COMBINE DRY AND WET\n    const outputGain = this.audioContext.createGain();\n    dryGain.connect(outputGain);\n    wetGain.connect(outputGain);\n    outputGain.connect(this.audioContext.destination);\n    \n    // ENVELOPE (ADSR)\n    const now = this.audioContext.currentTime;\n    const attackTime = 0.01;\n    const decayTime = 0.1;\n    const sustainLevel = 0.7;\n    const releaseTime = 0.3;\n    const noteDuration = GAME_CONSTANTS.AUDIO.NOTE_DURATION;\n    \n    // ATTACK\n    outputGain.gain.setValueAtTime(0, now);\n    outputGain.gain.linearRampToValueAtTime(GAME_CONSTANTS.AUDIO.VOLUME, now + attackTime);\n    \n    // DECAY\n    outputGain.gain.linearRampToValueAtTime(\n      GAME_CONSTANTS.AUDIO.VOLUME * sustainLevel, \n      now + attackTime + decayTime\n    );\n    \n    // RELEASE\n    outputGain.gain.exponentialRampToValueAtTime(\n      0.001, \n      now + noteDuration\n    );\n    \n    // START ALL OSCILLATORS\n    mainOsc.start(now);\n    lfoOsc.start(now);\n    chorusOsc1.start(now);\n    chorusOsc2.start(now);\n    \n    // STOP ALL OSCILLATORS\n    const stopTime = now + noteDuration;\n    mainOsc.stop(stopTime);\n    lfoOsc.stop(stopTime);\n    chorusOsc1.stop(stopTime);\n    chorusOsc2.stop(stopTime);\n  }\n  \n  private createDistortionCurve(amount: number): Float32Array {\n    const samples = 44100;\n    const curve = new Float32Array(samples);\n    const deg = Math.PI / 180;\n    \n    for (let i = 0; i < samples; i++) {\n      const x = (i * 2) / samples - 1;\n      curve[i] = ((3 + amount) * x * 20 * deg) / (Math.PI + amount * Math.abs(x));\n    }\n    \n    return curve;\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport interface IInputManager {\n  initialize(): void;\n  update(currentTime: number): { keyStateChanged: boolean };\n  getInputState(): { pressedKeys: Set<string> };\n  getArrowKeyState(): { up: boolean; down: boolean; left: boolean; right: boolean };\n}\n\nexport class InputManager implements IInputManager {\n  private scene: Scene;\n  private currentlyPressedKeys: Set<string> = new Set();\n  private previouslyPressedKeys: Set<string> = new Set();\n  private isInitialized: boolean = false;\n  private keyObjects: Map<string, Phaser.Input.Keyboard.Key> = new Map();\n  private arrowKeys: {\n    up: Phaser.Input.Keyboard.Key | null;\n    down: Phaser.Input.Keyboard.Key | null;\n    left: Phaser.Input.Keyboard.Key | null;\n    right: Phaser.Input.Keyboard.Key | null;\n  } = { up: null, down: null, left: null, right: null };\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  initialize(): void {\n    if (!this.scene.input.keyboard) {\n      console.warn(\"Keyboard input not available\");\n      return;\n    }\n\n    // Create key objects once during initialization\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      this.keyObjects.set(key, this.scene.input.keyboard!.addKey(key));\n    });\n\n    // INITIALIZE ARROW KEYS FOR SYNTHESIS CONTROLS\n    this.arrowKeys.up = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.UP);\n    this.arrowKeys.down = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.DOWN);\n    this.arrowKeys.left = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.LEFT);\n    this.arrowKeys.right = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.RIGHT);\n\n    // ADDITIONAL SYNTHESIS CONTROLS (NUMBER KEYS)\n    this.keyObjects.set(\"1\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.ONE));\n    this.keyObjects.set(\"2\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.TWO));\n    this.keyObjects.set(\"3\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.THREE));\n    this.keyObjects.set(\"4\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.FOUR));\n\n    this.isInitialized = true;\n    // InputManager initialized successfully\n  }\n\n  update(_currentTime: number): { keyStateChanged: boolean } {\n    if (!this.isInitialized || !this.scene.input.keyboard) {\n      return { keyStateChanged: false };\n    }\n\n    // Store previous state\n    this.previouslyPressedKeys = new Set(this.currentlyPressedKeys);\n\n    // Clear current state\n    this.currentlyPressedKeys.clear();\n\n    // Check each valid game key using pre-created key objects\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      const keyObject = this.keyObjects.get(key);\n      if (keyObject && keyObject.isDown) {\n        this.currentlyPressedKeys.add(key);\n      }\n    });\n\n    // Determine if key state changed\n    const keyStateChanged = this.hasKeyStateChanged();\n\n    return { keyStateChanged };\n  }\n\n  getInputState(): { pressedKeys: Set<string> } {\n    return {\n      pressedKeys: new Set(this.currentlyPressedKeys),\n    };\n  }\n\n  getArrowKeyState(): { up: boolean; down: boolean; left: boolean; right: boolean } {\n    return {\n      up: this.arrowKeys.up?.isDown || false,\n      down: this.arrowKeys.down?.isDown || false,\n      left: this.arrowKeys.left?.isDown || false,\n      right: this.arrowKeys.right?.isDown || false,\n    };\n  }\n\n  private hasKeyStateChanged(): boolean {\n    // Check if the sets are different\n    if (this.currentlyPressedKeys.size !== this.previouslyPressedKeys.size) {\n      return true;\n    }\n\n    // Check if any key in current set is not in previous set\n    for (const key of this.currentlyPressedKeys) {\n      if (!this.previouslyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    // Check if any key in previous set is not in current set\n    for (const key of this.previouslyPressedKeys) {\n      if (!this.currentlyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Helper method to check if a key is a valid game key\n  isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\ninterface PlatformData {\n  rectangle: Phaser.GameObjects.Rectangle;\n  startX: number;\n  key: GameKey;\n  startTime: number;\n  isGrowing: boolean;\n}\n\nexport interface IPlatformManager {\n  initialize(): void;\n  startNewPlatform(key: GameKey, startX: number): void;\n  endPlatform(key: GameKey): void;\n  extendActivePlatforms(characterX: number): void;\n  getHighestActiveKey(): GameKey | null;\n  hasActivePlatforms(): boolean;\n  cleanupOldPlatforms(characterX: number): void;\n  getActivePlatforms(): Map<string, PlatformData>;\n  getPlatformsGroup(): Phaser.GameObjects.Group;\n}\n\nexport class PlatformManager implements IPlatformManager {\n  private scene: Scene;\n  private activePlatforms: Map<string, PlatformData> = new Map();\n  private platformsGroup: Phaser.GameObjects.Group;\n  private isInitialized: boolean = false;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n    this.platformsGroup = this.scene.add.group();\n  }\n\n  initialize(): void {\n    this.isInitialized = true;\n    // PlatformManager initialized successfully\n  }\n\n  startNewPlatform(key: GameKey, startX: number): void {\n    if (!this.isInitialized) {\n      console.warn(\"PlatformManager not initialized\");\n      return;\n    }\n\n    // Don't create duplicate platforms for the same key\n    if (this.activePlatforms.has(key)) {\n      return;\n    }\n\n    const { height } = this.scene.cameras.main;\n    const platformY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n    const platformColor = GAME_CONSTANTS.LEVEL_COLORS[key];\n\n    // Create platform rectangle - start with minimum length\n    const platform = this.scene.add.rectangle(\n      startX + GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET,\n      platformY,\n      GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n      GAME_CONSTANTS.PLATFORMS.HEIGHT,\n      platformColor,\n    );\n\n    // Add to physics (optional, for future collision detection)\n    this.scene.physics.add.existing(platform, true); // true = static body\n\n    // Store platform data\n    const platformData: PlatformData = {\n      rectangle: platform,\n      startX: startX,\n      key: key,\n      startTime: this.scene.time.now,\n      isGrowing: true,\n    };\n\n    this.activePlatforms.set(key, platformData);\n    this.platformsGroup.add(platform);\n\n    // Platform created for key at specified height\n  }\n\n  endPlatform(key: GameKey): void {\n    const platformData = this.activePlatforms.get(key);\n    if (!platformData) {\n      return;\n    }\n\n    // Stop growing the platform\n    platformData.isGrowing = false;\n    \n    // Remove from active platforms but keep the visual platform\n    this.activePlatforms.delete(key);\n    // Platform ended for key\n  }\n\n  extendActivePlatforms(characterX: number): void {\n    this.activePlatforms.forEach((platformData, _key) => {\n      if (!platformData.isGrowing) return;\n      \n      const platform = platformData.rectangle;\n      \n      // Calculate how far the character has moved since platform creation\n      const distanceMoved = characterX - platformData.startX;\n      \n      // Platform should extend to keep up with character movement\n      const newWidth = Math.max(\n        GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n        GAME_CONSTANTS.PLATFORMS.MIN_LENGTH + distanceMoved\n      );\n      \n      // Update platform size and position\n      const leftEdge = platform.x - platform.width / 2;\n      const newCenterX = leftEdge + newWidth / 2;\n      \n      platform.setSize(newWidth, platform.height);\n      platform.setPosition(newCenterX, platform.y);\n    });\n  }\n\n  getHighestActiveKey(): GameKey | null {\n    if (this.activePlatforms.size === 0) {\n      return null;\n    }\n\n    // Find the key with the highest level (lowest Y value)\n    let highestKey: GameKey | null = null;\n    let highestY = Number.POSITIVE_INFINITY;\n\n    this.activePlatforms.forEach((_platformData, key) => {\n      const levelHeight = GAME_CONSTANTS.LEVEL_HEIGHTS[key as GameKey];\n      if (levelHeight < highestY) {\n        highestY = levelHeight;\n        highestKey = key as GameKey;\n      }\n    });\n\n    return highestKey;\n  }\n\n  hasActivePlatforms(): boolean {\n    return this.activePlatforms.size > 0;\n  }\n\n  cleanupOldPlatforms(characterX: number): void {\n    const platformsToRemove: Phaser.GameObjects.Rectangle[] = [];\n\n    // Check all platforms in the group, not just active ones\n    this.platformsGroup.children.entries.forEach((platform) => {\n      const rect = platform as Phaser.GameObjects.Rectangle;\n      const platformRightEdge = rect.x + rect.width / 2;\n\n      // Remove platforms that are far behind the character\n      if (\n        platformRightEdge <\n        characterX - GAME_CONSTANTS.PLATFORMS.CLEANUP_DISTANCE\n      ) {\n        platformsToRemove.push(rect);\n      }\n    });\n\n    // Remove old platforms\n    platformsToRemove.forEach((platform) => {\n      this.platformsGroup.remove(platform);\n      platform.destroy();\n    });\n\n    // Old platforms cleaned up\n  }\n\n  getActivePlatforms(): Map<string, PlatformData> {\n    return new Map(this.activePlatforms);\n  }\n\n  getPlatformsGroup(): Phaser.GameObjects.Group {\n    return this.platformsGroup;\n  }\n\n  // Helper method to get level height for a key\n  getLevelHeight(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n  }\n\n  // Helper method to get level color for a key\n  getLevelColor(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_COLORS[key];\n  }\n}\n","// Note mapping system - maps keyboard keys to musical notes\nexport const NOTE_MAPPING = {\n  // Keyboard key -> Musical note\n  S: \"C\",  // C (Root)\n  D: \"D\",  // D (2nd)\n  F: \"E\",  // E (3rd)\n  G: \"F\",  // F (4th)\n  H: \"G\",  // G (5th)\n  J: \"A\",  // A (6th)\n  K: \"B\",  // B (7th)\n  // Chromatic notes\n  R: \"D#\", // D# (Sharp 2nd)\n  U: \"G#\", // G# (Sharp 5th)\n  I: \"Bb\", // Bb (Flat 7th)\n} as const;\n\n// Reverse mapping - Musical note -> Keyboard key\nexport const KEY_MAPPING = {\n  C: \"S\",\n  D: \"D\", \n  E: \"F\",\n  F: \"G\",\n  G: \"H\",\n  A: \"J\",\n  B: \"K\",\n  // Chromatic notes\n  \"D#\": \"R\",\n  \"G#\": \"U\",\n  \"Bb\": \"I\",\n} as const;\n\n// ALL COMMON CHORDS IN THE C MAJOR KEY (NOTES SORTED ALPHABETICALLY)\nexport const CHORD_DEFINITIONS = {\n    // ----------------------------\n    // TRIADS (3 NOTES) - 50 POINTS\n    // ----------------------------\n    \"C,E,G\": { name: \"C Major (I)\", points: 50 },\n    \"A,D,F\": { name: \"D Minor (ii)\", points: 50 },\n    \"B,E,G\": { name: \"E Minor (iii)\", points: 50 },\n    \"A,C,F\": { name: \"F Major (IV)\", points: 50 },\n    \"B,D,G\": { name: \"G Major (V)\", points: 50 },\n    \"A,C,E\": { name: \"A Minor (vi)\", points: 50 },\n    \"B,D,F\": { name: \"B Diminished (vii°)\", points: 50 },\n  \n    // ----------------------------\n    // SEVENTHS (4 NOTES) - 100 POINTS\n    // ----------------------------\n    \"B,C,E,G\": { name: \"C Major 7 (IΔ7)\", points: 100 },\n    \"A,C,D,F\": { name: \"D Minor 7 (ii7)\", points: 100 },\n    \"B,D,E,G\": { name: \"E Minor 7 (iii7)\", points: 100 },\n    \"A,C,E,F\": { name: \"F Major 7 (IVΔ7)\", points: 100 },\n    \"B,D,F,G\": { name: \"G Dominant 7 (V7)\", points: 100 },\n    \"A,C,E,G\": { name: \"A Minor 7 (vi7)\", points: 100 },\n    \"A,B,D,F\": { name: \"B Half-Diminished 7 (viiø7)\", points: 100 },\n  \n    // ----------------------------\n    // EXTENDED CHORDS - 150 POINTS\n    // ----------------------------\n    \"B,C,D,E,G\": { name: \"C Major 9\", points: 150 },\n    \"A,C,D,E,F\": { name: \"D Minor 9\", points: 150 },\n    \"A,B,D,F,G\": { name: \"G9 (Dominant 9)\", points: 150 },\n    \"A,B,C,E,G\": { name: \"A Minor 9\", points: 150 },\n  \n    // ----------------------------\n    // SUSPENDED CHORDS - 50 POINTS\n    // ----------------------------\n    \"C,F,G\": { name: \"Csus4\", points: 50 },\n    \"C,D,G\": { name: \"Csus2\", points: 50 },\n    \"A,D,G\": { name: \"Dsus4\", points: 50 },\n  \n    // ----------------------------\n    // ADD CHORDS - 75 POINTS\n    // ----------------------------\n    \"C,D,E,G\": { name: \"Cadd9\", points: 75 },\n  \n    // ----------------------------\n    // POWER CHORDS (5ths) - 25 POINTS\n    // ----------------------------\n    \"C,G\": { name: \"C5\", points: 25 },\n    \"A,D\": { name: \"D5\", points: 25 },\n    \"B,E\": { name: \"E5\", points: 25 },\n    \"C,F\": { name: \"F5\", points: 25 },\n    \"D,G\": { name: \"G5\", points: 25 },\n    \"A,E\": { name: \"A5\", points: 25 },\n    \"B,F\": { name: \"B5\", points: 25 },\n  } as const;\n  \n// C MAJOR + CHROMATIC EXTENSIONS (Bb, D#, G# INCLUDED, NOTES SORTED ALPHABETICALLY)\nexport const CHORD_DEFINITIONS_EXTENDED = {\n    // ----------------------------\n    // CHROMATIC TRIADS - 50 POINTS\n    // ----------------------------\n    \"A,C,D#\": { name: \"A Diminished (viio/iii)\", points: 50 },\n    \"A,C#,E\": { name: \"A Major (V/ii)\", points: 50 },\n    \"A,D,F#\": { name: \"D Major (V/V)\", points: 50 },\n    \"A#,C#,E\": { name: \"A# Diminished (viio/bII)\", points: 50 },\n    \"A#,C,D,F\": { name: \"F Minor (iv)\", points: 50 },\n    \"A#,F,G#\": { name: \"F Augmented (IV+)\", points: 50 },\n    \"A#,D,F\": { name: \"Bb Major (bVII)\", points: 50 },\n    \"A#,D,G\": { name: \"G Minor (v)\", points: 50 },\n    \"A#,D,G#\": { name: \"Ab Major (bVI)\", points: 50 },\n    \"B,D#,G#\": { name: \"G# Minor (iii/vi)\", points: 50 },\n    \"C,D#,G\": { name: \"C Minor (i)\", points: 50 },\n    \"A#,C,D#,G\": { name: \"C Minor 7 (i7)\", points: 100 },\n    \"C,E,G#\": { name: \"C Augmented (I+)\", points: 50 },\n    \"B,C,E,G#\": { name: \"C Augmented Major 7 (I+Δ7)\", points: 100 },\n    \"C#,E,G#\": { name: \"C# Diminished (viio/ii)\", points: 50 },\n    \"C#,F,G#\": { name: \"C# Minor (ii/ii)\", points: 50 },\n    \"B,C#,F,G#\": { name: \"C# Minor 7 (ii7/ii)\", points: 100 },\n    \"D,F,G#\": { name: \"D Augmented (II+)\", points: 50 },\n    \"A#,D#,G\": { name: \"Eb Minor (biii)\", points: 50 },\n    \"B,D#,G\": { name: \"D# Diminished\", points: 50 },\n    \"B,E,G#\": { name: \"E Major (III)\", points: 50 },\n    \"B,D,E,G#\": { name: \"E Dominant 7 (V7/vi)\", points: 100 },\n    \"C,F,G#\": { name: \"F Augmented (IV+)\", points: 50 },\n    \"A#,C,F\": { name: \"F Minor (iv)\", points: 50 },\n    \"A#,C,F,G#\": { name: \"F Augmented (IV+)\", points: 50 },\n\n  \n    // ----------------------------\n    // POWER CHORDS (5ths) - 25 POINTS\n    // ----------------------------\n    \"A#,F\": { name: \"Bb5 (bVII5)\", points: 25 },\n    \"A#,D#\": { name: \"Eb5 (bIII5)\", points: 25 },\n    \"D#,G#\": { name: \"Ab5 (bVI5)\", points: 25 },\n  } as const;\n  \n  \n\n// Helper functions\nexport function keysToNotes(keys: string[]): string[] {\n  return keys.map(key => NOTE_MAPPING[key as keyof typeof NOTE_MAPPING] || key);\n}\n\nexport function notesToKeys(notes: string[]): string[] {\n  return notes.map(note => KEY_MAPPING[note as keyof typeof KEY_MAPPING] || note);\n}\n\nexport function getChordFromNotes(notes: string[]): { name: string; points: number } | null {\n  const sortedNotes = [...notes].sort();\n  const noteString = sortedNotes.join(\",\");\n  \n  // Debug: Log what we're looking for\n  console.log(\"Looking for chord:\", noteString);\n  console.log(\"Available main chords:\", Object.keys(CHORD_DEFINITIONS).length);\n  console.log(\"Available extended chords:\", Object.keys(CHORD_DEFINITIONS_EXTENDED).length);\n  \n  // Check main chord definitions first\n  const mainChord = CHORD_DEFINITIONS[noteString as keyof typeof CHORD_DEFINITIONS];\n  if (mainChord) {\n    console.log(\"✅ Found in main chords:\", mainChord.name);\n    return mainChord;\n  }\n  \n  // Check extended chord definitions\n  const extendedChord = CHORD_DEFINITIONS_EXTENDED[noteString as keyof typeof CHORD_DEFINITIONS_EXTENDED];\n  if (extendedChord) {\n    console.log(\"✅ Found in extended chords:\", extendedChord.name);\n    return extendedChord;\n  }\n  \n  console.log(\"❌ No chord found for:\", noteString);\n  return null;\n}\n\nexport function getChordFromKeys(keys: string[]): { name: string; points: number } | null {\n  const sortedKeys = [...keys].sort();\n  const notes = keysToNotes(sortedKeys);\n  return getChordFromNotes(notes);\n}\n","import { Scene } from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\nimport { getChordFromKeys, keysToNotes } from \"../config/NoteMapping\";\n\ninterface ChordData {\n  chordType: string;\n  basePoints: number;\n  accumulatedPoints: number;\n  startTime: number;\n  isComplete: boolean;\n}\n\nexport class ChordDetector {\n  private scene: Scene;\n  private currentChord: ChordData | null = null;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  update(activeKeys: Set<string>): { points: number; chordName: string | null } {\n    const keyArray = Array.from(activeKeys).sort();\n    const notes = keysToNotes(keyArray);\n    const noteString = notes.join(\",\");\n    \n    // Debug: Log the key combination being checked\n    if (activeKeys.size > 1) {\n      console.log(\"Keys pressed:\", keyArray.join(\",\"));\n      console.log(\"Notes:\", notes.join(\",\"));\n      console.log(\"Looking for chord:\", noteString);\n    }\n    \n    const chordDef = getChordFromKeys(keyArray);\n\n    if (chordDef) {\n      console.log(\"✅ Chord detected:\", chordDef.name);\n      // New chord detected or same chord continuing\n      if (!this.currentChord || this.currentChord.chordType !== chordDef.name) {\n        this.currentChord = {\n          chordType: chordDef.name,\n          basePoints: chordDef.points,\n          accumulatedPoints: 0,\n          startTime: this.scene.time.now,\n          isComplete: false,\n        };\n      }\n\n      // Calculate points earned this frame (not total accumulated)\n      const elapsed = this.scene.time.now - this.currentChord.startTime;\n      const progress = Math.min(elapsed / GAME_CONSTANTS.CHORD_DETECTION.ACCUMULATION_TIME, 1);\n      const newAccumulatedPoints = Math.floor(this.currentChord.basePoints * progress);\n      const pointsThisFrame = newAccumulatedPoints - this.currentChord.accumulatedPoints;\n      \n      this.currentChord.accumulatedPoints = newAccumulatedPoints;\n\n      // Check if chord is complete\n      if (progress >= 1 && !this.currentChord.isComplete) {\n        this.currentChord.isComplete = true;\n      }\n\n      return { points: pointsThisFrame, chordName: this.currentChord.chordType };\n    } else {\n      // No valid chord detected\n      if (activeKeys.size > 1) {\n        console.log(\"❌ No chord found for:\", noteString);\n      }\n      this.currentChord = null;\n      return { points: 0, chordName: null };\n    }\n  }\n\n  getCurrentChord(): ChordData | null {\n    return this.currentChord;\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { AudioManager } from \"../audio/AudioManager\";\nimport { InputManager } from \"../input/InputManager\";\nimport { PlatformManager } from \"../platform/PlatformManager\";\nimport { ChordDetector } from \"../audio/ChordDetector\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport class MuseRunnerGame extends Scene {\n  private character!: Phaser.GameObjects.Image;\n  private scoreText!: Phaser.GameObjects.Text;\n\n  // Game state\n  private isGameRunning: boolean = false;\n  private score: number = 0;\n  \n  // SYNTHESIS PARAMETER DISPLAY\n  private synthDisplay!: Phaser.GameObjects.Text;\n\n  // Managers\n  private audioManager!: AudioManager;\n  private inputManager!: InputManager;\n  private platformManager!: PlatformManager;\n  private chordDetector!: ChordDetector;\n\n  constructor() {\n    super(\"MuseRunnerGame\");\n  }\n\n  async create(): Promise<void> {\n    const { width, height } = this.cameras.main;\n\n    // Initialize managers with error handling\n    try {\n      this.audioManager = new AudioManager();\n      this.inputManager = new InputManager(this);\n      this.platformManager = new PlatformManager(this);\n      this.chordDetector = new ChordDetector(this);\n\n      // Initialize managers with error handling\n      this.audioManager.initialize();\n      this.inputManager.initialize();\n      this.platformManager.initialize();\n\n      // All managers initialized successfully\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.MANAGER_INIT_FAILED, error);\n      // Game can still continue with degraded functionality\n    }\n\n    // Create character using player.png image\n    this.character = this.add.image(\n      100,\n      height - 80,\n      \"player\"\n    );\n    this.character.setDepth(1000); // Ensure character appears above platforms\n    this.physics.add.existing(this.character);\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Set up physics for endless running - no collision needed\n    characterBody.setCollideWorldBounds(false);\n    characterBody.setDragX(0);\n    characterBody.setFrictionX(0);\n    characterBody.setGravityY(0); // No gravity - character rides platforms directly\n\n    // Create UI - make sure it's visible and doesn't scroll\n    this.scoreText = this.add.text(16, 16, \"Score: 0\", {\n      fontSize: \"24px\",\n      color: \"#ffffff\",\n      fontFamily: \"Nabla, system-ui\",\n      stroke: \"#000000\",\n      strokeThickness: 2,\n    });\n    this.scoreText.setScrollFactor(0); // Don't scroll with camera\n\n    // CREATE SYNTHESIS PARAMETER DISPLAY\n    this.synthDisplay = this.add.text(16, 50, \"SYNTH CONTROLS:\\n↑↓ LFO Rate | ←→ Chorus\\n1/2 Filter | 3/4 Reverb\", {\n      fontSize: \"16px\",\n      color: \"#ffff00\",\n      fontFamily: \"Nabla, system-ui\",\n      stroke: \"#000000\",\n      strokeThickness: 1,\n    });\n    this.synthDisplay.setScrollFactor(0); // Don't scroll with camera\n\n    // REMOVED: Instructions and key guide UI elements\n\n    // Controls info\n    this.add\n      .text(width - 16, 16, \"v0.0.4 | ESC: Menu | T: Restart\", {\n        fontSize: \"14px\",\n        color: \"#95a5a6\",\n        fontFamily: \"Nabla, system-ui\",\n      })\n      .setOrigin(1, 0)\n      .setScrollFactor(0); // Don't scroll with camera\n\n    // ESC key to return to menu\n    this.input.keyboard!.on(\"keydown-ESC\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n\n    // T key to restart (R is now used for D# note)\n    this.input.keyboard!.on(\"keydown-T\", () => {\n      this.scene.restart();\n    });\n\n    // Start the game\n    this.isGameRunning = true;\n\n    // Camera follows character\n    this.cameras.main.startFollow(\n      this.character,\n      true,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_X,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_Y,\n    );\n    this.cameras.main.setDeadzone(\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_X,\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_Y,\n    );\n\n    // Reset game state\n    this.score = 0;\n\n    // Don't start with any musical platform - wait for first key press\n  }\n\n  override update(): void {\n    if (!this.isGameRunning) return;\n\n    // Auto-run character forward - ALWAYS moving, never stops\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Force constant forward movement - override any physics that might stop it\n    characterBody.setVelocityX(GAME_CONSTANTS.CHARACTER.SPEED);\n    characterBody.setDragX(0); // No drag to slow down\n    characterBody.setFrictionX(0); // No friction from platforms\n\n    // Handle input for multiple simultaneous keys with error handling\n    try {\n      const { keyStateChanged } = this.inputManager.update(this.time.now);\n      const inputState = this.inputManager.getInputState();\n      const arrowKeys = this.inputManager.getArrowKeyState();\n\n      // HANDLE ARROW KEY SYNTHESIS CONTROLS\n      if (arrowKeys.up) {\n        this.audioManager.updateLFORate(0.1); // INCREASE LFO RATE\n      }\n      if (arrowKeys.down) {\n        this.audioManager.updateLFORate(-0.1); // DECREASE LFO RATE\n      }\n      if (arrowKeys.left) {\n        this.audioManager.updateChorusDepth(-0.05); // DECREASE CHORUS DEPTH\n      }\n      if (arrowKeys.right) {\n        this.audioManager.updateChorusDepth(0.05); // INCREASE CHORUS DEPTH\n      }\n\n      // ADDITIONAL SYNTHESIS CONTROLS (NUMBER KEYS)\n      if (inputState.pressedKeys.has(\"1\")) {\n        this.audioManager.updateFilterFrequency(-50); // DECREASE FILTER FREQUENCY\n      }\n      if (inputState.pressedKeys.has(\"2\")) {\n        this.audioManager.updateFilterFrequency(50); // INCREASE FILTER FREQUENCY\n      }\n      if (inputState.pressedKeys.has(\"3\")) {\n        this.audioManager.updateReverbAmount(-0.05); // DECREASE REVERB\n      }\n      if (inputState.pressedKeys.has(\"4\")) {\n        this.audioManager.updateReverbAmount(0.05); // INCREASE REVERB\n      }\n\n      // UPDATE SYNTHESIS PARAMETER DISPLAY\n      this.updateSynthesisDisplay();\n\n      if (keyStateChanged) {\n        this.handleKeyChanges(inputState.pressedKeys);\n      }\n\n      // Update chord detection\n      const chordResult = this.chordDetector.update(inputState.pressedKeys);\n      if (chordResult.points > 0) {\n        this.score += chordResult.points;\n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n        \n        // Show chord name and points if detected (only show when points are earned)\n        if (chordResult.chordName && chordResult.points > 0) {\n          this.showChordName(chordResult.chordName, chordResult.points);\n        }\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.INPUT_HANDLING_ERROR, error);\n    }\n\n    // Extend all active platforms as character moves with error handling\n    try {\n      if (this.platformManager.hasActivePlatforms()) {\n        this.platformManager.extendActivePlatforms(this.character.x);\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_EXTENSION_ERROR, error);\n    }\n\n    // Make character ride the highest active platform with error handling\n    try {\n      this.updateCharacterHeight();\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.CHARACTER_HEIGHT_ERROR, error);\n    }\n\n    // Character position tracking removed for performance\n  }\n\n  private updateSynthesisDisplay(): void {\n    const lfoRate = this.audioManager.getLFORate();\n    const chorusDepth = this.audioManager.getChorusDepth();\n    const filterFreq = this.audioManager.getFilterFrequency();\n    const reverbAmount = this.audioManager.getReverbAmount();\n    \n    this.synthDisplay.setText(\n      `SYNTH CONTROLS:\\n` +\n      `↑↓ LFO: ${lfoRate.toFixed(1)}Hz | ←→ Chorus: ${(chorusDepth * 100).toFixed(0)}%\\n` +\n      `1/2 Filter: ${filterFreq.toFixed(0)}Hz | 3/4 Reverb: ${(reverbAmount * 100).toFixed(0)}%`\n    );\n\n    // Game over condition - only if character falls WAY off screen (make it more lenient)\n    if (\n      this.character.y >\n      this.cameras.main.height + GAME_CONSTANTS.GAME.OVER_FALL_DISTANCE\n    ) {\n      // Game over triggered - character fell too far\n      this.gameOver();\n    }\n\n    // Clean up old platforms through platform manager with error handling\n    try {\n      this.platformManager.cleanupOldPlatforms(this.character.x);\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_CLEANUP_ERROR, error);\n    }\n  }\n\n  private handleKeyChanges(currentlyPressedKeys: Set<string>): void {\n    try {\n      const activePlatforms = this.platformManager.getActivePlatforms();\n\n      // Start new platforms for newly pressed keys\n      currentlyPressedKeys.forEach((key) => {\n        if (this.isValidGameKey(key) && !activePlatforms.has(key)) {\n          try {\n            this.platformManager.startNewPlatform(key, this.character.x);\n            this.audioManager.playNote(key);\n            // Platform started for key\n\n            // Visual feedback - scale character briefly\n            this.character.setScale(1.2);\n            this.time.delayedCall(\n              GAME_CONSTANTS.CHARACTER.VISUAL_FEEDBACK_DURATION,\n              () => {\n                this.character.setScale(1.0); // Back to normal size\n              },\n            );\n\n            this.score += GAME_CONSTANTS.GAME.SCORE_PER_PLATFORM;\n            this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_START_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n\n      // End platforms for released keys\n      activePlatforms.forEach((_platformData, key) => {\n        if (!currentlyPressedKeys.has(key)) {\n          try {\n            this.platformManager.endPlatform(key as GameKey);\n            // Platform ended for key\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_END_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.KEY_CHANGE_ERROR, error);\n    }\n  }\n\n  private isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n\n  private updateCharacterHeight(): void {\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Get the highest active key to determine target height\n    const highestKey = this.platformManager.getHighestActiveKey();\n\n    if (highestKey) {\n      // Calculate target Y based on the highest active key\n      const { height } = this.cameras.main;\n      const targetY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[highestKey];\n      const currentY = this.character.y;\n      const heightDiff = targetY - currentY;\n\n      // Very smooth transition with slower lerp\n      if (Math.abs(heightDiff) > 0.5) {\n        // Use slower lerp for ultra-smooth movement\n        const newY = Phaser.Math.Linear(\n          currentY,\n          targetY,\n          GAME_CONSTANTS.GAME.CHARACTER_HEIGHT_LERP_SPEED,\n        );\n        this.character.y = newY;\n        characterBody.setVelocityY(0); // Override physics velocity\n      } else {\n        // Close enough, lock to platform\n        this.character.y = targetY;\n        characterBody.setVelocityY(0);\n      }\n    } else {\n      // No active platforms - fall down smoothly to ground\n      const { height } = this.cameras.main;\n      const groundY = height - GAME_CONSTANTS.GAME.GROUND_OFFSET;\n\n      if (this.character.y < groundY) {\n        characterBody.setVelocityY(GAME_CONSTANTS.GAME.FALL_VELOCITY); // Fall down\n      } else {\n        this.character.y = groundY; // Hit ground\n        characterBody.setVelocityY(0);\n      }\n    }\n  }\n\n  private showChordName(chordName: string, points: number): void {\n    // Remove any existing chord name text\n    this.children.list.forEach(child => {\n      if (child.name === 'chordName') {\n        child.destroy();\n      }\n    });\n\n    // Get current chord data to show accumulated points\n    const currentChord = this.chordDetector.getCurrentChord();\n    const accumulatedPoints = currentChord ? currentChord.accumulatedPoints : 0;\n\n    // Create new chord name text - position relative to camera viewport\n    const chordText = this.add.text(\n      this.cameras.main.width / 2,\n      100,\n      `${chordName} ${accumulatedPoints}/${currentChord?.basePoints || 0}`,\n      {\n        fontSize: \"32px\",\n        color: \"#f39c12\",\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#000000\",\n        strokeThickness: 2,\n      }\n    );\n    chordText.setOrigin(0.5);\n    chordText.setScrollFactor(0);\n    chordText.name = 'chordName';\n\n    // Animate the chord name\n    this.tweens.add({\n      targets: chordText,\n      alpha: 0,\n      y: chordText.y - 50,\n      duration: 2000,\n      ease: \"Power2\",\n      onComplete: () => chordText.destroy(),\n    });\n  }\n\n  private gameOver(): void {\n    this.isGameRunning = false;\n\n    const { width, height } = this.cameras.main;\n\n    // Stop camera follow\n    this.cameras.main.stopFollow();\n\n    // Game over screen\n    const gameOverBg = this.add.rectangle(\n      this.cameras.main.scrollX + width / 2,\n      this.cameras.main.scrollY + height / 2,\n      width,\n      height,\n      0x000000,\n      0.8,\n    );\n    gameOverBg.setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 80,\n        \"Game Over!\",\n        {\n          fontSize: \"48px\",\n          color: \"#e74c3c\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 20,\n        `Final Score: ${Math.floor(this.score)}`,\n        {\n          fontSize: \"24px\",\n          color: \"#ffffff\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    const restartText = this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 + 30,\n        \"Press T to restart or ESC for menu\",\n        {\n          fontSize: \"18px\",\n          color: \"#bdc3c7\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    // Pulsing restart text\n    this.tweens.add({\n      targets: restartText,\n      alpha: 0.5,\n      duration: 1000,\n      yoyo: true,\n      repeat: -1,\n    });\n\n    // Send score to parent (Reddit)\n    if (window.parent) {\n      window.parent.postMessage(\n        {\n          type: \"GAME_OVER\",\n          data: { finalScore: Math.floor(this.score) },\n        },\n        \"*\",\n      );\n    }\n  }\n}\n","import { Scene, GameObjects } from \"phaser\";\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super(\"MainMenu\");\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on(\"resize\", () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n\n    this.input.keyboard!.on(\"keydown-SPACE\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add\n        .text(0, 0, \"🎵 Muse Runner 🏃‍♂️\", {\n          fontSize: \"48px\",\n          color: \"#ffffff\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add\n        .text(0, 0, \"Rhythm Platformer\", {\n          fontSize: \"24px\",\n          color: \"#3498db\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add\n        .text(\n          0,\n          0,\n          \"Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen\",\n          {\n            fontSize: \"18px\",\n            color: \"#ecf0f1\",\n            fontFamily: \"Nabla, system-ui\",\n            align: \"center\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add\n        .text(0, 0, \"Click to Start or Press SPACE\", {\n          fontSize: \"24px\",\n          color: \"#2ecc71\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1,\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add\n        .text(\n          0,\n          0,\n          \"v0.0.4 - Built with Phaser.js for Reddit's Community Games Challenge\",\n          {\n            fontSize: \"14px\",\n            color: \"#95a5a6\",\n            fontFamily: \"Nabla, system-ui\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from \"phaser\";\n\nexport class Preloader extends Scene {\n  constructor() {\n    super(\"Preloader\");\n  }\n\n  init() {\n    // REMOVED: Background image and progress bars that were persisting behind the game\n    // The game now loads cleanly without old UI elements\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath(\"assets\");\n\n    this.load.image(\"logo\", \"logo.png\");\n    this.load.image(\"player\", \"player.png\");\n    \n    // Preload the Nabla font to ensure it's available\n    this.load.setPath(\"assets/fonts\");\n    this.load.font(\"nabla\", \"nabla.ttf\");\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start(\"MainMenu\");\n  }\n}\n","import { Boot } from \"./scenes/Boot\";\nimport { GameOver } from \"./scenes/GameOver\";\nimport { MuseRunnerGame } from \"./scenes/MuseRunnerGame\";\nimport { MainMenu } from \"./scenes/MainMenu\";\nimport * as Phaser from \"phaser\";\nimport { AUTO, Game } from \"phaser\";\nimport { Preloader } from \"./scenes/Preloader\";\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: \"game-container\",\n  backgroundColor: \"#2c3e50\",\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { x: 0, y: 0 }, // NO GRAVITY - character rides platforms directly\n      debug: false,\n    },\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from \"./game/main\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  StartGame(\"game-container\");\n});\n"],"names":["Boot","Scene","constructor","super","preload","create","this","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","image","setOrigin","setAlpha","gameOverText","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","GAME_CONSTANTS","CHARACTER","SPEED","WIDTH","HEIGHT","COLOR","VISUAL_FEEDBACK_COLOR","VISUAL_FEEDBACK_DURATION","PLATFORMS","EXTENSION_DISTANCE","AHEAD_OFFSET","CLEANUP_DISTANCE","MIN_LENGTH","GROWTH_RATE","AUDIO","NOTE_DURATION","ATTACK_TIME","VOLUME","GAME","OVER_FALL_DISTANCE","SCORE_PER_PLATFORM","GROUND_OFFSET","CHARACTER_HEIGHT_LERP_SPEED","FALL_VELOCITY","CAMERA_DEADZONE_X","CAMERA_DEADZONE_Y","CAMERA_FOLLOW_LERP_X","CAMERA_FOLLOW_LERP_Y","CHORD_DETECTION","ACCUMULATION_TIME","TRIAD_POINTS","SEVENTH_POINTS","POWER_CHORD_POINTS","LEVEL_HEIGHTS","S","D","F","G","H","J","K","R","U","I","LEVEL_COLORS","VALID_KEYS","ERROR_HANDLING","MANAGER_INIT_FAILED","INPUT_HANDLING_ERROR","PLATFORM_EXTENSION_ERROR","CHARACTER_HEIGHT_ERROR","PLATFORM_CLEANUP_ERROR","KEY_CHANGE_ERROR","PLATFORM_START_ERROR","PLATFORM_END_ERROR","NOTE_FREQUENCIES","AudioManager","initialize","audioContext","window","AudioContext","webkitAudioContext","audioAvailable","isInitialized","error","console","warn","playNote","key","frequency","playMusicalTone","isAudioAvailable","updateLFORate","delta","lfoRate","max","log","toFixed","updateChorusDepth","chorusDepth","updateFilterFrequency","filterFrequency","updateReverbAmount","reverbAmount","getLFORate","getChorusDepth","getFilterFrequency","getReverbAmount","getDistortionAmount","distortionAmount","mainOsc","createOscillator","lfoOsc","lfoGain","createGain","setValueAtTime","currentTime","type","gain","connect","chorusOsc1","chorusOsc2","chorusGain1","chorusGain2","detuneAmount","filter","createBiquadFilter","Q","distortion","createWaveShaper","distortionCurve","createDistortionCurve","curve","oversample","reverbDelay","createDelay","reverbGain","reverbFeedback","delayTime","mainGain","dryGain","wetGain","outputGain","destination","now","noteDuration","linearRampToValueAtTime","exponentialRampToValueAtTime","stopTime","stop","amount","samples","Float32Array","deg","PI","i","x","abs","InputManager","Set","Map","up","down","left","right","keyboard","forEach","keyObjects","set","addKey","arrowKeys","Phaser.Input","Keyboard","KeyCodes","UP","DOWN","LEFT","RIGHT","ONE","TWO","THREE","FOUR","update","_currentTime","previouslyPressedKeys","currentlyPressedKeys","clear","keyObject","get","isDown","keyStateChanged","hasKeyStateChanged","getInputState","pressedKeys","getArrowKeyState","_a","_b","_c","_d","size","has","isValidGameKey","includes","PlatformManager","platformsGroup","group","startNewPlatform","startX","activePlatforms","platformY","platformColor","platform","rectangle","physics","existing","platformData","startTime","time","isGrowing","endPlatform","delete","extendActivePlatforms","characterX","_key","distanceMoved","newWidth","newCenterX","setSize","y","getHighestActiveKey","highestKey","highestY","Number","POSITIVE_INFINITY","_platformData","levelHeight","hasActivePlatforms","cleanupOldPlatforms","platformsToRemove","children","entries","rect","push","remove","destroy","getActivePlatforms","getPlatformsGroup","getLevelHeight","getLevelColor","NOTE_MAPPING","CHORD_DEFINITIONS","name","points","CHORD_DEFINITIONS_EXTENDED","keysToNotes","keys","map","ChordDetector","activeKeys","keyArray","Array","from","sort","notes","noteString","join","chordDef","Object","length","mainChord","extendedChord","getChordFromNotes","currentChord","chordType","basePoints","accumulatedPoints","isComplete","elapsed","progress","newAccumulatedPoints","floor","pointsThisFrame","chordName","getCurrentChord","MuseRunnerGame","audioManager","inputManager","platformManager","chordDetector","character","setDepth","characterBody","body","setCollideWorldBounds","setDragX","setFrictionX","setGravityY","scoreText","setScrollFactor","synthDisplay","restart","isGameRunning","startFollow","setDeadzone","score","setVelocityX","inputState","updateSynthesisDisplay","handleKeyChanges","chordResult","setText","showChordName","updateCharacterHeight","filterFreq","gameOver","delayedCall","targetY","currentY","heightDiff","newY","Phaser.Math","Linear","setVelocityY","groundY","list","child","chordText","tweens","targets","alpha","duration","ease","onComplete","stopFollow","scrollX","scrollY","restartText","yoyo","repeat","parent","postMessage","data","finalScore","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","load","setPath","font","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}