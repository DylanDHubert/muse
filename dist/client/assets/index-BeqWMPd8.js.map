{"version":3,"file":"index-BeqWMPd8.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/config/GameConstants.ts","../../../src/client/game/audio/AudioManager.ts","../../../src/client/game/input/InputManager.ts","../../../src/client/game/platform/PlatformManager.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from \"phaser\";\n\nexport class Boot extends Scene {\n  constructor() {\n    super(\"Boot\");\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    this.load.image(\"background\", \"assets/bg.png\");\n  }\n\n  create() {\n    this.scene.start(\"Preloader\");\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameOverText: Phaser.GameObjects.Text;\n\n  constructor() {\n    super(\"GameOver\");\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add\n      .image(0, 0, \"background\")\n      .setOrigin(0)\n      .setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameOverText = this.add\n      .text(0, 0, \"Game Over\", {\n        fontFamily: \"Arial Black\",\n        fontSize: \"64px\",\n        color: \"#ffffff\",\n        stroke: \"#000000\",\n        strokeThickness: 8,\n        align: \"center\",\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on(\"resize\", (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameOverText) {\n      this.gameOverText.setPosition(width / 2, height / 2);\n      this.gameOverText.setScale(scaleFactor);\n    }\n  }\n}\n","// Type aliases for better readability\nexport type GameKey = \"S\" | \"D\" | \"F\" | \"G\" | \"H\" | \"J\" | \"K\";\n\n// Centralized game configuration constants\nexport const GAME_CONSTANTS = {\n  // Character configuration\n  CHARACTER: {\n    SPEED: 100,\n    WIDTH: 30,\n    HEIGHT: 40,\n    COLOR: 0x3498db,\n    VISUAL_FEEDBACK_COLOR: 0xf39c12,\n    VISUAL_FEEDBACK_DURATION: 200,\n  },\n\n  // Platform configuration\n  PLATFORMS: {\n    WIDTH: 120,\n    HEIGHT: 20,\n    EXTENSION_DISTANCE: 150,\n    AHEAD_OFFSET: 20,\n    CENTER_OFFSET: 80,\n    CLEANUP_DISTANCE: 400,\n  },\n\n  // Audio configuration\n  AUDIO: {\n    NOTE_DURATION: 0.5,\n    ATTACK_TIME: 0.01,\n    VOLUME: 0.3,\n  },\n\n  // Game mechanics\n  GAME: {\n    OVER_FALL_DISTANCE: 300,\n    SCORE_PER_PLATFORM: 10,\n    GROUND_OFFSET: 60,\n    CHARACTER_HEIGHT_LERP_SPEED: 0.08,\n    FALL_VELOCITY: 300,\n    DEBUG_LOG_INTERVAL: 500, // Distance interval for debug logging\n    CAMERA_DEADZONE_X: 200,\n    CAMERA_DEADZONE_Y: 100,\n    CAMERA_FOLLOW_LERP_X: 0.1,\n    CAMERA_FOLLOW_LERP_Y: 0.1,\n  },\n\n  // Level heights for each key (relative to camera height)\n  LEVEL_HEIGHTS: {\n    S: -80, // Ground level offset\n    D: -120, // Level 2 offset\n    F: -160, // Level 3 offset\n    G: -200, // Level 4 offset\n    H: -240, // Level 5 offset\n    J: -280, // Level 6 offset\n    K: -320, // Highest level offset\n  } as Record<GameKey, number>,\n\n  // Level colors for each key\n  LEVEL_COLORS: {\n    S: 0xe74c3c, // Red (lowest)\n    D: 0xf39c12, // Orange\n    F: 0xf1c40f, // Yellow\n    G: 0x2ecc71, // Green\n    H: 0x3498db, // Blue\n    J: 0x9b59b6, // Purple\n    K: 0xe91e63, // Pink (highest)\n  } as Record<GameKey, number>,\n\n  // Valid game keys\n  VALID_KEYS: [\"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\"] as readonly GameKey[],\n\n  // Error handling\n  ERROR_HANDLING: {\n    MANAGER_INIT_FAILED: \"Failed to initialize managers\",\n    INPUT_HANDLING_ERROR: \"Input handling error\",\n    PLATFORM_EXTENSION_ERROR: \"Platform extension error\",\n    CHARACTER_HEIGHT_ERROR: \"Character height update error\",\n    PLATFORM_CLEANUP_ERROR: \"Platform cleanup error\",\n    KEY_CHANGE_ERROR: \"Key change handling error\",\n    PLATFORM_START_ERROR: \"Failed to start platform\",\n    PLATFORM_END_ERROR: \"Failed to end platform\",\n  },\n} as const;\n","import { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\n// Note frequencies for each game key (C major scale)\nconst NOTE_FREQUENCIES: Record<GameKey, number> = {\n  S: 261.63, // C4\n  D: 293.66, // D4\n  F: 329.63, // E4\n  G: 349.23, // F4\n  H: 392.0, // G4\n  J: 440.0, // A4\n  K: 493.88, // B4\n};\n\nexport interface IAudioManager {\n  initialize(): void;\n  playNote(key: GameKey): void;\n  isAudioAvailable(): boolean;\n}\n\nexport class AudioManager implements IAudioManager {\n  private audioContext: AudioContext | null = null;\n  private isInitialized: boolean = false;\n  private audioAvailable: boolean = false;\n\n  initialize(): void {\n    try {\n      // Initialize Web Audio API context\n      this.audioContext = new (window.AudioContext ||\n        (window as unknown as { webkitAudioContext: typeof AudioContext })\n          .webkitAudioContext)();\n      this.audioAvailable = true;\n      this.isInitialized = true;\n      // AudioManager initialized successfully\n    } catch (error) {\n      console.warn(\"Web Audio API not available:\", error);\n      this.audioAvailable = false;\n      this.isInitialized = true;\n    }\n  }\n\n  playNote(key: GameKey): void {\n    if (!this.isInitialized) {\n      console.warn(\"AudioManager not initialized\");\n      return;\n    }\n\n    if (!this.audioAvailable || !this.audioContext) {\n      // Graceful degradation - audio not available\n      return;\n    }\n\n    const frequency = NOTE_FREQUENCIES[key];\n    if (!frequency) {\n      console.warn(`Unknown key: ${key}`);\n      return;\n    }\n\n    try {\n      this.playMusicalTone(frequency);\n    } catch (error) {\n      console.warn(\"Failed to play note:\", error);\n    }\n  }\n\n  isAudioAvailable(): boolean {\n    return this.audioAvailable;\n  }\n\n  private playMusicalTone(frequency: number): void {\n    if (!this.audioContext) return;\n\n    // Create oscillator for the musical note\n    const oscillator = this.audioContext.createOscillator();\n    const gainNode = this.audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.audioContext.destination);\n\n    // Set frequency and type\n    oscillator.frequency.setValueAtTime(\n      frequency,\n      this.audioContext.currentTime,\n    );\n    oscillator.type = \"sine\"; // Pure tone\n\n    // Set volume envelope (attack and decay)\n    gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n    gainNode.gain.linearRampToValueAtTime(\n      GAME_CONSTANTS.AUDIO.VOLUME,\n      this.audioContext.currentTime + GAME_CONSTANTS.AUDIO.ATTACK_TIME,\n    );\n    gainNode.gain.exponentialRampToValueAtTime(\n      0.01,\n      this.audioContext.currentTime + GAME_CONSTANTS.AUDIO.NOTE_DURATION,\n    );\n\n    // Play the note\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(\n      this.audioContext.currentTime + GAME_CONSTANTS.AUDIO.NOTE_DURATION,\n    );\n  }\n}\n","import { Scene } from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport interface IInputManager {\n  initialize(): void;\n  update(currentTime: number): { keyStateChanged: boolean };\n  getInputState(): { pressedKeys: Set<string> };\n}\n\nexport class InputManager implements IInputManager {\n  private scene: Scene;\n  private currentlyPressedKeys: Set<string> = new Set();\n  private previouslyPressedKeys: Set<string> = new Set();\n  private isInitialized: boolean = false;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  initialize(): void {\n    if (!this.scene.input.keyboard) {\n      console.warn(\"Keyboard input not available\");\n      return;\n    }\n\n    this.isInitialized = true;\n    // InputManager initialized successfully\n  }\n\n  update(_currentTime: number): { keyStateChanged: boolean } {\n    if (!this.isInitialized || !this.scene.input.keyboard) {\n      return { keyStateChanged: false };\n    }\n\n    // Store previous state\n    this.previouslyPressedKeys = new Set(this.currentlyPressedKeys);\n\n    // Clear current state\n    this.currentlyPressedKeys.clear();\n\n    // Check each valid game key\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      const keyObject = this.scene.input.keyboard!.addKey(key);\n      if (keyObject.isDown) {\n        this.currentlyPressedKeys.add(key);\n      }\n    });\n\n    // Determine if key state changed\n    const keyStateChanged = this.hasKeyStateChanged();\n\n    return { keyStateChanged };\n  }\n\n  getInputState(): { pressedKeys: Set<string> } {\n    return {\n      pressedKeys: new Set(this.currentlyPressedKeys),\n    };\n  }\n\n  private hasKeyStateChanged(): boolean {\n    // Check if the sets are different\n    if (this.currentlyPressedKeys.size !== this.previouslyPressedKeys.size) {\n      return true;\n    }\n\n    // Check if any key in current set is not in previous set\n    for (const key of this.currentlyPressedKeys) {\n      if (!this.previouslyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    // Check if any key in previous set is not in current set\n    for (const key of this.previouslyPressedKeys) {\n      if (!this.currentlyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Helper method to check if a key is a valid game key\n  isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\ninterface PlatformData {\n  rectangle: Phaser.GameObjects.Rectangle;\n  startX: number;\n  key: GameKey;\n}\n\nexport interface IPlatformManager {\n  initialize(): void;\n  startNewPlatform(key: GameKey, startX: number): void;\n  endPlatform(key: GameKey): void;\n  extendActivePlatforms(characterX: number): void;\n  getHighestActiveKey(): GameKey | null;\n  hasActivePlatforms(): boolean;\n  cleanupOldPlatforms(characterX: number): void;\n  getActivePlatforms(): Map<string, PlatformData>;\n  getPlatformsGroup(): Phaser.GameObjects.Group;\n}\n\nexport class PlatformManager implements IPlatformManager {\n  private scene: Scene;\n  private activePlatforms: Map<string, PlatformData> = new Map();\n  private platformsGroup: Phaser.GameObjects.Group;\n  private isInitialized: boolean = false;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n    this.platformsGroup = this.scene.add.group();\n  }\n\n  initialize(): void {\n    this.isInitialized = true;\n    // PlatformManager initialized successfully\n  }\n\n  startNewPlatform(key: GameKey, startX: number): void {\n    if (!this.isInitialized) {\n      console.warn(\"PlatformManager not initialized\");\n      return;\n    }\n\n    // Don't create duplicate platforms for the same key\n    if (this.activePlatforms.has(key)) {\n      return;\n    }\n\n    const { height } = this.scene.cameras.main;\n    const platformY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n    const platformColor = GAME_CONSTANTS.LEVEL_COLORS[key];\n\n    // Create platform rectangle\n    const platform = this.scene.add.rectangle(\n      startX +\n        GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET +\n        GAME_CONSTANTS.PLATFORMS.CENTER_OFFSET,\n      platformY,\n      GAME_CONSTANTS.PLATFORMS.WIDTH,\n      GAME_CONSTANTS.PLATFORMS.HEIGHT,\n      platformColor,\n    );\n\n    // Add to physics (optional, for future collision detection)\n    this.scene.physics.add.existing(platform, true); // true = static body\n\n    // Store platform data\n    const platformData: PlatformData = {\n      rectangle: platform,\n      startX: startX,\n      key: key,\n    };\n\n    this.activePlatforms.set(key, platformData);\n    this.platformsGroup.add(platform);\n\n    // Platform created for key at specified height\n  }\n\n  endPlatform(key: GameKey): void {\n    const platformData = this.activePlatforms.get(key);\n    if (!platformData) {\n      return;\n    }\n\n    // Remove from active platforms but keep the visual platform\n    this.activePlatforms.delete(key);\n    // Platform ended for key\n  }\n\n  extendActivePlatforms(characterX: number): void {\n    this.activePlatforms.forEach((platformData, _key) => {\n      const platform = platformData.rectangle;\n      const targetRightEdge =\n        characterX + GAME_CONSTANTS.PLATFORMS.EXTENSION_DISTANCE;\n      const currentRightEdge = platform.x + platform.width / 2;\n\n      if (targetRightEdge > currentRightEdge) {\n        // Extend platform by increasing width and adjusting position\n        const newWidth = targetRightEdge - (platform.x - platform.width / 2);\n        const newCenterX = platform.x - platform.width / 2 + newWidth / 2;\n\n        platform.setSize(newWidth, platform.height);\n        platform.setPosition(newCenterX, platform.y);\n      }\n    });\n  }\n\n  getHighestActiveKey(): GameKey | null {\n    if (this.activePlatforms.size === 0) {\n      return null;\n    }\n\n    // Find the key with the highest level (lowest Y value)\n    let highestKey: GameKey | null = null;\n    let highestY = Number.POSITIVE_INFINITY;\n\n    this.activePlatforms.forEach((_platformData, key) => {\n      const levelHeight = GAME_CONSTANTS.LEVEL_HEIGHTS[key as GameKey];\n      if (levelHeight < highestY) {\n        highestY = levelHeight;\n        highestKey = key as GameKey;\n      }\n    });\n\n    return highestKey;\n  }\n\n  hasActivePlatforms(): boolean {\n    return this.activePlatforms.size > 0;\n  }\n\n  cleanupOldPlatforms(characterX: number): void {\n    const platformsToRemove: Phaser.GameObjects.Rectangle[] = [];\n\n    // Check all platforms in the group, not just active ones\n    this.platformsGroup.children.entries.forEach((platform) => {\n      const rect = platform as Phaser.GameObjects.Rectangle;\n      const platformRightEdge = rect.x + rect.width / 2;\n\n      // Remove platforms that are far behind the character\n      if (\n        platformRightEdge <\n        characterX - GAME_CONSTANTS.PLATFORMS.CLEANUP_DISTANCE\n      ) {\n        platformsToRemove.push(rect);\n      }\n    });\n\n    // Remove old platforms\n    platformsToRemove.forEach((platform) => {\n      this.platformsGroup.remove(platform);\n      platform.destroy();\n    });\n\n    // Old platforms cleaned up\n  }\n\n  getActivePlatforms(): Map<string, PlatformData> {\n    return new Map(this.activePlatforms);\n  }\n\n  getPlatformsGroup(): Phaser.GameObjects.Group {\n    return this.platformsGroup;\n  }\n\n  // Helper method to get level height for a key\n  getLevelHeight(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n  }\n\n  // Helper method to get level color for a key\n  getLevelColor(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_COLORS[key];\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { AudioManager } from \"../audio/AudioManager\";\nimport { InputManager } from \"../input/InputManager\";\nimport { PlatformManager } from \"../platform/PlatformManager\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport class MuseRunnerGame extends Scene {\n  private character!: Phaser.GameObjects.Rectangle;\n  private scoreText!: Phaser.GameObjects.Text;\n\n  // Game state\n  private isGameRunning: boolean = false;\n  private score: number = 0;\n\n  // Managers\n  private audioManager!: AudioManager;\n  private inputManager!: InputManager;\n  private platformManager!: PlatformManager;\n\n  constructor() {\n    super(\"MuseRunnerGame\");\n  }\n\n  async create(): Promise<void> {\n    const { width, height } = this.cameras.main;\n\n    // Initialize managers with error handling\n    try {\n      this.audioManager = new AudioManager();\n      this.inputManager = new InputManager(this);\n      this.platformManager = new PlatformManager(this);\n\n      // Initialize managers with error handling\n      this.audioManager.initialize();\n      this.inputManager.initialize();\n      this.platformManager.initialize();\n\n      // All managers initialized successfully\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.MANAGER_INIT_FAILED, error);\n      // Game can still continue with degraded functionality\n    }\n\n    // Create character (blue rectangle) - positioned on the neutral platform\n    this.character = this.add.rectangle(\n      100,\n      height - 80,\n      GAME_CONSTANTS.CHARACTER.WIDTH,\n      GAME_CONSTANTS.CHARACTER.HEIGHT,\n      GAME_CONSTANTS.CHARACTER.COLOR,\n    );\n    this.physics.add.existing(this.character);\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Set up physics for endless running - no collision needed\n    characterBody.setCollideWorldBounds(false);\n    characterBody.setDragX(0);\n    characterBody.setFrictionX(0);\n    characterBody.setGravityY(0); // No gravity - character rides platforms directly\n\n    // Create UI\n    this.scoreText = this.add.text(16, 16, \"Score: 0\", {\n      fontSize: \"24px\",\n      color: \"#ffffff\",\n    });\n\n    // Instructions\n    const instructionText = this.add\n      .text(\n        width / 2,\n        30,\n        \"🎵 Press S-D-F-G-H-J-K to create platforms at different heights! 🎵\",\n        {\n          fontSize: \"16px\",\n          color: \"#ecf0f1\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5);\n\n    // Key guide\n    this.add\n      .text(width / 2, 60, \"S=Low → D → F → G → H → J → K=High\", {\n        fontSize: \"14px\",\n        color: \"#95a5a6\",\n        fontFamily: \"Arial, sans-serif\",\n      })\n      .setOrigin(0.5);\n\n    // Make instructions pulse to draw attention\n    this.tweens.add({\n      targets: instructionText,\n      alpha: 0.6,\n      duration: 1500,\n      yoyo: true,\n      repeat: -1,\n    });\n\n    // Controls info\n    this.add\n      .text(width - 16, 16, \"v0.0.4 | ESC: Menu | R: Restart\", {\n        fontSize: \"14px\",\n        color: \"#95a5a6\",\n      })\n      .setOrigin(1, 0);\n\n    // ESC key to return to menu\n    this.input.keyboard!.on(\"keydown-ESC\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n\n    // R key to restart\n    this.input.keyboard!.on(\"keydown-R\", () => {\n      this.scene.restart();\n    });\n\n    // Start the game\n    this.isGameRunning = true;\n\n    // Camera follows character\n    this.cameras.main.startFollow(\n      this.character,\n      true,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_X,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_Y,\n    );\n    this.cameras.main.setDeadzone(\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_X,\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_Y,\n    );\n\n    // Reset game state\n    this.score = 0;\n\n    // Don't start with any musical platform - wait for first key press\n  }\n\n  override update(): void {\n    if (!this.isGameRunning) return;\n\n    // Auto-run character forward - ALWAYS moving, never stops\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Force constant forward movement - override any physics that might stop it\n    characterBody.setVelocityX(GAME_CONSTANTS.CHARACTER.SPEED);\n    characterBody.setDragX(0); // No drag to slow down\n    characterBody.setFrictionX(0); // No friction from platforms\n\n    // Handle input for multiple simultaneous keys with error handling\n    try {\n      const { keyStateChanged } = this.inputManager.update(this.time.now);\n      const inputState = this.inputManager.getInputState();\n\n      if (keyStateChanged) {\n        this.handleKeyChanges(inputState.pressedKeys);\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.INPUT_HANDLING_ERROR, error);\n    }\n\n    // Extend all active platforms as character moves with error handling\n    try {\n      if (this.platformManager.hasActivePlatforms()) {\n        this.platformManager.extendActivePlatforms(this.character.x);\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_EXTENSION_ERROR, error);\n    }\n\n    // Make character ride the highest active platform with error handling\n    try {\n      this.updateCharacterHeight();\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.CHARACTER_HEIGHT_ERROR, error);\n    }\n\n    // Character position tracking removed for performance\n\n    // Game over condition - only if character falls WAY off screen (make it more lenient)\n    if (\n      this.character.y >\n      this.cameras.main.height + GAME_CONSTANTS.GAME.OVER_FALL_DISTANCE\n    ) {\n      // Game over triggered - character fell too far\n      this.gameOver();\n    }\n\n    // Clean up old platforms through platform manager with error handling\n    try {\n      this.platformManager.cleanupOldPlatforms(this.character.x);\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_CLEANUP_ERROR, error);\n    }\n  }\n\n  private handleKeyChanges(currentlyPressedKeys: Set<string>): void {\n    try {\n      const activePlatforms = this.platformManager.getActivePlatforms();\n\n      // Start new platforms for newly pressed keys\n      currentlyPressedKeys.forEach((key) => {\n        if (this.isValidGameKey(key) && !activePlatforms.has(key)) {\n          try {\n            this.platformManager.startNewPlatform(key, this.character.x);\n            this.audioManager.playNote(key);\n            // Platform started for key\n\n            // Visual feedback - change character color briefly\n            this.character.setFillStyle(\n              GAME_CONSTANTS.CHARACTER.VISUAL_FEEDBACK_COLOR,\n            );\n            this.time.delayedCall(\n              GAME_CONSTANTS.CHARACTER.VISUAL_FEEDBACK_DURATION,\n              () => {\n                this.character.setFillStyle(GAME_CONSTANTS.CHARACTER.COLOR); // Back to blue\n              },\n            );\n\n            this.score += GAME_CONSTANTS.GAME.SCORE_PER_PLATFORM;\n            this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_START_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n\n      // End platforms for released keys\n      activePlatforms.forEach((_platformData, key) => {\n        if (!currentlyPressedKeys.has(key)) {\n          try {\n            this.platformManager.endPlatform(key as GameKey);\n            // Platform ended for key\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_END_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.KEY_CHANGE_ERROR, error);\n    }\n  }\n\n  private isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n\n  private updateCharacterHeight(): void {\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Get the highest active key to determine target height\n    const highestKey = this.platformManager.getHighestActiveKey();\n\n    if (highestKey) {\n      // Calculate target Y based on the highest active key\n      const { height } = this.cameras.main;\n      const targetY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[highestKey] - 10;\n      const currentY = this.character.y;\n      const heightDiff = targetY - currentY;\n\n      // Very smooth transition with slower lerp\n      if (Math.abs(heightDiff) > 0.5) {\n        // Use slower lerp for ultra-smooth movement\n        const newY = Phaser.Math.Linear(\n          currentY,\n          targetY,\n          GAME_CONSTANTS.GAME.CHARACTER_HEIGHT_LERP_SPEED,\n        );\n        this.character.y = newY;\n        characterBody.setVelocityY(0); // Override physics velocity\n      } else {\n        // Close enough, lock to platform\n        this.character.y = targetY;\n        characterBody.setVelocityY(0);\n      }\n    } else {\n      // No active platforms - fall down smoothly to ground\n      const { height } = this.cameras.main;\n      const groundY = height - GAME_CONSTANTS.GAME.GROUND_OFFSET;\n\n      if (this.character.y < groundY) {\n        characterBody.setVelocityY(GAME_CONSTANTS.GAME.FALL_VELOCITY); // Fall down\n      } else {\n        this.character.y = groundY; // Hit ground\n        characterBody.setVelocityY(0);\n      }\n    }\n  }\n\n  private gameOver(): void {\n    this.isGameRunning = false;\n\n    const { width, height } = this.cameras.main;\n\n    // Stop camera follow\n    this.cameras.main.stopFollow();\n\n    // Game over screen\n    const gameOverBg = this.add.rectangle(\n      this.cameras.main.scrollX + width / 2,\n      this.cameras.main.scrollY + height / 2,\n      width,\n      height,\n      0x000000,\n      0.8,\n    );\n    gameOverBg.setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 80,\n        \"Game Over!\",\n        {\n          fontSize: \"48px\",\n          color: \"#e74c3c\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 20,\n        `Final Score: ${Math.floor(this.score)}`,\n        {\n          fontSize: \"24px\",\n          color: \"#ffffff\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    const restartText = this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 + 30,\n        \"Press R to restart or ESC for menu\",\n        {\n          fontSize: \"18px\",\n          color: \"#bdc3c7\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    // Pulsing restart text\n    this.tweens.add({\n      targets: restartText,\n      alpha: 0.5,\n      duration: 1000,\n      yoyo: true,\n      repeat: -1,\n    });\n\n    // Send score to parent (Reddit)\n    if (window.parent) {\n      window.parent.postMessage(\n        {\n          type: \"GAME_OVER\",\n          data: { finalScore: Math.floor(this.score) },\n        },\n        \"*\",\n      );\n    }\n  }\n}\n","import { Scene, GameObjects } from \"phaser\";\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super(\"MainMenu\");\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on(\"resize\", () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n\n    this.input.keyboard!.on(\"keydown-SPACE\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add\n        .text(0, 0, \"🎵 Muse Runner 🏃‍♂️\", {\n          fontSize: \"48px\",\n          color: \"#ffffff\",\n          fontFamily: \"Arial, sans-serif\",\n        })\n        .setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add\n        .text(0, 0, \"Rhythm Platformer\", {\n          fontSize: \"24px\",\n          color: \"#3498db\",\n          fontFamily: \"Arial, sans-serif\",\n        })\n        .setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add\n        .text(\n          0,\n          0,\n          \"Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen\",\n          {\n            fontSize: \"18px\",\n            color: \"#ecf0f1\",\n            fontFamily: \"Arial, sans-serif\",\n            align: \"center\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add\n        .text(0, 0, \"Click to Start or Press SPACE\", {\n          fontSize: \"24px\",\n          color: \"#2ecc71\",\n          fontFamily: \"Arial, sans-serif\",\n        })\n        .setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1,\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add\n        .text(\n          0,\n          0,\n          \"v0.0.4 - Built with Phaser.js for Reddit's Community Games Challenge\",\n          {\n            fontSize: \"14px\",\n            color: \"#95a5a6\",\n            fontFamily: \"Arial, sans-serif\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from \"phaser\";\n\nexport class Preloader extends Scene {\n  constructor() {\n    super(\"Preloader\");\n  }\n\n  init() {\n    //  We loaded this image in our Boot Scene, so we can display it here\n    this.add.image(512, 384, \"background\");\n\n    //  A simple progress bar. This is the outline of the bar.\n    this.add.rectangle(512, 384, 468, 32).setStrokeStyle(1, 0xffffff);\n\n    //  This is the progress bar itself. It will increase in size from the left based on the % of progress.\n    const bar = this.add.rectangle(512 - 230, 384, 4, 28, 0xffffff);\n\n    //  Use the 'progress' event emitted by the LoaderPlugin to update the loading bar\n    this.load.on(\"progress\", (progress: number) => {\n      //  Update the progress bar (our bar is 464px wide, so 100% = 464px)\n      bar.width = 4 + 460 * progress;\n    });\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath(\"assets\");\n\n    this.load.image(\"logo\", \"logo.png\");\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start(\"MainMenu\");\n  }\n}\n","import { Boot } from \"./scenes/Boot\";\nimport { GameOver } from \"./scenes/GameOver\";\nimport { MuseRunnerGame } from \"./scenes/MuseRunnerGame\";\nimport { MainMenu } from \"./scenes/MainMenu\";\nimport * as Phaser from \"phaser\";\nimport { AUTO, Game } from \"phaser\";\nimport { Preloader } from \"./scenes/Preloader\";\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: \"game-container\",\n  backgroundColor: \"#2c3e50\",\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { x: 0, y: 600 },\n      debug: false,\n    },\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from \"./game/main\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  StartGame(\"game-container\");\n});\n"],"names":["Boot","Scene","constructor","super","preload","this","load","image","create","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","setOrigin","setAlpha","gameOverText","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","GAME_CONSTANTS","CHARACTER","SPEED","WIDTH","HEIGHT","COLOR","VISUAL_FEEDBACK_COLOR","VISUAL_FEEDBACK_DURATION","PLATFORMS","EXTENSION_DISTANCE","AHEAD_OFFSET","CENTER_OFFSET","CLEANUP_DISTANCE","AUDIO","NOTE_DURATION","ATTACK_TIME","VOLUME","GAME","OVER_FALL_DISTANCE","SCORE_PER_PLATFORM","GROUND_OFFSET","CHARACTER_HEIGHT_LERP_SPEED","FALL_VELOCITY","DEBUG_LOG_INTERVAL","CAMERA_DEADZONE_X","CAMERA_DEADZONE_Y","CAMERA_FOLLOW_LERP_X","CAMERA_FOLLOW_LERP_Y","LEVEL_HEIGHTS","S","D","F","G","H","J","K","LEVEL_COLORS","VALID_KEYS","ERROR_HANDLING","MANAGER_INIT_FAILED","INPUT_HANDLING_ERROR","PLATFORM_EXTENSION_ERROR","CHARACTER_HEIGHT_ERROR","PLATFORM_CLEANUP_ERROR","KEY_CHANGE_ERROR","PLATFORM_START_ERROR","PLATFORM_END_ERROR","NOTE_FREQUENCIES","AudioManager","initialize","audioContext","window","AudioContext","webkitAudioContext","audioAvailable","isInitialized","error","console","warn","playNote","key","frequency","playMusicalTone","isAudioAvailable","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","stop","InputManager","Set","keyboard","update","_currentTime","previouslyPressedKeys","currentlyPressedKeys","clear","forEach","addKey","isDown","keyStateChanged","hasKeyStateChanged","getInputState","pressedKeys","size","has","isValidGameKey","includes","PlatformManager","Map","platformsGroup","group","startNewPlatform","startX","activePlatforms","platformY","platformColor","platform","rectangle","physics","existing","platformData","set","endPlatform","get","delete","extendActivePlatforms","characterX","_key","targetRightEdge","x","newWidth","newCenterX","setSize","y","getHighestActiveKey","highestKey","highestY","Number","POSITIVE_INFINITY","_platformData","levelHeight","hasActivePlatforms","cleanupOldPlatforms","platformsToRemove","children","entries","rect","push","remove","destroy","getActivePlatforms","getPlatformsGroup","getLevelHeight","getLevelColor","MuseRunnerGame","audioManager","inputManager","platformManager","character","characterBody","body","setCollideWorldBounds","setDragX","setFrictionX","setGravityY","scoreText","instructionText","tweens","targets","alpha","duration","yoyo","repeat","restart","isGameRunning","startFollow","setDeadzone","score","setVelocityX","time","now","inputState","handleKeyChanges","updateCharacterHeight","gameOver","setFillStyle","delayedCall","setText","floor","targetY","currentY","heightDiff","abs","newY","Phaser.Math","Linear","setVelocityY","groundY","stopFollow","scrollX","scrollY","setScrollFactor","restartText","parent","postMessage","data","finalScore","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","setStrokeStyle","bar","progress","setPath","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}