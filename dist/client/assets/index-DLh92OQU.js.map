{"version":3,"file":"index-DLh92OQU.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/config/GameConstants.ts","../../../src/client/game/audio/AudioManager.ts","../../../src/client/game/input/InputManager.ts","../../../src/client/game/platform/PlatformManager.ts","../../../src/client/game/audio/ChordDetector.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from \"phaser\";\n\nexport class Boot extends Scene {\n  constructor() {\n    super(\"Boot\");\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    // REMOVED: Background image that was persisting behind the game\n    // this.load.image(\"background\", \"assets/bg.png\");\n  }\n\n  create() {\n    this.scene.start(\"Preloader\");\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameOverText: Phaser.GameObjects.Text;\n\n  constructor() {\n    super(\"GameOver\");\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add\n      .image(0, 0, \"background\")\n      .setOrigin(0)\n      .setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameOverText = this.add\n      .text(0, 0, \"Game Over\", {\n        fontFamily: \"Arial Black\",\n        fontSize: \"64px\",\n        color: \"#ffffff\",\n        stroke: \"#000000\",\n        strokeThickness: 8,\n        align: \"center\",\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on(\"resize\", (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameOverText) {\n      this.gameOverText.setPosition(width / 2, height / 2);\n      this.gameOverText.setScale(scaleFactor);\n    }\n  }\n}\n","// Type aliases for better readability\nexport type GameKey = \"S\" | \"D\" | \"F\" | \"G\" | \"H\" | \"J\" | \"K\";\n\n// Centralized game configuration constants\nexport const GAME_CONSTANTS = {\n  // Character configuration\n  CHARACTER: {\n    SPEED: 100,\n    WIDTH: 30,\n    HEIGHT: 40,\n    COLOR: 0x3498db,\n    VISUAL_FEEDBACK_COLOR: 0xf39c12,\n    VISUAL_FEEDBACK_DURATION: 200,\n  },\n\n  // Platform configuration\n  PLATFORMS: {\n    WIDTH: 120,\n    HEIGHT: 20,\n    EXTENSION_DISTANCE: 150,\n    AHEAD_OFFSET: 20,\n    CLEANUP_DISTANCE: 400,\n    MIN_LENGTH: 20, // Minimum platform length for quick taps\n    GROWTH_RATE: 100, // Pixels per second growth rate (matches character speed)\n  },\n\n  // Audio configuration\n  AUDIO: {\n    NOTE_DURATION: 0.5,\n    ATTACK_TIME: 0.01,\n    VOLUME: 0.3,\n  },\n\n  // Game mechanics\n  GAME: {\n    OVER_FALL_DISTANCE: 300,\n    SCORE_PER_PLATFORM: 10,\n    GROUND_OFFSET: 60,\n    CHARACTER_HEIGHT_LERP_SPEED: 0.08,\n    FALL_VELOCITY: 300,\n    CAMERA_DEADZONE_X: 200,\n    CAMERA_DEADZONE_Y: 100,\n    CAMERA_FOLLOW_LERP_X: 0.1,\n    CAMERA_FOLLOW_LERP_Y: 0.1,\n  },\n  CHORD_DETECTION: {\n    ACCUMULATION_TIME: 1000, // ms\n    TRIAD_POINTS: 50,\n    SEVENTH_POINTS: 100,\n    POWER_CHORD_POINTS: 25,\n  },\n\n  // Level heights for each key (relative to camera height)\n  LEVEL_HEIGHTS: {\n    S: -80, // Ground level offset\n    D: -120, // Level 2 offset\n    F: -160, // Level 3 offset\n    G: -200, // Level 4 offset\n    H: -240, // Level 5 offset\n    J: -280, // Level 6 offset\n    K: -320, // Highest level offset\n  } as Record<GameKey, number>,\n\n  // Level colors for each key\n  LEVEL_COLORS: {\n    S: 0xe74c3c, // Red (lowest)\n    D: 0xf39c12, // Orange\n    F: 0xf1c40f, // Yellow\n    G: 0x2ecc71, // Green\n    H: 0x3498db, // Blue\n    J: 0x9b59b6, // Purple\n    K: 0xe91e63, // Pink (highest)\n  } as Record<GameKey, number>,\n\n  // Valid game keys\n  VALID_KEYS: [\"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\"] as readonly GameKey[],\n\n  // Error handling\n  ERROR_HANDLING: {\n    MANAGER_INIT_FAILED: \"Failed to initialize managers\",\n    INPUT_HANDLING_ERROR: \"Input handling error\",\n    PLATFORM_EXTENSION_ERROR: \"Platform extension error\",\n    CHARACTER_HEIGHT_ERROR: \"Character height update error\",\n    PLATFORM_CLEANUP_ERROR: \"Platform cleanup error\",\n    KEY_CHANGE_ERROR: \"Key change handling error\",\n    PLATFORM_START_ERROR: \"Failed to start platform\",\n    PLATFORM_END_ERROR: \"Failed to end platform\",\n  },\n} as const;\n","import { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\n// Note frequencies for each game key (C major scale)\nconst NOTE_FREQUENCIES: Record<GameKey, number> = {\n  S: 261.63, // C4\n  D: 293.66, // D4\n  F: 329.63, // E4\n  G: 349.23, // F4\n  H: 392.0, // G4\n  J: 440.0, // A4\n  K: 493.88, // B4\n};\n\nexport interface IAudioManager {\n  initialize(): void;\n  playNote(key: GameKey): void;\n  isAudioAvailable(): boolean;\n}\n\nexport class AudioManager implements IAudioManager {\n  private audioContext: AudioContext | null = null;\n  private isInitialized: boolean = false;\n  private audioAvailable: boolean = false;\n\n  initialize(): void {\n    try {\n      // Initialize Web Audio API context\n      this.audioContext = new (window.AudioContext ||\n        (window as unknown as { webkitAudioContext: typeof AudioContext })\n          .webkitAudioContext)();\n      this.audioAvailable = true;\n      this.isInitialized = true;\n      // AudioManager initialized successfully\n    } catch (error) {\n      console.warn(\"Web Audio API not available:\", error);\n      this.audioAvailable = false;\n      this.isInitialized = true;\n    }\n  }\n\n  playNote(key: GameKey): void {\n    if (!this.isInitialized) {\n      console.warn(\"AudioManager not initialized\");\n      return;\n    }\n\n    if (!this.audioAvailable || !this.audioContext) {\n      // Graceful degradation - audio not available\n      return;\n    }\n\n    const frequency = NOTE_FREQUENCIES[key];\n    if (!frequency) {\n      console.warn(`Unknown key: ${key}`);\n      return;\n    }\n\n    try {\n      this.playMusicalTone(frequency);\n    } catch (error) {\n      console.warn(\"Failed to play note:\", error);\n    }\n  }\n\n  isAudioAvailable(): boolean {\n    return this.audioAvailable;\n  }\n\n  private playMusicalTone(frequency: number): void {\n    if (!this.audioContext) return;\n\n    // Create oscillator for the musical note\n    const oscillator = this.audioContext.createOscillator();\n    const gainNode = this.audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(this.audioContext.destination);\n\n    // Set frequency and type\n    oscillator.frequency.setValueAtTime(\n      frequency,\n      this.audioContext.currentTime,\n    );\n    oscillator.type = \"sine\"; // Pure tone\n\n    // Set volume envelope (attack and decay)\n    gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n    gainNode.gain.linearRampToValueAtTime(\n      GAME_CONSTANTS.AUDIO.VOLUME,\n      this.audioContext.currentTime + GAME_CONSTANTS.AUDIO.ATTACK_TIME,\n    );\n    gainNode.gain.exponentialRampToValueAtTime(\n      0.01,\n      this.audioContext.currentTime + GAME_CONSTANTS.AUDIO.NOTE_DURATION,\n    );\n\n    // Play the note\n    oscillator.start(this.audioContext.currentTime);\n    oscillator.stop(\n      this.audioContext.currentTime + GAME_CONSTANTS.AUDIO.NOTE_DURATION,\n    );\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport interface IInputManager {\n  initialize(): void;\n  update(currentTime: number): { keyStateChanged: boolean };\n  getInputState(): { pressedKeys: Set<string> };\n}\n\nexport class InputManager implements IInputManager {\n  private scene: Scene;\n  private currentlyPressedKeys: Set<string> = new Set();\n  private previouslyPressedKeys: Set<string> = new Set();\n  private isInitialized: boolean = false;\n  private keyObjects: Map<string, Phaser.Input.Keyboard.Key> = new Map();\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  initialize(): void {\n    if (!this.scene.input.keyboard) {\n      console.warn(\"Keyboard input not available\");\n      return;\n    }\n\n    // Create key objects once during initialization\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      this.keyObjects.set(key, this.scene.input.keyboard!.addKey(key));\n    });\n\n    this.isInitialized = true;\n    // InputManager initialized successfully\n  }\n\n  update(_currentTime: number): { keyStateChanged: boolean } {\n    if (!this.isInitialized || !this.scene.input.keyboard) {\n      return { keyStateChanged: false };\n    }\n\n    // Store previous state\n    this.previouslyPressedKeys = new Set(this.currentlyPressedKeys);\n\n    // Clear current state\n    this.currentlyPressedKeys.clear();\n\n    // Check each valid game key using pre-created key objects\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      const keyObject = this.keyObjects.get(key);\n      if (keyObject && keyObject.isDown) {\n        this.currentlyPressedKeys.add(key);\n      }\n    });\n\n    // Determine if key state changed\n    const keyStateChanged = this.hasKeyStateChanged();\n\n    return { keyStateChanged };\n  }\n\n  getInputState(): { pressedKeys: Set<string> } {\n    return {\n      pressedKeys: new Set(this.currentlyPressedKeys),\n    };\n  }\n\n  private hasKeyStateChanged(): boolean {\n    // Check if the sets are different\n    if (this.currentlyPressedKeys.size !== this.previouslyPressedKeys.size) {\n      return true;\n    }\n\n    // Check if any key in current set is not in previous set\n    for (const key of this.currentlyPressedKeys) {\n      if (!this.previouslyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    // Check if any key in previous set is not in current set\n    for (const key of this.previouslyPressedKeys) {\n      if (!this.currentlyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Helper method to check if a key is a valid game key\n  isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\ninterface PlatformData {\n  rectangle: Phaser.GameObjects.Rectangle;\n  startX: number;\n  key: GameKey;\n  startTime: number;\n  isGrowing: boolean;\n}\n\nexport interface IPlatformManager {\n  initialize(): void;\n  startNewPlatform(key: GameKey, startX: number): void;\n  endPlatform(key: GameKey): void;\n  extendActivePlatforms(characterX: number): void;\n  getHighestActiveKey(): GameKey | null;\n  hasActivePlatforms(): boolean;\n  cleanupOldPlatforms(characterX: number): void;\n  getActivePlatforms(): Map<string, PlatformData>;\n  getPlatformsGroup(): Phaser.GameObjects.Group;\n}\n\nexport class PlatformManager implements IPlatformManager {\n  private scene: Scene;\n  private activePlatforms: Map<string, PlatformData> = new Map();\n  private platformsGroup: Phaser.GameObjects.Group;\n  private isInitialized: boolean = false;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n    this.platformsGroup = this.scene.add.group();\n  }\n\n  initialize(): void {\n    this.isInitialized = true;\n    // PlatformManager initialized successfully\n  }\n\n  startNewPlatform(key: GameKey, startX: number): void {\n    if (!this.isInitialized) {\n      console.warn(\"PlatformManager not initialized\");\n      return;\n    }\n\n    // Don't create duplicate platforms for the same key\n    if (this.activePlatforms.has(key)) {\n      return;\n    }\n\n    const { height } = this.scene.cameras.main;\n    const platformY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n    const platformColor = GAME_CONSTANTS.LEVEL_COLORS[key];\n\n    // Create platform rectangle - start with minimum length\n    const platform = this.scene.add.rectangle(\n      startX + GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET,\n      platformY,\n      GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n      GAME_CONSTANTS.PLATFORMS.HEIGHT,\n      platformColor,\n    );\n\n    // Add to physics (optional, for future collision detection)\n    this.scene.physics.add.existing(platform, true); // true = static body\n\n    // Store platform data\n    const platformData: PlatformData = {\n      rectangle: platform,\n      startX: startX,\n      key: key,\n      startTime: this.scene.time.now,\n      isGrowing: true,\n    };\n\n    this.activePlatforms.set(key, platformData);\n    this.platformsGroup.add(platform);\n\n    // Platform created for key at specified height\n  }\n\n  endPlatform(key: GameKey): void {\n    const platformData = this.activePlatforms.get(key);\n    if (!platformData) {\n      return;\n    }\n\n    // Stop growing the platform\n    platformData.isGrowing = false;\n    \n    // Remove from active platforms but keep the visual platform\n    this.activePlatforms.delete(key);\n    // Platform ended for key\n  }\n\n  extendActivePlatforms(characterX: number): void {\n    this.activePlatforms.forEach((platformData, _key) => {\n      if (!platformData.isGrowing) return;\n      \n      const platform = platformData.rectangle;\n      \n      // Calculate how far the character has moved since platform creation\n      const distanceMoved = characterX - platformData.startX;\n      \n      // Platform should extend to keep up with character movement\n      const newWidth = Math.max(\n        GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n        GAME_CONSTANTS.PLATFORMS.MIN_LENGTH + distanceMoved\n      );\n      \n      // Update platform size and position\n      const leftEdge = platform.x - platform.width / 2;\n      const newCenterX = leftEdge + newWidth / 2;\n      \n      platform.setSize(newWidth, platform.height);\n      platform.setPosition(newCenterX, platform.y);\n    });\n  }\n\n  getHighestActiveKey(): GameKey | null {\n    if (this.activePlatforms.size === 0) {\n      return null;\n    }\n\n    // Find the key with the highest level (lowest Y value)\n    let highestKey: GameKey | null = null;\n    let highestY = Number.POSITIVE_INFINITY;\n\n    this.activePlatforms.forEach((_platformData, key) => {\n      const levelHeight = GAME_CONSTANTS.LEVEL_HEIGHTS[key as GameKey];\n      if (levelHeight < highestY) {\n        highestY = levelHeight;\n        highestKey = key as GameKey;\n      }\n    });\n\n    return highestKey;\n  }\n\n  hasActivePlatforms(): boolean {\n    return this.activePlatforms.size > 0;\n  }\n\n  cleanupOldPlatforms(characterX: number): void {\n    const platformsToRemove: Phaser.GameObjects.Rectangle[] = [];\n\n    // Check all platforms in the group, not just active ones\n    this.platformsGroup.children.entries.forEach((platform) => {\n      const rect = platform as Phaser.GameObjects.Rectangle;\n      const platformRightEdge = rect.x + rect.width / 2;\n\n      // Remove platforms that are far behind the character\n      if (\n        platformRightEdge <\n        characterX - GAME_CONSTANTS.PLATFORMS.CLEANUP_DISTANCE\n      ) {\n        platformsToRemove.push(rect);\n      }\n    });\n\n    // Remove old platforms\n    platformsToRemove.forEach((platform) => {\n      this.platformsGroup.remove(platform);\n      platform.destroy();\n    });\n\n    // Old platforms cleaned up\n  }\n\n  getActivePlatforms(): Map<string, PlatformData> {\n    return new Map(this.activePlatforms);\n  }\n\n  getPlatformsGroup(): Phaser.GameObjects.Group {\n    return this.platformsGroup;\n  }\n\n  // Helper method to get level height for a key\n  getLevelHeight(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n  }\n\n  // Helper method to get level color for a key\n  getLevelColor(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_COLORS[key];\n  }\n}\n","import { Scene } from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\ninterface ChordData {\n  chordType: string;\n  basePoints: number;\n  accumulatedPoints: number;\n  startTime: number;\n  isComplete: boolean;\n}\n\nexport class ChordDetector {\n  private scene: Scene;\n  private currentChord: ChordData | null = null;\n  private chordDefinitions: Map<string, { name: string; points: number }> = new Map();\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n    this.initializeChordDefinitions();\n  }\n\n  private initializeChordDefinitions(): void {\n    // Triads (3-note chords) - 50 points each\n    // C Major: S + F + H (C + E + G)\n    this.chordDefinitions.set(\"S,F,H\", { name: \"C Major\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n    // D Minor: D + G + J (D + F + A) \n    this.chordDefinitions.set(\"D,G,J\", { name: \"D Minor\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n    // E Minor: F + H + K (E + G + B)\n    this.chordDefinitions.set(\"F,H,K\", { name: \"E Minor\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n    // F Major: G + J + S (F + A + C)\n    this.chordDefinitions.set(\"G,J,S\", { name: \"F Major\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n    // G Major: H + K + D (G + B + D)\n    this.chordDefinitions.set(\"H,K,D\", { name: \"G Major\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n    // A Minor: J + S + F (A + C + E)\n    this.chordDefinitions.set(\"J,S,F\", { name: \"A Minor\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n    // B Diminished: K + D + G (B + D + F)\n    this.chordDefinitions.set(\"K,D,G\", { name: \"B Diminished\", points: GAME_CONSTANTS.CHORD_DETECTION.TRIAD_POINTS });\n\n    // Seventh Chords (4-note chords) - 100 points each\n    // C Major 7: S + F + H + K (C + E + G + B)\n    this.chordDefinitions.set(\"S,F,H,K\", { name: \"C Major 7\", points: GAME_CONSTANTS.CHORD_DETECTION.SEVENTH_POINTS });\n    // D Minor 7: D + G + J + S (D + F + A + C)\n    this.chordDefinitions.set(\"D,G,J,S\", { name: \"D Minor 7\", points: GAME_CONSTANTS.CHORD_DETECTION.SEVENTH_POINTS });\n    // G Dominant 7: H + K + D + G (G + B + D + F)\n    this.chordDefinitions.set(\"H,K,D,G\", { name: \"G Dominant 7\", points: GAME_CONSTANTS.CHORD_DETECTION.SEVENTH_POINTS });\n\n    // Power Chords (2-note chords) - 25 points each\n    // C5: S + H (C + G)\n    this.chordDefinitions.set(\"S,H\", { name: \"C5\", points: GAME_CONSTANTS.CHORD_DETECTION.POWER_CHORD_POINTS });\n    // D5: D + J (D + A)\n    this.chordDefinitions.set(\"D,J\", { name: \"D5\", points: GAME_CONSTANTS.CHORD_DETECTION.POWER_CHORD_POINTS });\n    // F5: G + S (F + C)\n    this.chordDefinitions.set(\"G,S\", { name: \"F5\", points: GAME_CONSTANTS.CHORD_DETECTION.POWER_CHORD_POINTS });\n    // G5: H + D (G + D)\n    this.chordDefinitions.set(\"H,D\", { name: \"G5\", points: GAME_CONSTANTS.CHORD_DETECTION.POWER_CHORD_POINTS });\n  }\n\n  update(activeKeys: Set<string>): { points: number; chordName: string | null } {\n    const keyString = Array.from(activeKeys).sort().join(\",\");\n    \n    // Debug: Log the key combination being checked\n    if (activeKeys.size > 1) {\n      console.log(\"Keys pressed:\", keyString);\n    }\n    \n    const chordDef = this.chordDefinitions.get(keyString);\n\n    if (chordDef) {\n      // New chord detected or same chord continuing\n      if (!this.currentChord || this.currentChord.chordType !== chordDef.name) {\n        this.currentChord = {\n          chordType: chordDef.name,\n          basePoints: chordDef.points,\n          accumulatedPoints: 0,\n          startTime: this.scene.time.now,\n          isComplete: false,\n        };\n      }\n\n      // Calculate points earned this frame (not total accumulated)\n      const elapsed = this.scene.time.now - this.currentChord.startTime;\n      const progress = Math.min(elapsed / GAME_CONSTANTS.CHORD_DETECTION.ACCUMULATION_TIME, 1);\n      const newAccumulatedPoints = Math.floor(this.currentChord.basePoints * progress);\n      const pointsThisFrame = newAccumulatedPoints - this.currentChord.accumulatedPoints;\n      \n      this.currentChord.accumulatedPoints = newAccumulatedPoints;\n\n      // Check if chord is complete\n      if (progress >= 1 && !this.currentChord.isComplete) {\n        this.currentChord.isComplete = true;\n      }\n\n      return { points: pointsThisFrame, chordName: this.currentChord.chordType };\n    } else {\n      // No valid chord detected\n      this.currentChord = null;\n      return { points: 0, chordName: null };\n    }\n  }\n\n  getCurrentChord(): ChordData | null {\n    return this.currentChord;\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { AudioManager } from \"../audio/AudioManager\";\nimport { InputManager } from \"../input/InputManager\";\nimport { PlatformManager } from \"../platform/PlatformManager\";\nimport { ChordDetector } from \"../audio/ChordDetector\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport class MuseRunnerGame extends Scene {\n  private character!: Phaser.GameObjects.Image;\n  private scoreText!: Phaser.GameObjects.Text;\n\n  // Game state\n  private isGameRunning: boolean = false;\n  private score: number = 0;\n\n  // Managers\n  private audioManager!: AudioManager;\n  private inputManager!: InputManager;\n  private platformManager!: PlatformManager;\n  private chordDetector!: ChordDetector;\n\n  constructor() {\n    super(\"MuseRunnerGame\");\n  }\n\n  async create(): Promise<void> {\n    const { width, height } = this.cameras.main;\n\n    // Initialize managers with error handling\n    try {\n      this.audioManager = new AudioManager();\n      this.inputManager = new InputManager(this);\n      this.platformManager = new PlatformManager(this);\n      this.chordDetector = new ChordDetector(this);\n\n      // Initialize managers with error handling\n      this.audioManager.initialize();\n      this.inputManager.initialize();\n      this.platformManager.initialize();\n\n      // All managers initialized successfully\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.MANAGER_INIT_FAILED, error);\n      // Game can still continue with degraded functionality\n    }\n\n    // Create character using player.png image\n    this.character = this.add.image(\n      100,\n      height - 80,\n      \"player\"\n    );\n    this.character.setDepth(1000); // Ensure character appears above platforms\n    this.physics.add.existing(this.character);\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Set up physics for endless running - no collision needed\n    characterBody.setCollideWorldBounds(false);\n    characterBody.setDragX(0);\n    characterBody.setFrictionX(0);\n    characterBody.setGravityY(0); // No gravity - character rides platforms directly\n\n    // Create UI - make sure it's visible and doesn't scroll\n    this.scoreText = this.add.text(16, 16, \"Score: 0\", {\n      fontSize: \"24px\",\n      color: \"#ffffff\",\n      fontFamily: \"Nabla, system-ui\",\n      stroke: \"#000000\",\n      strokeThickness: 2,\n    });\n    this.scoreText.setScrollFactor(0); // Don't scroll with camera\n\n    // REMOVED: Instructions and key guide UI elements\n\n    // Controls info\n    this.add\n      .text(width - 16, 16, \"v0.0.4 | ESC: Menu | R: Restart\", {\n        fontSize: \"14px\",\n        color: \"#95a5a6\",\n        fontFamily: \"Nabla, system-ui\",\n      })\n      .setOrigin(1, 0)\n      .setScrollFactor(0); // Don't scroll with camera\n\n    // ESC key to return to menu\n    this.input.keyboard!.on(\"keydown-ESC\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n\n    // R key to restart\n    this.input.keyboard!.on(\"keydown-R\", () => {\n      this.scene.restart();\n    });\n\n    // Start the game\n    this.isGameRunning = true;\n\n    // Camera follows character\n    this.cameras.main.startFollow(\n      this.character,\n      true,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_X,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_Y,\n    );\n    this.cameras.main.setDeadzone(\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_X,\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_Y,\n    );\n\n    // Reset game state\n    this.score = 0;\n\n    // Don't start with any musical platform - wait for first key press\n  }\n\n  override update(): void {\n    if (!this.isGameRunning) return;\n\n    // Auto-run character forward - ALWAYS moving, never stops\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Force constant forward movement - override any physics that might stop it\n    characterBody.setVelocityX(GAME_CONSTANTS.CHARACTER.SPEED);\n    characterBody.setDragX(0); // No drag to slow down\n    characterBody.setFrictionX(0); // No friction from platforms\n\n    // Handle input for multiple simultaneous keys with error handling\n    try {\n      const { keyStateChanged } = this.inputManager.update(this.time.now);\n      const inputState = this.inputManager.getInputState();\n\n      if (keyStateChanged) {\n        this.handleKeyChanges(inputState.pressedKeys);\n      }\n\n      // Update chord detection\n      const chordResult = this.chordDetector.update(inputState.pressedKeys);\n      if (chordResult.points > 0) {\n        this.score += chordResult.points;\n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n        \n        // Show chord name and points if detected (only show when points are earned)\n        if (chordResult.chordName && chordResult.points > 0) {\n          this.showChordName(chordResult.chordName, chordResult.points);\n        }\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.INPUT_HANDLING_ERROR, error);\n    }\n\n    // Extend all active platforms as character moves with error handling\n    try {\n      if (this.platformManager.hasActivePlatforms()) {\n        this.platformManager.extendActivePlatforms(this.character.x);\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_EXTENSION_ERROR, error);\n    }\n\n    // Make character ride the highest active platform with error handling\n    try {\n      this.updateCharacterHeight();\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.CHARACTER_HEIGHT_ERROR, error);\n    }\n\n    // Character position tracking removed for performance\n\n    // Game over condition - only if character falls WAY off screen (make it more lenient)\n    if (\n      this.character.y >\n      this.cameras.main.height + GAME_CONSTANTS.GAME.OVER_FALL_DISTANCE\n    ) {\n      // Game over triggered - character fell too far\n      this.gameOver();\n    }\n\n    // Clean up old platforms through platform manager with error handling\n    try {\n      this.platformManager.cleanupOldPlatforms(this.character.x);\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_CLEANUP_ERROR, error);\n    }\n  }\n\n  private handleKeyChanges(currentlyPressedKeys: Set<string>): void {\n    try {\n      const activePlatforms = this.platformManager.getActivePlatforms();\n\n      // Start new platforms for newly pressed keys\n      currentlyPressedKeys.forEach((key) => {\n        if (this.isValidGameKey(key) && !activePlatforms.has(key)) {\n          try {\n            this.platformManager.startNewPlatform(key, this.character.x);\n            this.audioManager.playNote(key);\n            // Platform started for key\n\n            // Visual feedback - scale character briefly\n            this.character.setScale(1.2);\n            this.time.delayedCall(\n              GAME_CONSTANTS.CHARACTER.VISUAL_FEEDBACK_DURATION,\n              () => {\n                this.character.setScale(1.0); // Back to normal size\n              },\n            );\n\n            this.score += GAME_CONSTANTS.GAME.SCORE_PER_PLATFORM;\n            this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_START_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n\n      // End platforms for released keys\n      activePlatforms.forEach((_platformData, key) => {\n        if (!currentlyPressedKeys.has(key)) {\n          try {\n            this.platformManager.endPlatform(key as GameKey);\n            // Platform ended for key\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_END_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.KEY_CHANGE_ERROR, error);\n    }\n  }\n\n  private isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n\n  private updateCharacterHeight(): void {\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Get the highest active key to determine target height\n    const highestKey = this.platformManager.getHighestActiveKey();\n\n    if (highestKey) {\n      // Calculate target Y based on the highest active key\n      const { height } = this.cameras.main;\n      const targetY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[highestKey];\n      const currentY = this.character.y;\n      const heightDiff = targetY - currentY;\n\n      // Very smooth transition with slower lerp\n      if (Math.abs(heightDiff) > 0.5) {\n        // Use slower lerp for ultra-smooth movement\n        const newY = Phaser.Math.Linear(\n          currentY,\n          targetY,\n          GAME_CONSTANTS.GAME.CHARACTER_HEIGHT_LERP_SPEED,\n        );\n        this.character.y = newY;\n        characterBody.setVelocityY(0); // Override physics velocity\n      } else {\n        // Close enough, lock to platform\n        this.character.y = targetY;\n        characterBody.setVelocityY(0);\n      }\n    } else {\n      // No active platforms - fall down smoothly to ground\n      const { height } = this.cameras.main;\n      const groundY = height - GAME_CONSTANTS.GAME.GROUND_OFFSET;\n\n      if (this.character.y < groundY) {\n        characterBody.setVelocityY(GAME_CONSTANTS.GAME.FALL_VELOCITY); // Fall down\n      } else {\n        this.character.y = groundY; // Hit ground\n        characterBody.setVelocityY(0);\n      }\n    }\n  }\n\n  private showChordName(chordName: string, points: number): void {\n    // Remove any existing chord name text\n    this.children.list.forEach(child => {\n      if (child.name === 'chordName') {\n        child.destroy();\n      }\n    });\n\n    // Get current chord data to show accumulated points\n    const currentChord = this.chordDetector.getCurrentChord();\n    const accumulatedPoints = currentChord ? currentChord.accumulatedPoints : 0;\n\n    // Create new chord name text - position relative to camera viewport\n    const chordText = this.add.text(\n      this.cameras.main.width / 2,\n      100,\n      `${chordName} ${accumulatedPoints}/${currentChord?.basePoints || 0}`,\n      {\n        fontSize: \"32px\",\n        color: \"#f39c12\",\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#000000\",\n        strokeThickness: 2,\n      }\n    );\n    chordText.setOrigin(0.5);\n    chordText.setScrollFactor(0);\n    chordText.name = 'chordName';\n\n    // Animate the chord name\n    this.tweens.add({\n      targets: chordText,\n      alpha: 0,\n      y: chordText.y - 50,\n      duration: 2000,\n      ease: \"Power2\",\n      onComplete: () => chordText.destroy(),\n    });\n  }\n\n  private gameOver(): void {\n    this.isGameRunning = false;\n\n    const { width, height } = this.cameras.main;\n\n    // Stop camera follow\n    this.cameras.main.stopFollow();\n\n    // Game over screen\n    const gameOverBg = this.add.rectangle(\n      this.cameras.main.scrollX + width / 2,\n      this.cameras.main.scrollY + height / 2,\n      width,\n      height,\n      0x000000,\n      0.8,\n    );\n    gameOverBg.setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 80,\n        \"Game Over!\",\n        {\n          fontSize: \"48px\",\n          color: \"#e74c3c\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 20,\n        `Final Score: ${Math.floor(this.score)}`,\n        {\n          fontSize: \"24px\",\n          color: \"#ffffff\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    const restartText = this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 + 30,\n        \"Press R to restart or ESC for menu\",\n        {\n          fontSize: \"18px\",\n          color: \"#bdc3c7\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    // Pulsing restart text\n    this.tweens.add({\n      targets: restartText,\n      alpha: 0.5,\n      duration: 1000,\n      yoyo: true,\n      repeat: -1,\n    });\n\n    // Send score to parent (Reddit)\n    if (window.parent) {\n      window.parent.postMessage(\n        {\n          type: \"GAME_OVER\",\n          data: { finalScore: Math.floor(this.score) },\n        },\n        \"*\",\n      );\n    }\n  }\n}\n","import { Scene, GameObjects } from \"phaser\";\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super(\"MainMenu\");\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on(\"resize\", () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n\n    this.input.keyboard!.on(\"keydown-SPACE\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add\n        .text(0, 0, \"🎵 Muse Runner 🏃‍♂️\", {\n          fontSize: \"48px\",\n          color: \"#ffffff\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add\n        .text(0, 0, \"Rhythm Platformer\", {\n          fontSize: \"24px\",\n          color: \"#3498db\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add\n        .text(\n          0,\n          0,\n          \"Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen\",\n          {\n            fontSize: \"18px\",\n            color: \"#ecf0f1\",\n            fontFamily: \"Nabla, system-ui\",\n            align: \"center\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add\n        .text(0, 0, \"Click to Start or Press SPACE\", {\n          fontSize: \"24px\",\n          color: \"#2ecc71\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1,\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add\n        .text(\n          0,\n          0,\n          \"v0.0.4 - Built with Phaser.js for Reddit's Community Games Challenge\",\n          {\n            fontSize: \"14px\",\n            color: \"#95a5a6\",\n            fontFamily: \"Nabla, system-ui\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from \"phaser\";\n\nexport class Preloader extends Scene {\n  constructor() {\n    super(\"Preloader\");\n  }\n\n  init() {\n    // REMOVED: Background image and progress bars that were persisting behind the game\n    // The game now loads cleanly without old UI elements\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath(\"assets\");\n\n    this.load.image(\"logo\", \"logo.png\");\n    this.load.image(\"player\", \"player.png\");\n    \n    // Preload the Nabla font to ensure it's available\n    this.load.setPath(\"assets/fonts\");\n    this.load.font(\"nabla\", \"nabla.ttf\");\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start(\"MainMenu\");\n  }\n}\n","import { Boot } from \"./scenes/Boot\";\nimport { GameOver } from \"./scenes/GameOver\";\nimport { MuseRunnerGame } from \"./scenes/MuseRunnerGame\";\nimport { MainMenu } from \"./scenes/MainMenu\";\nimport * as Phaser from \"phaser\";\nimport { AUTO, Game } from \"phaser\";\nimport { Preloader } from \"./scenes/Preloader\";\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: \"game-container\",\n  backgroundColor: \"#2c3e50\",\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { x: 0, y: 0 }, // NO GRAVITY - character rides platforms directly\n      debug: false,\n    },\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from \"./game/main\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  StartGame(\"game-container\");\n});\n"],"names":["Boot","Scene","constructor","super","preload","create","this","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","image","setOrigin","setAlpha","gameOverText","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","GAME_CONSTANTS","CHARACTER","SPEED","WIDTH","HEIGHT","COLOR","VISUAL_FEEDBACK_COLOR","VISUAL_FEEDBACK_DURATION","PLATFORMS","EXTENSION_DISTANCE","AHEAD_OFFSET","CLEANUP_DISTANCE","MIN_LENGTH","GROWTH_RATE","AUDIO","NOTE_DURATION","ATTACK_TIME","VOLUME","GAME","OVER_FALL_DISTANCE","SCORE_PER_PLATFORM","GROUND_OFFSET","CHARACTER_HEIGHT_LERP_SPEED","FALL_VELOCITY","CAMERA_DEADZONE_X","CAMERA_DEADZONE_Y","CAMERA_FOLLOW_LERP_X","CAMERA_FOLLOW_LERP_Y","CHORD_DETECTION","ACCUMULATION_TIME","TRIAD_POINTS","SEVENTH_POINTS","POWER_CHORD_POINTS","LEVEL_HEIGHTS","S","D","F","G","H","J","K","LEVEL_COLORS","VALID_KEYS","ERROR_HANDLING","MANAGER_INIT_FAILED","INPUT_HANDLING_ERROR","PLATFORM_EXTENSION_ERROR","CHARACTER_HEIGHT_ERROR","PLATFORM_CLEANUP_ERROR","KEY_CHANGE_ERROR","PLATFORM_START_ERROR","PLATFORM_END_ERROR","NOTE_FREQUENCIES","AudioManager","initialize","audioContext","window","AudioContext","webkitAudioContext","audioAvailable","isInitialized","error","console","warn","playNote","key","frequency","playMusicalTone","isAudioAvailable","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","stop","InputManager","Set","Map","keyboard","forEach","keyObjects","set","addKey","update","_currentTime","previouslyPressedKeys","currentlyPressedKeys","clear","keyObject","get","isDown","keyStateChanged","hasKeyStateChanged","getInputState","pressedKeys","size","has","isValidGameKey","includes","PlatformManager","platformsGroup","group","startNewPlatform","startX","activePlatforms","platformY","platformColor","platform","rectangle","physics","existing","platformData","startTime","time","now","isGrowing","endPlatform","delete","extendActivePlatforms","characterX","_key","distanceMoved","newWidth","max","newCenterX","x","setSize","y","getHighestActiveKey","highestKey","highestY","Number","POSITIVE_INFINITY","_platformData","levelHeight","hasActivePlatforms","cleanupOldPlatforms","platformsToRemove","children","entries","rect","push","remove","destroy","getActivePlatforms","getPlatformsGroup","getLevelHeight","getLevelColor","ChordDetector","initializeChordDefinitions","chordDefinitions","name","points","activeKeys","keyString","Array","from","sort","join","log","chordDef","currentChord","chordType","basePoints","accumulatedPoints","isComplete","elapsed","progress","newAccumulatedPoints","floor","pointsThisFrame","chordName","getCurrentChord","MuseRunnerGame","audioManager","inputManager","platformManager","chordDetector","character","setDepth","characterBody","body","setCollideWorldBounds","setDragX","setFrictionX","setGravityY","scoreText","setScrollFactor","restart","isGameRunning","startFollow","setDeadzone","score","setVelocityX","inputState","handleKeyChanges","chordResult","setText","showChordName","updateCharacterHeight","gameOver","delayedCall","targetY","currentY","heightDiff","abs","newY","Phaser.Math","Linear","setVelocityY","groundY","list","child","chordText","tweens","targets","alpha","duration","ease","onComplete","stopFollow","scrollX","scrollY","restartText","yoyo","repeat","parent","postMessage","data","finalScore","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","load","setPath","font","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}