{"version":3,"file":"index-DQP8BJSp.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/audio/AudioManager.ts","../../../src/client/game/input/InputManager.ts","../../../src/client/game/platform/PlatformManager.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from 'phaser';\n\nexport class Boot extends Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    this.load.image('background', 'assets/bg.png');\n  }\n\n  create() {\n    this.scene.start('Preloader');\n  }\n}\n","import { Scene } from 'phaser';\nimport * as Phaser from 'phaser';\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameover_text: Phaser.GameObjects.Text;\n\n  constructor() {\n    super('GameOver');\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add.image(0, 0, 'background').setOrigin(0).setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameover_text = this.add\n      .text(0, 0, 'Game Over', {\n        fontFamily: 'Arial Black',\n        fontSize: '64px',\n        color: '#ffffff',\n        stroke: '#000000',\n        strokeThickness: 8,\n        align: 'center',\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on('resize', (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once('pointerdown', () => {\n      this.scene.start('MainMenu');\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameover_text) {\n      this.gameover_text.setPosition(width / 2, height / 2);\n      this.gameover_text.setScale(scaleFactor);\n    }\n  }\n}\n","export class AudioManager {\n    private audioContext: AudioContext | null = null;\n    private readonly noteFrequencies: Record<string, number> = {\n        'S': 261.63, // C4\n        'D': 293.66, // D4\n        'F': 329.63, // E4\n        'G': 349.23, // F4\n        'H': 392.00, // G4\n        'J': 440.00, // A4\n        'K': 493.88  // B4\n    };\n\n    private static readonly AUDIO_CONSTANTS = {\n        NOTE_DURATION: 0.5,\n        ATTACK_TIME: 0.01,\n        VOLUME: 0.3\n    } as const;\n\n    async initialize(): Promise<void> {\n        try {\n            this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            \n            // Resume context if suspended (required by some browsers)\n            if (this.audioContext.state === 'suspended') {\n                await this.audioContext.resume();\n            }\n        } catch (error) {\n            console.warn('Audio initialization failed:', error);\n        }\n    }\n\n    playNote(key: string): void {\n        const frequency = this.noteFrequencies[key];\n        if (!frequency || !this.audioContext) {\n            console.warn(`Cannot play note: ${key}`);\n            return;\n        }\n\n        try {\n            this.playTone(frequency);\n        } catch (error) {\n            console.warn('Failed to play note:', error);\n        }\n    }\n\n    private playTone(frequency: number): void {\n        if (!this.audioContext) return;\n\n        const oscillator = this.audioContext.createOscillator();\n        const gainNode = this.audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(this.audioContext.destination);\n        \n        // Configure oscillator\n        oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n        oscillator.type = 'sine';\n        \n        // Configure volume envelope\n        const { VOLUME, ATTACK_TIME, NOTE_DURATION } = AudioManager.AUDIO_CONSTANTS;\n        gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(\n            VOLUME, \n            this.audioContext.currentTime + ATTACK_TIME\n        );\n        gainNode.gain.exponentialRampToValueAtTime(\n            0.01, \n            this.audioContext.currentTime + NOTE_DURATION\n        );\n        \n        // Play the note\n        oscillator.start(this.audioContext.currentTime);\n        oscillator.stop(this.audioContext.currentTime + NOTE_DURATION);\n    }\n\n    dispose(): void {\n        if (this.audioContext) {\n            this.audioContext.close();\n            this.audioContext = null;\n        }\n    }\n}","import { Scene } from 'phaser';\n\ntype GameKey = 'S' | 'D' | 'F' | 'G' | 'H' | 'J' | 'K';\n\nexport interface InputState {\n    pressedKeys: Set<string>;\n    keyPressStartTime: Map<string, number>;\n    lastPressedKey: GameKey | null;\n}\n\nexport class InputManager {\n    private gameKeys: { [key: string]: Phaser.Input.Keyboard.Key } = {};\n    private inputState: InputState = {\n        pressedKeys: new Set(),\n        keyPressStartTime: new Map(),\n        lastPressedKey: null\n    };\n\n    constructor(private scene: Scene) {}\n\n    initialize(): void {\n        // Setup keyboard keys\n        this.gameKeys = {\n            'S': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.S),\n            'D': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.D),\n            'F': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.F),\n            'G': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.G),\n            'H': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.H),\n            'J': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.J),\n            'K': this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.K)\n        };\n    }\n\n    update(currentTime: number): { keyStateChanged: boolean; targetKey: GameKey | null } {\n        let keyStateChanged = false;\n        \n        Object.keys(this.gameKeys).forEach(key => {\n            const gameKey = this.gameKeys[key];\n            if (!gameKey) return;\n            \n            // Key just pressed\n            if (Phaser.Input.Keyboard.JustDown(gameKey)) {\n                this.inputState.pressedKeys.add(key);\n                this.inputState.keyPressStartTime.set(key, currentTime);\n                this.inputState.lastPressedKey = key as GameKey;\n                keyStateChanged = true;\n            }\n            \n            // Key just released\n            if (Phaser.Input.Keyboard.JustUp(gameKey)) {\n                this.inputState.pressedKeys.delete(key);\n                keyStateChanged = true;\n            }\n        });\n\n        const targetKey = this.inputState.pressedKeys.size > 0 \n            ? this.inputState.lastPressedKey \n            : null;\n\n        return { keyStateChanged, targetKey };\n    }\n\n    getInputState(): InputState {\n        return { ...this.inputState };\n    }\n\n    isValidGameKey(key: string): key is GameKey {\n        return ['S', 'D', 'F', 'G', 'H', 'J', 'K'].includes(key);\n    }\n}","import { Scene } from 'phaser';\n\ntype GameKey = 'S' | 'D' | 'F' | 'G' | 'H' | 'J' | 'K';\n\nexport class PlatformManager {\n    private platforms: Phaser.GameObjects.Group;\n    private activePlatforms: Map<GameKey, Phaser.GameObjects.Rectangle> = new Map();\n    private platformStartPositions: Map<GameKey, number> = new Map();\n\n    private static readonly PLATFORM_CONSTANTS = {\n        WIDTH: 120,\n        HEIGHT: 20,\n        EXTENSION: 150,\n        AHEAD_OFFSET: 20,\n        CENTER_OFFSET: 80,\n        CLEANUP_DISTANCE: 400,\n        LEVEL_HEIGHTS: {\n            'S': -80,  'D': -120, 'F': -160, 'G': -200,\n            'H': -240, 'J': -280, 'K': -320\n        },\n        LEVEL_COLORS: {\n            'S': 0xe74c3c, 'D': 0xf39c12, 'F': 0xf1c40f, 'G': 0x2ecc71,\n            'H': 0x3498db, 'J': 0x9b59b6, 'K': 0xe91e63\n        }\n    } as const;\n\n    constructor(private scene: Scene) {\n        this.platforms = this.scene.add.group();\n    }\n\n    initialize(): void {\n        const { height } = this.scene.cameras.main;\n        \n        // Create neutral starting platform\n        const neutralPlatform = this.scene.add.rectangle(200, height - 50, 800, 25, 0x95a5a6);\n        this.scene.physics.add.existing(neutralPlatform, true);\n        this.platforms.add(neutralPlatform);\n    }\n\n    startNewPlatform(key: GameKey, characterX: number): void {\n        // Don't create duplicate platforms for the same key\n        if (this.activePlatforms.has(key)) return;\n        \n        const { height } = this.scene.cameras.main;\n        \n        // Start platform right at character position for immediate response\n        this.platformStartPositions.set(key, characterX);\n        const platformY = height + PlatformManager.PLATFORM_CONSTANTS.LEVEL_HEIGHTS[key];\n        const platformColor = PlatformManager.PLATFORM_CONSTANTS.LEVEL_COLORS[key];\n        \n        // Start with minimal width, will extend as key is held\n        const platform = this.scene.add.rectangle(\n            characterX, \n            platformY, \n            1, // Start tiny, will grow immediately\n            PlatformManager.PLATFORM_CONSTANTS.HEIGHT, \n            platformColor\n        );\n        \n        this.scene.physics.add.existing(platform, true);\n        this.platforms.add(platform);\n        this.activePlatforms.set(key, platform);\n    }\n\n    extendActivePlatforms(characterX: number): void {\n        // Extend all currently active platforms\n        this.activePlatforms.forEach((platform, key) => {\n            const startX = this.platformStartPositions.get(key);\n            if (startX === undefined) return;\n            \n            // Platform length is purely based on how long key is held\n            const rawWidth = characterX - startX;\n            const newX = startX + rawWidth / 2;\n            \n            // No minimum width - platform can be as short as a quick tap (1px minimum to avoid rendering issues)\n            platform.width = Math.max(1, rawWidth);\n            platform.x = newX;\n            \n            // Update physics body\n            const body = platform.body as Phaser.Physics.Arcade.StaticBody;\n            body.setSize(platform.width, platform.height);\n            body.updateFromGameObject();\n        });\n    }\n\n    endPlatform(key: GameKey): void {\n        this.activePlatforms.delete(key);\n        this.platformStartPositions.delete(key);\n    }\n\n    endAllPlatforms(): void {\n        this.activePlatforms.clear();\n        this.platformStartPositions.clear();\n    }\n\n    cleanupOldPlatforms(characterX: number): void {\n        this.platforms.children.entries.forEach((platform) => {\n            const rect = platform as Phaser.GameObjects.Rectangle;\n            if (rect.x < characterX - PlatformManager.PLATFORM_CONSTANTS.CLEANUP_DISTANCE) {\n                rect.destroy();\n            }\n        });\n    }\n\n    getPlatformsGroup(): Phaser.GameObjects.Group {\n        return this.platforms;\n    }\n\n    getActivePlatforms(): Map<GameKey, Phaser.GameObjects.Rectangle> {\n        return this.activePlatforms;\n    }\n\n    hasActivePlatforms(): boolean {\n        return this.activePlatforms.size > 0;\n    }\n\n    getHighestActiveKey(): GameKey | null {\n        if (this.activePlatforms.size === 0) return null;\n        \n        // Return the highest key (K is highest, S is lowest)\n        const keyOrder: GameKey[] = ['K', 'J', 'H', 'G', 'F', 'D', 'S'];\n        for (const key of keyOrder) {\n            if (this.activePlatforms.has(key)) {\n                return key;\n            }\n        }\n        return null;\n    }\n}","import { Scene } from 'phaser';\nimport { AudioManager } from '../audio/AudioManager';\nimport { InputManager } from '../input/InputManager';\nimport { PlatformManager } from '../platform/PlatformManager';\n\n// Type aliases for better readability\ntype GameKey = 'S' | 'D' | 'F' | 'G' | 'H' | 'J' | 'K';\n\n// Game configuration interface for better organization\ninterface GameConfig {\n    readonly VALID_KEYS: readonly GameKey[];\n    readonly NOTE_FREQUENCIES: Record<GameKey, number>;\n    readonly TIMING_WINDOWS: {\n        readonly PERFECT: number;\n        readonly GOOD: number;\n        readonly OKAY: number;\n    };\n}\n\nexport class MuseRunnerGame extends Scene {\n    // Game constants\n    private static readonly GAME_CONSTANTS = {\n        CHARACTER_SPEED: 100,\n        JUMP_BASE_VELOCITY: -200,\n        JUMP_LEVEL_MULTIPLIER: 50,\n        MAX_JUMP_LEVELS: 2,\n        PLATFORM_WIDTH: 120,\n        PLATFORM_HEIGHT: 20,\n        PLATFORM_EXTENSION: 150,\n        PLATFORM_AHEAD_OFFSET: 20,\n        PLATFORM_CENTER_OFFSET: 80,\n        CLEANUP_DISTANCE: 400,\n        GAME_OVER_FALL_DISTANCE: 300,\n        AUDIO_NOTE_DURATION: 0.5,\n        AUDIO_ATTACK_TIME: 0.01,\n        AUDIO_VOLUME: 0.3,\n        VISUAL_FEEDBACK_DURATION: 200,\n        SIMPLE_JUMP_BASE: -300,\n        SIMPLE_JUMP_MULTIPLIER: 40,\n        LEVEL_HEIGHTS: {\n            'S': -80,  // Ground level offset\n            'D': -120, // Level 2 offset\n            'F': -160, // Level 3 offset\n            'G': -200, // Level 4 offset\n            'H': -240, // Level 5 offset\n            'J': -280, // Level 6 offset\n            'K': -320  // Highest level offset\n        },\n        LEVEL_COLORS: {\n            'S': 0xe74c3c, // Red (lowest)\n            'D': 0xf39c12, // Orange\n            'F': 0xf1c40f, // Yellow\n            'G': 0x2ecc71, // Green\n            'H': 0x3498db, // Blue\n            'J': 0x9b59b6, // Purple\n            'K': 0xe91e63  // Pink (highest)\n        }\n    } as const;\n\n    private character!: Phaser.GameObjects.Rectangle;\n    private scoreText!: Phaser.GameObjects.Text;\n    \n    // Game state\n    private isGameRunning: boolean = false;\n    private score: number = 0;\n\n    // Managers\n    private audioManager!: AudioManager;\n    private inputManager!: InputManager;\n    private platformManager!: PlatformManager;\n\n    constructor() {\n        super('MuseRunnerGame');\n    }\n\n    async create(): Promise<void> {\n        const { width, height } = this.cameras.main;\n\n        // Initialize managers\n        this.audioManager = new AudioManager();\n        this.inputManager = new InputManager(this);\n        this.platformManager = new PlatformManager(this);\n\n        // Initialize managers (remove await to fix loading issue)\n        this.audioManager.initialize();\n        this.inputManager.initialize();\n        this.platformManager.initialize();\n\n        // Create character (blue rectangle) - positioned on the neutral platform\n        this.character = this.add.rectangle(100, height - 80, 30, 40, 0x3498db);\n        this.physics.add.existing(this.character);\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Set up physics for endless running - no collision needed\n        characterBody.setCollideWorldBounds(false);\n        characterBody.setDragX(0);\n        characterBody.setFrictionX(0);\n        characterBody.setGravityY(0); // No gravity - character rides platforms directly\n\n        // Create UI\n        this.scoreText = this.add.text(16, 16, 'Score: 0', {\n            fontSize: '24px',\n            color: '#ffffff'\n        });\n\n\n\n        // Instructions\n        const instructionText = this.add.text(width / 2, 30, '🎵 Press S-D-F-G-H-J-K to create platforms at different heights! 🎵', {\n            fontSize: '16px',\n            color: '#ecf0f1',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Key guide\n        this.add.text(width / 2, 60, 'S=Low → D → F → G → H → J → K=High', {\n            fontSize: '14px',\n            color: '#95a5a6',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Make instructions pulse to draw attention\n        this.tweens.add({\n            targets: instructionText,\n            alpha: 0.6,\n            duration: 1500,\n            yoyo: true,\n            repeat: -1\n        });\n\n        // Controls info\n        this.add.text(width - 16, 16, 'v0.0.4 | ESC: Menu | R: Restart', {\n            fontSize: '14px',\n            color: '#95a5a6'\n        }).setOrigin(1, 0);\n\n        // ESC key to return to menu\n        this.input.keyboard!.on('keydown-ESC', () => {\n            this.scene.start('MainMenu');\n        });\n\n        // R key to restart\n        this.input.keyboard!.on('keydown-R', () => {\n            this.scene.restart();\n        });\n\n        // Start the game\n        this.isGameRunning = true;\n        \n        // Camera follows character\n        this.cameras.main.startFollow(this.character, true, 0.1, 0.1);\n        this.cameras.main.setDeadzone(200, 100);\n\n        // Reset game state\n        this.score = 0;\n\n        // Don't start with any musical platform - wait for first key press\n    }\n\n    override update(): void {\n        if (!this.isGameRunning) return;\n\n        // Auto-run character forward - ALWAYS moving, never stops\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Force constant forward movement - override any physics that might stop it\n        characterBody.setVelocityX(MuseRunnerGame.GAME_CONSTANTS.CHARACTER_SPEED);\n        characterBody.setDragX(0); // No drag to slow down\n        characterBody.setFrictionX(0); // No friction from platforms\n\n        // Handle input for multiple simultaneous keys\n        const { keyStateChanged } = this.inputManager.update(this.time.now);\n        const inputState = this.inputManager.getInputState();\n        \n        if (keyStateChanged) {\n            this.handleKeyChanges(inputState.pressedKeys);\n        }\n\n        // Extend all active platforms as character moves\n        if (this.platformManager.hasActivePlatforms()) {\n            this.platformManager.extendActivePlatforms(this.character.x);\n        }\n\n        // Make character ride the highest active platform\n        this.updateCharacterHeight();\n\n        // Game over condition - only if character falls WAY off screen\n        if (this.character.y > this.cameras.main.height + MuseRunnerGame.GAME_CONSTANTS.GAME_OVER_FALL_DISTANCE) {\n            this.gameOver();\n        }\n\n        // Clean up old platforms through platform manager\n        this.platformManager.cleanupOldPlatforms(this.character.x);\n    }\n\n    private playNote(key: GameKey): void {\n        const frequency = this.noteFrequencies[key];\n        if (!frequency) {\n            console.warn(`Unknown key: ${key}`);\n            return;\n        }\n        \n        console.log(`Playing note ${key} at ${frequency}Hz`);\n        \n        // Play musical note sound\n        this.playMusicalTone(frequency);\n        \n        // Visual feedback - change fill color\n        this.character.setFillStyle(0xf39c12);\n        this.time.delayedCall(MuseRunnerGame.GAME_CONSTANTS.VISUAL_FEEDBACK_DURATION, () => {\n            this.character.setFillStyle(0x3498db); // Back to blue\n        });\n    }\n\n    private playMusicalTone(frequency: number): void {\n        try {\n            // Initialize audio context if needed\n            if (!this.audioContext) {\n                this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            }\n\n            // Create oscillator for the musical note\n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            // Set frequency and type\n            oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n            oscillator.type = 'sine'; // Pure tone\n            \n            // Set volume envelope (attack and decay)\n            gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n            gainNode.gain.linearRampToValueAtTime(\n                MuseRunnerGame.GAME_CONSTANTS.AUDIO_VOLUME, \n                this.audioContext.currentTime + MuseRunnerGame.GAME_CONSTANTS.AUDIO_ATTACK_TIME\n            );\n            gainNode.gain.exponentialRampToValueAtTime(\n                0.01, \n                this.audioContext.currentTime + MuseRunnerGame.GAME_CONSTANTS.AUDIO_NOTE_DURATION\n            );\n            \n            // Play the note\n            oscillator.start(this.audioContext.currentTime);\n            oscillator.stop(this.audioContext.currentTime + MuseRunnerGame.GAME_CONSTANTS.AUDIO_NOTE_DURATION);\n            \n        } catch (error) {\n            console.log('Audio not available:', error);\n        }\n    }\n\n\n\n    private handleKeyChanges(currentlyPressedKeys: Set<string>): void {\n        const activePlatforms = this.platformManager.getActivePlatforms();\n        \n        // Start new platforms for newly pressed keys\n        currentlyPressedKeys.forEach(key => {\n            if (this.isValidGameKey(key) && !activePlatforms.has(key)) {\n                this.platformManager.startNewPlatform(key, this.character.x);\n                this.audioManager.playNote(key);\n                console.log(`Started platform for ${key}`);\n                \n                this.score += 10;\n                this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n            }\n        });\n        \n        // End platforms for released keys\n        activePlatforms.forEach((platform, key) => {\n            if (!currentlyPressedKeys.has(key)) {\n                this.platformManager.endPlatform(key);\n                console.log(`Ended platform for ${key}`);\n            }\n        });\n    }\n\n\n\n\n\n    private getCurrentCharacterLevel(): number {\n        if (!this.currentKey) return 0; // Neutral level\n        return this.getKeyLevel(this.currentKey);\n    }\n\n    private getKeyLevel(key: GameKey): number {\n        const levels: Record<string, number> = {\n            'S': 0, 'D': 1, 'F': 2, 'G': 3, 'H': 4, 'J': 5, 'K': 6\n        };\n        return levels[key] ?? 0;\n    }\n\n    private getLevelKey(level: number): GameKey {\n        const keys: GameKey[] = ['S', 'D', 'F', 'G', 'H', 'J', 'K'];\n        return keys[Math.min(level, 6)] || 'S';\n    }\n\n    private isValidGameKey(key: string): key is GameKey {\n        return ['S', 'D', 'F', 'G', 'H', 'J', 'K'].includes(key);\n    }\n\n\n\n\n\n    private updateCharacterHeight(): void {\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Get the highest active key to determine target height\n        const highestKey = this.platformManager.getHighestActiveKey();\n        \n        if (highestKey) {\n            // Calculate target Y based on the highest active key\n            const { height } = this.cameras.main;\n            const targetY = height + MuseRunnerGame.GAME_CONSTANTS.LEVEL_HEIGHTS[highestKey] - 10;\n            const currentY = this.character.y;\n            const heightDiff = targetY - currentY;\n            \n            // Very smooth transition with slower lerp\n            if (Math.abs(heightDiff) > 0.5) {\n                // Use slower lerp for ultra-smooth movement\n                const lerpSpeed = 0.08; // Much slower for smoother movement\n                const newY = Phaser.Math.Linear(currentY, targetY, lerpSpeed);\n                this.character.y = newY;\n                characterBody.setVelocityY(0); // Override physics velocity\n            } else {\n                // Close enough, lock to platform\n                this.character.y = targetY;\n                characterBody.setVelocityY(0);\n            }\n        } else {\n            // No active platforms - fall down smoothly to ground\n            const { height } = this.cameras.main;\n            const groundY = height - 60;\n            \n            if (this.character.y < groundY) {\n                characterBody.setVelocityY(300); // Fall down\n            } else {\n                this.character.y = groundY; // Hit ground\n                characterBody.setVelocityY(0);\n            }\n        }\n    }\n\n    private findHighestPlatformAt(x: number): number | null {\n        let highestY: number | null = null;\n        \n        // Check all platforms to find the highest one at this X position\n        this.platformManager.getPlatformsGroup().children.entries.forEach((platform) => {\n            const rect = platform as Phaser.GameObjects.Rectangle;\n            const platformLeft = rect.x - rect.width / 2;\n            const platformRight = rect.x + rect.width / 2;\n            \n            // Check if character X is within platform bounds\n            if (x >= platformLeft && x <= platformRight) {\n                const platformTop = rect.y - rect.height / 2;\n                if (highestY === null || platformTop < highestY) {\n                    highestY = platformTop;\n                }\n            }\n        });\n        \n        return highestY;\n    }\n\n    private gameOver(): void {\n        this.isGameRunning = false;\n        \n        const { width, height } = this.cameras.main;\n        \n        // Stop camera follow\n        this.cameras.main.stopFollow();\n        \n        // Game over screen\n        const gameOverBg = this.add.rectangle(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2,\n            width,\n            height,\n            0x000000,\n            0.8\n        );\n        gameOverBg.setScrollFactor(0);\n        \n        this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 - 80,\n            'Game Over!',\n            {\n                fontSize: '48px',\n                color: '#e74c3c',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 - 20,\n            `Final Score: ${Math.floor(this.score)}`,\n            {\n                fontSize: '24px',\n                color: '#ffffff',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        const restartText = this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 + 30,\n            'Press R to restart or ESC for menu',\n            {\n                fontSize: '18px',\n                color: '#bdc3c7',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        // Pulsing restart text\n        this.tweens.add({\n            targets: restartText,\n            alpha: 0.5,\n            duration: 1000,\n            yoyo: true,\n            repeat: -1\n        });\n\n        // Send score to parent (Reddit)\n        if (window.parent) {\n            window.parent.postMessage({\n                type: 'GAME_OVER',\n                data: { finalScore: Math.floor(this.score) }\n            }, '*');\n        }\n    }\n}","import { Scene, GameObjects } from 'phaser';\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super('MainMenu');\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on('resize', () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once('pointerdown', () => {\n      this.scene.start('MuseRunnerGame');\n    });\n\n    this.input.keyboard!.on('keydown-SPACE', () => {\n      this.scene.start('MuseRunnerGame');\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add.text(0, 0, '🎵 Muse Runner 🏃‍♂️', {\n        fontSize: '48px',\n        color: '#ffffff',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add.text(0, 0, 'Rhythm Platformer', {\n        fontSize: '24px',\n        color: '#3498db',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add.text(0, 0, \n        'Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen', {\n        fontSize: '18px',\n        color: '#ecf0f1',\n        fontFamily: 'Arial, sans-serif',\n        align: 'center'\n      }).setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add.text(0, 0, 'Click to Start or Press SPACE', {\n        fontSize: '24px',\n        color: '#2ecc71',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add.text(0, 0, 'v0.0.4 - Built with Phaser.js for Reddit\\'s Community Games Challenge', {\n        fontSize: '14px',\n        color: '#95a5a6',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from 'phaser';\n\nexport class Preloader extends Scene {\n  constructor() {\n    super('Preloader');\n  }\n\n  init() {\n    //  We loaded this image in our Boot Scene, so we can display it here\n    this.add.image(512, 384, 'background');\n\n    //  A simple progress bar. This is the outline of the bar.\n    this.add.rectangle(512, 384, 468, 32).setStrokeStyle(1, 0xffffff);\n\n    //  This is the progress bar itself. It will increase in size from the left based on the % of progress.\n    const bar = this.add.rectangle(512 - 230, 384, 4, 28, 0xffffff);\n\n    //  Use the 'progress' event emitted by the LoaderPlugin to update the loading bar\n    this.load.on('progress', (progress: number) => {\n      //  Update the progress bar (our bar is 464px wide, so 100% = 464px)\n      bar.width = 4 + 460 * progress;\n    });\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath('assets');\n\n    this.load.image('logo', 'logo.png');\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start('MainMenu');\n  }\n}\n","import { Boot } from './scenes/Boot';\nimport { GameOver } from './scenes/GameOver';\nimport { MuseRunnerGame } from './scenes/MuseRunnerGame';\nimport { MainMenu } from './scenes/MainMenu';\nimport * as Phaser from 'phaser';\nimport { AUTO, Game } from 'phaser';\nimport { Preloader } from './scenes/Preloader';\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: 'game-container',\n  backgroundColor: '#2c3e50',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 600 },\n      debug: false\n    }\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from './game/main';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  StartGame('game-container');\n});\n"],"names":["Boot","Scene","constructor","super","preload","this","load","image","create","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","setOrigin","setAlpha","gameover_text","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","_AudioManager","S","D","F","G","H","J","K","initialize","audioContext","window","AudioContext","webkitAudioContext","state","resume","error","console","warn","playNote","key","frequency","noteFrequencies","playTone","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","VOLUME","ATTACK_TIME","NOTE_DURATION","AUDIO_CONSTANTS","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","stop","dispose","close","AudioManager","InputManager","pressedKeys","Set","keyPressStartTime","Map","lastPressedKey","gameKeys","keyboard","addKey","Phaser","Input","Keyboard","KeyCodes","update","keyStateChanged","Object","keys","forEach","gameKey","JustDown","inputState","set","JustUp","delete","targetKey","size","getInputState","isValidGameKey","includes","_PlatformManager","platforms","group","neutralPlatform","rectangle","physics","existing","startNewPlatform","characterX","activePlatforms","has","platformStartPositions","platformY","PLATFORM_CONSTANTS","LEVEL_HEIGHTS","platformColor","LEVEL_COLORS","platform","HEIGHT","extendActivePlatforms","startX","get","rawWidth","newX","max","x","body","setSize","updateFromGameObject","endPlatform","endAllPlatforms","clear","cleanupOldPlatforms","children","entries","rect","CLEANUP_DISTANCE","destroy","getPlatformsGroup","getActivePlatforms","hasActivePlatforms","getHighestActiveKey","keyOrder","WIDTH","EXTENSION","AHEAD_OFFSET","CENTER_OFFSET","PlatformManager","_MuseRunnerGame","audioManager","inputManager","platformManager","character","characterBody","setCollideWorldBounds","setDragX","setFrictionX","setGravityY","scoreText","instructionText","tweens","targets","alpha","duration","yoyo","repeat","restart","isGameRunning","startFollow","setDeadzone","score","setVelocityX","GAME_CONSTANTS","CHARACTER_SPEED","time","now","handleKeyChanges","updateCharacterHeight","y","GAME_OVER_FALL_DISTANCE","gameOver","log","playMusicalTone","setFillStyle","delayedCall","VISUAL_FEEDBACK_DURATION","AUDIO_VOLUME","AUDIO_ATTACK_TIME","AUDIO_NOTE_DURATION","currentlyPressedKeys","setText","floor","getCurrentCharacterLevel","currentKey","getKeyLevel","getLevelKey","level","highestKey","targetY","currentY","heightDiff","abs","lerpSpeed","newY","Linear","setVelocityY","groundY","findHighestPlatformAt","highestY","platformLeft","platformRight","platformTop","stopFollow","scrollX","scrollY","setScrollFactor","restartText","parent","postMessage","data","finalScore","JUMP_BASE_VELOCITY","JUMP_LEVEL_MULTIPLIER","MAX_JUMP_LEVELS","PLATFORM_WIDTH","PLATFORM_HEIGHT","PLATFORM_EXTENSION","PLATFORM_AHEAD_OFFSET","PLATFORM_CENTER_OFFSET","SIMPLE_JUMP_BASE","SIMPLE_JUMP_MULTIPLIER","MuseRunnerGame","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","setStrokeStyle","bar","progress","setPath","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}