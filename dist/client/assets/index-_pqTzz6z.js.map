{"version":3,"file":"index-_pqTzz6z.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from 'phaser';\n\nexport class Boot extends Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    this.load.image('background', 'assets/bg.png');\n  }\n\n  create() {\n    this.scene.start('Preloader');\n  }\n}\n","import { Scene } from 'phaser';\nimport * as Phaser from 'phaser';\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameover_text: Phaser.GameObjects.Text;\n\n  constructor() {\n    super('GameOver');\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add.image(0, 0, 'background').setOrigin(0).setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameover_text = this.add\n      .text(0, 0, 'Game Over', {\n        fontFamily: 'Arial Black',\n        fontSize: '64px',\n        color: '#ffffff',\n        stroke: '#000000',\n        strokeThickness: 8,\n        align: 'center',\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on('resize', (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once('pointerdown', () => {\n      this.scene.start('MainMenu');\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameover_text) {\n      this.gameover_text.setPosition(width / 2, height / 2);\n      this.gameover_text.setScale(scaleFactor);\n    }\n  }\n}\n","import { Scene } from 'phaser';\n\nexport class MuseRunnerGame extends Scene {\n    // Game constants\n    private static readonly GAME_CONSTANTS = {\n        CHARACTER_SPEED: 100,\n        JUMP_BASE_VELOCITY: -200,\n        JUMP_LEVEL_MULTIPLIER: 50,\n        MAX_JUMP_LEVELS: 2,\n        PLATFORM_WIDTH: 120,\n        PLATFORM_HEIGHT: 20,\n        PLATFORM_EXTENSION: 150,\n        LEVEL_HEIGHTS: {\n            'S': -80,  // Ground level offset\n            'D': -120, // Level 2 offset\n            'F': -160, // Level 3 offset\n            'G': -200, // Level 4 offset\n            'H': -240, // Level 5 offset\n            'J': -280, // Level 6 offset\n            'K': -320  // Highest level offset\n        },\n        LEVEL_COLORS: {\n            'S': 0xe74c3c, // Red (lowest)\n            'D': 0xf39c12, // Orange\n            'F': 0xf1c40f, // Yellow\n            'G': 0x2ecc71, // Green\n            'H': 0x3498db, // Blue\n            'J': 0x9b59b6, // Purple\n            'K': 0xe91e63  // Pink (highest)\n        }\n    } as const;\n\n    private character!: Phaser.GameObjects.Rectangle;\n    private platforms!: Phaser.GameObjects.Group;\n    private gameKeys!: { [key: string]: Phaser.Input.Keyboard.Key };\n    \n    // Game state\n    private isGameRunning: boolean = false;\n    private score: number = 0;\n    private scoreText!: Phaser.GameObjects.Text;\n\n    // Platform system\n    private currentPlatform: Phaser.GameObjects.Rectangle | null = null;\n    private currentKey: string | null = null;\n    private platformStartX: number = 0;\n\n    // Musical note frequencies (C major scale)\n    private noteFrequencies: Record<string, number> = {\n        'S': 261.63, // C4\n        'D': 293.66, // D4\n        'F': 329.63, // E4\n        'G': 349.23, // F4\n        'H': 392.00, // G4\n        'J': 440.00, // A4\n        'K': 493.88  // B4\n    };\n\n    // Audio context for musical notes\n    private audioContext: AudioContext | null = null;\n\n    constructor() {\n        super('MuseRunnerGame');\n    }\n\n    create(): void {\n        const { width, height } = this.cameras.main;\n\n        // Create platforms group first\n        this.platforms = this.add.group();\n\n        // Create neutral starting platform - much longer for endless running\n        const neutralPlatform = this.add.rectangle(200, height - 50, 800, 25, 0x95a5a6); // Gray neutral platform\n        this.physics.add.existing(neutralPlatform, true);\n        this.platforms.add(neutralPlatform);\n\n        // Create character (blue rectangle) - positioned on the neutral platform\n        this.character = this.add.rectangle(100, height - 80, 30, 40, 0x3498db);\n        this.physics.add.existing(this.character);\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Set up physics for endless running\n        characterBody.setCollideWorldBounds(false); // Don't stop at world bounds\n        characterBody.setBounce(0.1);\n        characterBody.setDragX(0); // No horizontal drag\n        characterBody.setFrictionX(0); // No friction\n        characterBody.setMaxVelocityX(200); // Allow fast horizontal movement\n        characterBody.setMaxVelocityY(1000); // Allow falling\n\n        // Set up collisions between character and platforms - only from above\n        this.physics.add.collider(this.character, this.platforms, undefined, (character: any, platform: any) => {\n            // Only collide if character is falling down onto platform (not hitting from side/bottom)\n            const characterBody = character.body as Phaser.Physics.Arcade.Body;\n            const platformBody = platform.body as Phaser.Physics.Arcade.StaticBody;\n            \n            // Check if character is above the platform and falling down\n            return characterBody.velocity.y >= 0 && characterBody.bottom <= platformBody.top + 10;\n        });\n\n        // Musical keys setup (S-D-F-G-H-J-K)\n        this.gameKeys = {\n            'S': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.S),\n            'D': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.D),\n            'F': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.F),\n            'G': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.G),\n            'H': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.H),\n            'J': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.J),\n            'K': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.K)\n        };\n\n        // Create UI\n        this.scoreText = this.add.text(16, 16, 'Score: 0', {\n            fontSize: '24px',\n            color: '#ffffff'\n        });\n\n\n\n        // Instructions\n        const instructionText = this.add.text(width / 2, 30, '🎵 Press S-D-F-G-H-J-K to create platforms at different heights! 🎵', {\n            fontSize: '16px',\n            color: '#ecf0f1',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Key guide\n        this.add.text(width / 2, 60, 'S=Low → D → F → G → H → J → K=High', {\n            fontSize: '14px',\n            color: '#95a5a6',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Make instructions pulse to draw attention\n        this.tweens.add({\n            targets: instructionText,\n            alpha: 0.6,\n            duration: 1500,\n            yoyo: true,\n            repeat: -1\n        });\n\n        // Controls info\n        this.add.text(width - 16, 16, 'v0.0.4 | ESC: Menu | R: Restart', {\n            fontSize: '14px',\n            color: '#95a5a6'\n        }).setOrigin(1, 0);\n\n        // ESC key to return to menu\n        this.input.keyboard!.on('keydown-ESC', () => {\n            this.scene.start('MainMenu');\n        });\n\n        // R key to restart\n        this.input.keyboard!.on('keydown-R', () => {\n            this.scene.restart();\n        });\n\n        // Start the game\n        this.isGameRunning = true;\n        \n        // Camera follows character\n        this.cameras.main.startFollow(this.character, true, 0.1, 0.1);\n        this.cameras.main.setDeadzone(200, 100);\n\n        // Reset game state\n        this.score = 0;\n\n        // Don't start with any musical platform - wait for first key press\n    }\n\n    override update(): void {\n        if (!this.isGameRunning) return;\n\n        // Auto-run character forward - ALWAYS moving, never stops\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Force constant forward movement - override any physics that might stop it\n        characterBody.setVelocityX(MuseRunnerGame.GAME_CONSTANTS.CHARACTER_SPEED);\n        characterBody.setDragX(0); // No drag to slow down\n        characterBody.setFrictionX(0); // No friction from platforms\n\n        // Check for musical key presses - handle multiple keys, go to highest reachable\n        const pressedKeys: string[] = [];\n        Object.keys(this.gameKeys).forEach(key => {\n            const gameKey = this.gameKeys[key];\n            if (gameKey && Phaser.Input.Keyboard.JustDown(gameKey)) {\n                pressedKeys.push(key);\n            }\n        });\n\n        if (pressedKeys.length > 0) {\n            // Find the highest reachable key from the pressed keys\n            const targetKey = this.getHighestReachableKey(pressedKeys);\n            console.log(`Keys pressed: ${pressedKeys.join(',')}, going to: ${targetKey}`);\n            this.switchToKey(targetKey);\n        }\n\n        // Extend current platform as character moves\n        if (this.currentPlatform && this.currentKey) {\n            this.extendCurrentPlatform();\n        }\n\n        // Character speed increases over time (for future use)\n        // const dynamicSpeed = Math.min(200, 120 + (this.score / 100));\n\n        // Game over condition - only if character falls WAY off screen\n        if (this.character.y > this.cameras.main.height + 300) {\n            this.gameOver();\n        }\n\n        // Clean up old platforms\n        this.platforms.children.entries.forEach((platform: any) => {\n            if (platform.x < this.character.x - 400) {\n                platform.destroy();\n            }\n        });\n    }\n\n    private playNote(key: string): void {\n        const frequency = this.noteFrequencies[key];\n        if (!frequency) {\n            console.warn(`Unknown key: ${key}`);\n            return;\n        }\n        \n        console.log(`Playing note ${key} at ${frequency}Hz`);\n        \n        // Play musical note sound\n        this.playMusicalTone(frequency);\n        \n        // Visual feedback - change fill color\n        this.character.setFillStyle(0xf39c12);\n        this.time.delayedCall(200, () => {\n            this.character.setFillStyle(0x3498db); // Back to blue\n        });\n    }\n\n    private playMusicalTone(frequency: number): void {\n        try {\n            // Initialize audio context if needed\n            if (!this.audioContext) {\n                this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            }\n\n            // Create oscillator for the musical note\n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            // Set frequency and type\n            oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n            oscillator.type = 'sine'; // Pure tone\n            \n            // Set volume envelope (attack and decay)\n            gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n            gainNode.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.01);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);\n            \n            // Play the note\n            oscillator.start(this.audioContext.currentTime);\n            oscillator.stop(this.audioContext.currentTime + 0.5);\n            \n        } catch (error) {\n            console.log('Audio not available:', error);\n        }\n    }\n\n\n\n    private switchToKey(key: string): void {\n        // If switching to a different key (or first key press), make character jump\n        if (this.currentKey !== key) {\n            this.makeCharacterJump(key);\n        }\n\n        // End current platform and start new one\n        this.endCurrentPlatform();\n        this.startNewPlatform(key);\n        this.playNote(key);\n        \n        this.score += 10;\n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n    }\n\n    private startNewPlatform(key: string): void {\n        const { height } = this.cameras.main;\n        \n        // Start platform ahead of character for proper landing\n        this.platformStartX = this.character.x + 20; // Slightly ahead\n        const platformY = height + MuseRunnerGame.GAME_CONSTANTS.LEVEL_HEIGHTS[key as keyof typeof MuseRunnerGame.GAME_CONSTANTS.LEVEL_HEIGHTS];\n        const platformColor = MuseRunnerGame.GAME_CONSTANTS.LEVEL_COLORS[key as keyof typeof MuseRunnerGame.GAME_CONSTANTS.LEVEL_COLORS];\n        \n        this.currentPlatform = this.add.rectangle(\n            this.platformStartX + 80, \n            platformY, \n            MuseRunnerGame.GAME_CONSTANTS.PLATFORM_WIDTH, \n            MuseRunnerGame.GAME_CONSTANTS.PLATFORM_HEIGHT, \n            platformColor\n        );\n        this.physics.add.existing(this.currentPlatform, true);\n        this.platforms.add(this.currentPlatform);\n        \n        this.currentKey = key;\n        console.log(`Started ${key} platform at height ${platformY}`);\n    }\n\n    private extendCurrentPlatform(): void {\n        if (!this.currentPlatform) return;\n        \n        // Extend platform well ahead of character to ensure continuous running\n        const newWidth = this.character.x - this.platformStartX + MuseRunnerGame.GAME_CONSTANTS.PLATFORM_EXTENSION;\n        const newX = this.platformStartX + newWidth / 2;\n        \n        this.currentPlatform.width = Math.max(60, newWidth);\n        this.currentPlatform.x = newX;\n        \n        // Update physics body properly\n        const body = this.currentPlatform.body as Phaser.Physics.Arcade.StaticBody;\n        body.setSize(this.currentPlatform.width, this.currentPlatform.height);\n        body.updateFromGameObject();\n    }\n\n    private endCurrentPlatform(): void {\n        // Current platform stays in place, just stop extending it\n        this.currentPlatform = null;\n        this.currentKey = null;\n    }\n\n    private makeCharacterJump(newKey: string): void {\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Get current and target heights\n        const currentHeight = this.getCurrentCharacterLevel();\n        const targetLevel = this.getKeyLevel(newKey);\n        const levelDifference = targetLevel - currentHeight;\n        \n        console.log(`Moving from level ${currentHeight} to ${targetLevel} (${newKey})`);\n        \n        if (levelDifference <= 0) {\n            // Going down or same level - no jump needed, just fall/drop\n            console.log('Dropping down or staying level');\n            return;\n        } else if (levelDifference > MuseRunnerGame.GAME_CONSTANTS.MAX_JUMP_LEVELS) {\n            // Too high to reach - limit to max jump levels\n            const maxReachableLevel = currentHeight + MuseRunnerGame.GAME_CONSTANTS.MAX_JUMP_LEVELS;\n            const maxReachableKey = this.getLevelKey(maxReachableLevel);\n            console.log(`Too high! Can only reach level ${maxReachableLevel} (${maxReachableKey})`);\n            \n            // Create platform at max reachable height instead\n            this.endCurrentPlatform();\n            this.startNewPlatform(maxReachableKey);\n            \n            // Jump to max reachable height\n            const jumpVelocity = MuseRunnerGame.GAME_CONSTANTS.JUMP_BASE_VELOCITY - (MuseRunnerGame.GAME_CONSTANTS.MAX_JUMP_LEVELS * MuseRunnerGame.GAME_CONSTANTS.JUMP_LEVEL_MULTIPLIER);\n            characterBody.setVelocityY(jumpVelocity);\n            return;\n        } else {\n            // Normal jump - precise velocity for the height difference\n            const jumpVelocity = MuseRunnerGame.GAME_CONSTANTS.JUMP_BASE_VELOCITY - (levelDifference * MuseRunnerGame.GAME_CONSTANTS.JUMP_LEVEL_MULTIPLIER);\n            characterBody.setVelocityY(jumpVelocity);\n            console.log(`Jumping up ${levelDifference} levels with velocity ${jumpVelocity}`);\n        }\n    }\n\n    private getCurrentCharacterLevel(): number {\n        if (!this.currentKey) return 0; // Neutral level\n        return this.getKeyLevel(this.currentKey);\n    }\n\n    private getKeyLevel(key: string): number {\n        const levels: Record<string, number> = {\n            'S': 0, 'D': 1, 'F': 2, 'G': 3, 'H': 4, 'J': 5, 'K': 6\n        };\n        return levels[key] ?? 0;\n    }\n\n    private getLevelKey(level: number): string {\n        const keys = ['S', 'D', 'F', 'G', 'H', 'J', 'K'];\n        return keys[Math.min(level, 6)] || 'S';\n    }\n\n    private getHighestReachableKey(pressedKeys: string[]): string {\n        const currentLevel = this.getCurrentCharacterLevel();\n        const maxReachableLevel = currentLevel + MuseRunnerGame.GAME_CONSTANTS.MAX_JUMP_LEVELS;\n        \n        // Sort pressed keys by level (highest first)\n        const sortedKeys = pressedKeys.sort((a, b) => this.getKeyLevel(b) - this.getKeyLevel(a));\n        \n        // Find the highest key that's reachable\n        const reachableKey = sortedKeys.find(key => this.getKeyLevel(key) <= maxReachableLevel);\n        \n        // If no key is reachable, return the highest possible\n        return reachableKey ?? this.getLevelKey(maxReachableLevel);\n    }\n\n\n\n    private gameOver(): void {\n        this.isGameRunning = false;\n        \n        const { width, height } = this.cameras.main;\n        \n        // Stop camera follow\n        this.cameras.main.stopFollow();\n        \n        // Game over screen\n        const gameOverBg = this.add.rectangle(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2,\n            width,\n            height,\n            0x000000,\n            0.8\n        );\n        gameOverBg.setScrollFactor(0);\n        \n        this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 - 80,\n            'Game Over!',\n            {\n                fontSize: '48px',\n                color: '#e74c3c',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 - 20,\n            `Final Score: ${Math.floor(this.score)}`,\n            {\n                fontSize: '24px',\n                color: '#ffffff',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        const restartText = this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 + 30,\n            'Press R to restart or ESC for menu',\n            {\n                fontSize: '18px',\n                color: '#bdc3c7',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        // Pulsing restart text\n        this.tweens.add({\n            targets: restartText,\n            alpha: 0.5,\n            duration: 1000,\n            yoyo: true,\n            repeat: -1\n        });\n\n        // Send score to parent (Reddit)\n        if (window.parent) {\n            window.parent.postMessage({\n                type: 'GAME_OVER',\n                data: { finalScore: Math.floor(this.score) }\n            }, '*');\n        }\n    }\n}","import { Scene, GameObjects } from 'phaser';\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super('MainMenu');\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on('resize', () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once('pointerdown', () => {\n      this.scene.start('MuseRunnerGame');\n    });\n\n    this.input.keyboard!.on('keydown-SPACE', () => {\n      this.scene.start('MuseRunnerGame');\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add.text(0, 0, '🎵 Muse Runner 🏃‍♂️', {\n        fontSize: '48px',\n        color: '#ffffff',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add.text(0, 0, 'Rhythm Platformer', {\n        fontSize: '24px',\n        color: '#3498db',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add.text(0, 0, \n        'Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen', {\n        fontSize: '18px',\n        color: '#ecf0f1',\n        fontFamily: 'Arial, sans-serif',\n        align: 'center'\n      }).setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add.text(0, 0, 'Click to Start or Press SPACE', {\n        fontSize: '24px',\n        color: '#2ecc71',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add.text(0, 0, 'v0.0.4 - Built with Phaser.js for Reddit\\'s Community Games Challenge', {\n        fontSize: '14px',\n        color: '#95a5a6',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from 'phaser';\n\nexport class Preloader extends Scene {\n  constructor() {\n    super('Preloader');\n  }\n\n  init() {\n    //  We loaded this image in our Boot Scene, so we can display it here\n    this.add.image(512, 384, 'background');\n\n    //  A simple progress bar. This is the outline of the bar.\n    this.add.rectangle(512, 384, 468, 32).setStrokeStyle(1, 0xffffff);\n\n    //  This is the progress bar itself. It will increase in size from the left based on the % of progress.\n    const bar = this.add.rectangle(512 - 230, 384, 4, 28, 0xffffff);\n\n    //  Use the 'progress' event emitted by the LoaderPlugin to update the loading bar\n    this.load.on('progress', (progress: number) => {\n      //  Update the progress bar (our bar is 464px wide, so 100% = 464px)\n      bar.width = 4 + 460 * progress;\n    });\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath('assets');\n\n    this.load.image('logo', 'logo.png');\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start('MainMenu');\n  }\n}\n","import { Boot } from './scenes/Boot';\nimport { GameOver } from './scenes/GameOver';\nimport { MuseRunnerGame } from './scenes/MuseRunnerGame';\nimport { MainMenu } from './scenes/MainMenu';\nimport * as Phaser from 'phaser';\nimport { AUTO, Game } from 'phaser';\nimport { Preloader } from './scenes/Preloader';\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: 'game-container',\n  backgroundColor: '#2c3e50',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 600 },\n      debug: false\n    }\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from './game/main';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  StartGame('game-container');\n});\n"],"names":["Boot","Scene","constructor","super","preload","this","load","image","create","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","setOrigin","setAlpha","gameover_text","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","_MuseRunnerGame","S","D","F","G","H","J","K","platforms","group","neutralPlatform","rectangle","physics","existing","character","characterBody","body","setCollideWorldBounds","setBounce","setDragX","setFrictionX","setMaxVelocityX","setMaxVelocityY","collider","platform","platformBody","velocity","y","bottom","top","gameKeys","keyboard","addKey","Phaser","Input","Keyboard","KeyCodes","scoreText","instructionText","tweens","targets","alpha","duration","yoyo","repeat","restart","isGameRunning","startFollow","setDeadzone","score","update","setVelocityX","GAME_CONSTANTS","CHARACTER_SPEED","pressedKeys","Object","keys","forEach","key","gameKey","JustDown","push","length","targetKey","getHighestReachableKey","console","log","join","switchToKey","currentPlatform","currentKey","extendCurrentPlatform","gameOver","children","entries","x","destroy","playNote","frequency","noteFrequencies","playMusicalTone","setFillStyle","time","delayedCall","warn","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","stop","error","makeCharacterJump","endCurrentPlatform","startNewPlatform","setText","floor","platformStartX","platformY","LEVEL_HEIGHTS","platformColor","LEVEL_COLORS","PLATFORM_WIDTH","PLATFORM_HEIGHT","newWidth","PLATFORM_EXTENSION","newX","max","setSize","updateFromGameObject","newKey","currentHeight","getCurrentCharacterLevel","targetLevel","getKeyLevel","levelDifference","MAX_JUMP_LEVELS","maxReachableLevel","maxReachableKey","getLevelKey","jumpVelocity","JUMP_BASE_VELOCITY","JUMP_LEVEL_MULTIPLIER","setVelocityY","level","sort","a","b","find","stopFollow","scrollX","scrollY","setScrollFactor","restartText","parent","postMessage","data","finalScore","MuseRunnerGame","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","setStrokeStyle","bar","progress","setPath","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}