{"version":3,"file":"index-VCzuijUK.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/config/GameConstants.ts","../../../src/client/game/audio/AudioManager.ts","../../../src/client/game/input/InputManager.ts","../../../src/client/game/platform/PlatformManager.ts","../../../src/client/game/config/NoteMapping.ts","../../../src/client/game/audio/ChordDetector.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from \"phaser\";\n\nexport class Boot extends Scene {\n  constructor() {\n    super(\"Boot\");\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    // REMOVED: Background image that was persisting behind the game\n    // this.load.image(\"background\", \"assets/bg.png\");\n  }\n\n  create() {\n    this.scene.start(\"Preloader\");\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameOverText: Phaser.GameObjects.Text;\n\n  constructor() {\n    super(\"GameOver\");\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add\n      .image(0, 0, \"background\")\n      .setOrigin(0)\n      .setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameOverText = this.add\n      .text(0, 0, \"Game Over\", {\n        fontFamily: \"Arial Black\",\n        fontSize: \"64px\",\n        color: \"#ffffff\",\n        stroke: \"#000000\",\n        strokeThickness: 8,\n        align: \"center\",\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on(\"resize\", (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameOverText) {\n      this.gameOverText.setPosition(width / 2, height / 2);\n      this.gameOverText.setScale(scaleFactor);\n    }\n  }\n}\n","// Type aliases for better readability\nexport type GameKey = \"S\" | \"D\" | \"F\" | \"G\" | \"H\" | \"J\" | \"K\" | \"R\" | \"U\" | \"I\" | \"A\" | \"L\" | \";\" | \"'\";\n\n// Centralized game configuration constants\nexport const GAME_CONSTANTS = {\n  // Character configuration\n  CHARACTER: {\n    SPEED: 100,\n    WIDTH: 30,\n    HEIGHT: 40,\n    COLOR: 0x3498db,\n    VISUAL_FEEDBACK_COLOR: 0xf39c12,\n    VISUAL_FEEDBACK_DURATION: 200,\n  },\n\n  // Platform configuration\n  PLATFORMS: {\n    WIDTH: 120,\n    HEIGHT: 20,\n    EXTENSION_DISTANCE: 150,\n    AHEAD_OFFSET: 20,\n    CLEANUP_DISTANCE: 400,\n    MIN_LENGTH: 20, // Minimum platform length for quick taps\n    GROWTH_RATE: 100, // Pixels per second growth rate (matches character speed)\n  },\n\n  // Audio configuration\n  AUDIO: {\n    NOTE_DURATION: 0.5,\n    ATTACK_TIME: 0.01,\n    VOLUME: 0.3,\n  },\n\n  // Game mechanics\n  GAME: {\n    OVER_FALL_DISTANCE: 300,\n    SCORE_PER_PLATFORM: 10,\n    GROUND_OFFSET: 60,\n    CHARACTER_HEIGHT_LERP_SPEED: 0.08,\n    FALL_VELOCITY: 300,\n    CAMERA_DEADZONE_X: 200,\n    CAMERA_DEADZONE_Y: 100,\n    CAMERA_FOLLOW_LERP_X: 0.1,\n    CAMERA_FOLLOW_LERP_Y: 0.1,\n    // GROUND MECHANICS\n    GROUND_GRACE_PERIOD: 1000, // 1 second before score decay starts\n    SCORE_DECAY_RATE: 1, // -1 point per second\n    SCREEN_SHAKE_INTENSITY: 2, // Pixels\n    C2_FREQUENCY: 65.41, // C2 note frequency\n    DISSONANCE_START_TIME: 2000, // 2 seconds before dissonance starts\n  },\n  CHORD_DETECTION: {\n    ACCUMULATION_TIME: 1000, // ms\n    TRIAD_POINTS: 50,\n    SEVENTH_POINTS: 100,\n    POWER_CHORD_POINTS: 25,\n  },\n\n  // Level heights for each key (relative to camera height)\n  LEVEL_HEIGHTS: {\n    S: -80, // C - Ground level offset\n    R: -100, // D# - Between C and D\n    D: -120, // D - Level 2 offset\n    F: -160, // E - Level 3 offset\n    G: -200, // F - Level 4 offset\n    H: -240, // G - Level 5 offset\n    J: -280, // A - Level 6 offset\n    K: -320, // B - Highest level offset\n    // Additional chromatic notes\n    U: -260, // G# - Between G and A\n    I: -300, // Bb - Between A and B\n    // Additional octave keys (same note names for chord detection)\n    A: -40, // B3 (one octave below K)\n    L: -360, // C5 (one octave above S)\n    \";\": -400, // D5 (one octave above D)\n    \"'\": -440, // E5 (one octave above F)\n  } as Record<GameKey, number>,\n\n  // Level colors for each key\n  LEVEL_COLORS: {\n    S: 0xe74c3c, // Red (lowest)\n    D: 0xf39c12, // Orange\n    F: 0xf1c40f, // Yellow\n    G: 0x2ecc71, // Green\n    H: 0x3498db, // Blue\n    J: 0x9b59b6, // Purple\n    K: 0xe91e63, // Pink (highest)\n    // Chromatic notes\n    R: 0xff6b6b, // Light Red (D#)\n    U: 0x4ecdc4, // Teal (G#)\n    I: 0x45b7d1, // Light Blue (Bb)\n    // Additional octave keys\n    A: 0x8e44ad, // Dark Purple (B3)\n    L: 0xe67e22, // Dark Orange (C5)\n    \";\": 0x16a085, // Dark Teal (D5)\n    \"'\": 0x27ae60, // Dark Green (E5)\n  } as Record<GameKey, number>,\n\n  // Valid game keys\n  VALID_KEYS: [\"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"R\", \"U\", \"I\", \"A\", \"L\", \";\", \"'\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"] as readonly GameKey[],\n\n  // Error handling\n  ERROR_HANDLING: {\n    MANAGER_INIT_FAILED: \"Failed to initialize managers\",\n    INPUT_HANDLING_ERROR: \"Input handling error\",\n    PLATFORM_EXTENSION_ERROR: \"Platform extension error\",\n    CHARACTER_HEIGHT_ERROR: \"Character height update error\",\n    PLATFORM_CLEANUP_ERROR: \"Platform cleanup error\",\n    KEY_CHANGE_ERROR: \"Key change handling error\",\n    PLATFORM_START_ERROR: \"Failed to start platform\",\n    PLATFORM_END_ERROR: \"Failed to end platform\",\n  },\n} as const;\n","import { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\n// Note frequencies for each game key (C major scale + chromatic notes)\nconst NOTE_FREQUENCIES: Record<GameKey, number> = {\n  S: 261.63, // C4\n  D: 293.66, // D4\n  F: 329.63, // E4\n  G: 349.23, // F4\n  H: 392.0, // G4\n  J: 440.0, // A4\n  K: 493.88, // B4\n  // Chromatic notes\n  R: 311.13, // D#4 (Eb4)\n  U: 415.30, // G#4 (Ab4)\n  I: 466.16, // Bb4\n  // LOWER OCTAVE NOTES (same note names for chord detection)\n  A: 246.94, // B3 (one octave below K)\n  L: 523.25, // C5 (one octave above S)\n  \";\": 587.33, // D5 (one octave above D)\n  \"'\": 659.25, // E5 (one octave above F)\n};\n\nexport interface IAudioManager {\n  initialize(): void;\n  playNote(key: GameKey): void;\n  stopNote(key: GameKey): void;\n  isAudioAvailable(): boolean;\n  updateLFORate(delta: number): void;\n  updateChorusDepth(delta: number): void;\n  updateDelayVolume(delta: number): void;\n  updateReverbAmount(delta: number): void;\n  switchWaveform(): void;\n  // GROUND MECHANICS AUDIO\n  playGroundC2(): void;\n  stopGroundC2(): void;\n  playDissonance(intensity: number): void;\n  stopDissonance(): void;\n}\n\nexport class AudioManager implements IAudioManager {\n  private audioContext: AudioContext | null = null;\n  private isInitialized: boolean = false;\n  private audioAvailable: boolean = false;\n  \n  // SYNTHESIS PARAMETERS\n  private lfoRate: number = 2.0; // Hz - vibrato speed\n  private chorusDepth: number = 0.1; // 0-1 - detuning amount\n  private delayTime: number = 0.25; // seconds - FIXED delay time\n  private delayVolume: number = 0.3; // 0-1 - delay wet level\n  private reverbAmount: number = 0.3; // 0-1 - reverb wet/dry mix\n  private distortionAmount: number = 0.2; // 0-1 - wave shaping amount\n  private currentWaveform: OscillatorType = \"sawtooth\"; // CURRENT WAVEFORM\n  \n  // SUSTAIN SYSTEM\n  private activeNotes: Map<GameKey, {\n    oscillators: OscillatorNode[];\n    gainNode: GainNode;\n    isSustaining: boolean;\n  }> = new Map();\n  \n  // GROUND MECHANICS AUDIO\n  private groundC2Oscillators: OscillatorNode[] = [];\n  private groundC2Gain: GainNode | null = null;\n  private dissonanceOscillator: OscillatorNode | null = null;\n  private dissonanceGain: GainNode | null = null;\n\n  initialize(): void {\n    try {\n      // Initialize Web Audio API context\n      this.audioContext = new (window.AudioContext ||\n        (window as unknown as { webkitAudioContext: typeof AudioContext })\n          .webkitAudioContext)();\n      this.audioAvailable = true;\n      this.isInitialized = true;\n      // AudioManager initialized successfully\n    } catch (error) {\n      console.warn(\"Web Audio API not available:\", error);\n      this.audioAvailable = false;\n      this.isInitialized = true;\n    }\n  }\n\n  playNote(key: GameKey): void {\n    if (!this.isInitialized) {\n      console.warn(\"AudioManager not initialized\");\n      return;\n    }\n\n    if (!this.audioAvailable || !this.audioContext) {\n      // Graceful degradation - audio not available\n      return;\n    }\n\n    const frequency = NOTE_FREQUENCIES[key];\n    if (!frequency) {\n      console.warn(`Unknown key: ${key}`);\n      return;\n    }\n\n    // IF NOTE IS ALREADY PLAYING, DON'T START ANOTHER\n    if (this.activeNotes.has(key)) {\n      return;\n    }\n\n    try {\n      this.startSustainedNote(key, frequency);\n    } catch (error) {\n      console.warn(\"Failed to play note:\", error);\n    }\n  }\n\n  stopNote(key: GameKey): void {\n    const activeNote = this.activeNotes.get(key);\n    if (activeNote) {\n      // FADE OUT GRACEFULLY\n      const now = this.audioContext!.currentTime;\n      activeNote.gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.1);\n      \n      // STOP ALL OSCILLATORS AFTER FADE\n      setTimeout(() => {\n        activeNote.oscillators.forEach(osc => {\n          try {\n            osc.stop();\n            osc.disconnect();\n          } catch (e) {\n            // Oscillator might already be stopped\n          }\n        });\n        activeNote.gainNode.disconnect();\n        this.activeNotes.delete(key);\n      }, 100);\n    }\n  }\n\n  isAudioAvailable(): boolean {\n    return this.audioAvailable;\n  }\n\n  // ARROW KEY CONTROLS FOR SYNTHESIS PARAMETERS\n  updateLFORate(delta: number): void {\n    this.lfoRate = Math.max(0.1, Math.min(10, this.lfoRate + delta));\n    console.log(`LFO Rate: ${this.lfoRate.toFixed(1)} Hz`);\n  }\n\n  updateChorusDepth(delta: number): void {\n    this.chorusDepth = Math.max(0, Math.min(1, this.chorusDepth + delta));\n    console.log(`Chorus Depth: ${(this.chorusDepth * 100).toFixed(0)}%`);\n  }\n\n  updateDelayVolume(delta: number): void {\n    this.delayVolume = Math.max(0, Math.min(1, this.delayVolume + delta));\n    console.log(`Delay Volume: ${(this.delayVolume * 100).toFixed(0)}%`);\n  }\n\n  updateReverbAmount(delta: number): void {\n    this.reverbAmount = Math.max(0, Math.min(1, this.reverbAmount + delta));\n    console.log(`Reverb Amount: ${(this.reverbAmount * 100).toFixed(0)}%`);\n  }\n\n  switchWaveform(): void {\n    const waveforms: OscillatorType[] = [\"sawtooth\", \"square\", \"triangle\", \"sine\"];\n    const currentIndex = waveforms.indexOf(this.currentWaveform);\n    const nextIndex = (currentIndex + 1) % waveforms.length;\n    this.currentWaveform = waveforms[nextIndex];\n    console.log(`🎵 Waveform switched to: ${this.currentWaveform}`);\n  }\n\n  // GETTERS FOR SYNTHESIS PARAMETERS\n  getLFORate(): number { return this.lfoRate; }\n  getChorusDepth(): number { return this.chorusDepth; }\n  getDelayVolume(): number { return this.delayVolume; }\n  getReverbAmount(): number { return this.reverbAmount; }\n  getDistortionAmount(): number { return this.distortionAmount; }\n  getCurrentWaveform(): OscillatorType { return this.currentWaveform; }\n\n  private startSustainedNote(key: GameKey, frequency: number): void {\n    if (!this.audioContext) return;\n\n    // CREATE MAIN OSCILLATOR WITH LFO VIBRATO\n    const mainOsc = this.audioContext.createOscillator();\n    const lfoOsc = this.audioContext.createOscillator();\n    const lfoGain = this.audioContext.createGain();\n    \n    // LFO SETUP FOR VIBRATO\n    lfoOsc.frequency.setValueAtTime(this.lfoRate, this.audioContext.currentTime);\n    lfoOsc.type = \"sine\";\n    lfoGain.gain.setValueAtTime(2, this.audioContext.currentTime); // REDUCED VIBRATO DEPTH\n    \n    lfoOsc.connect(lfoGain);\n    lfoGain.connect(mainOsc.frequency);\n    \n    // MAIN OSCILLATOR SETUP\n    mainOsc.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n    mainOsc.type = this.currentWaveform;\n    \n    // CREATE CHORUS EFFECT (MULTIPLE DETUNED OSCILLATORS)\n    const chorusOsc1 = this.audioContext.createOscillator();\n    const chorusOsc2 = this.audioContext.createOscillator();\n    const chorusGain1 = this.audioContext.createGain();\n    const chorusGain2 = this.audioContext.createGain();\n    \n    // DETUNE CHORUS OSCILLATORS\n    const detuneAmount = this.chorusDepth * 10; // REDUCED DETUNING\n    chorusOsc1.frequency.setValueAtTime(frequency + detuneAmount, this.audioContext.currentTime);\n    chorusOsc2.frequency.setValueAtTime(frequency - detuneAmount, this.audioContext.currentTime);\n    chorusOsc1.type = this.currentWaveform;\n    chorusOsc2.type = this.currentWaveform;\n    \n    // CHORUS VOLUME (QUIETER THAN MAIN)\n    chorusGain1.gain.setValueAtTime(0.2, this.audioContext.currentTime); // REDUCED\n    chorusGain2.gain.setValueAtTime(0.2, this.audioContext.currentTime); // REDUCED\n    \n    // CREATE DELAY\n    const delay = this.audioContext.createDelay();\n    const delayGain = this.audioContext.createGain();\n    const delayFeedback = this.audioContext.createGain();\n    \n    delay.delayTime.setValueAtTime(this.delayTime, this.audioContext.currentTime);\n    delayGain.gain.setValueAtTime(this.delayVolume, this.audioContext.currentTime); // DELAY WET LEVEL (CONTROLLABLE)\n    delayFeedback.gain.setValueAtTime(0.2, this.audioContext.currentTime); // FEEDBACK AMOUNT\n    \n    // CREATE DISTORTION\n    const distortion = this.audioContext.createWaveShaper();\n    const distortionCurve = this.createDistortionCurve(this.distortionAmount * 0.5); // REDUCED DISTORTION\n    distortion.curve = distortionCurve;\n    distortion.oversample = \"2x\"; // REDUCED OVERSAMPLING\n    \n    // CREATE MAIN GAIN NODE\n    const mainGain = this.audioContext.createGain();\n    \n    // CONNECT AUDIO GRAPH\n    mainOsc.connect(mainGain);\n    chorusOsc1.connect(chorusGain1).connect(mainGain);\n    chorusOsc2.connect(chorusGain2).connect(mainGain);\n    \n    // SPLIT SIGNAL: DRY AND WET (DELAY)\n    const dryGain = this.audioContext.createGain();\n    const wetGain = this.audioContext.createGain();\n    \n    dryGain.gain.setValueAtTime(1 - this.delayVolume, this.audioContext.currentTime); // DRY LEVEL (CONTROLLABLE)\n    wetGain.gain.setValueAtTime(this.delayVolume, this.audioContext.currentTime); // WET LEVEL (CONTROLLABLE)\n    \n    mainGain.connect(dryGain);\n    mainGain.connect(wetGain);\n    \n    // DELAY CHAIN\n    wetGain.connect(delay);\n    delay.connect(delayGain);\n    delay.connect(delayFeedback);\n    delayFeedback.connect(delay); // FEEDBACK LOOP\n    delayGain.connect(distortion);\n    \n    // COMBINE DRY AND WET\n    const outputGain = this.audioContext.createGain();\n    dryGain.connect(outputGain);\n    distortion.connect(outputGain);\n    outputGain.connect(this.audioContext.destination);\n    \n    // SET SUSTAIN VOLUME\n    const now = this.audioContext.currentTime;\n    mainGain.gain.setValueAtTime(0, now);\n    mainGain.gain.linearRampToValueAtTime(GAME_CONSTANTS.AUDIO.VOLUME * 0.5, now + 0.01); // QUICK ATTACK\n    \n    // START ALL OSCILLATORS\n    mainOsc.start(now);\n    lfoOsc.start(now);\n    chorusOsc1.start(now);\n    chorusOsc2.start(now);\n    \n    // STORE ACTIVE NOTE\n    this.activeNotes.set(key, {\n      oscillators: [mainOsc, lfoOsc, chorusOsc1, chorusOsc2],\n      gainNode: mainGain,\n      isSustaining: true\n    });\n  }\n\n  private playMusicalTone(frequency: number): void {\n    if (!this.audioContext) return;\n\n    // CREATE MAIN OSCILLATOR WITH LFO VIBRATO\n    const mainOsc = this.audioContext.createOscillator();\n    const lfoOsc = this.audioContext.createOscillator();\n    const lfoGain = this.audioContext.createGain();\n    \n    // LFO SETUP FOR VIBRATO\n    lfoOsc.frequency.setValueAtTime(this.lfoRate, this.audioContext.currentTime);\n    lfoOsc.type = \"sine\";\n    lfoGain.gain.setValueAtTime(5, this.audioContext.currentTime); // 5Hz vibrato depth\n    \n    lfoOsc.connect(lfoGain);\n    lfoGain.connect(mainOsc.frequency);\n    \n    // MAIN OSCILLATOR SETUP\n    mainOsc.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n    mainOsc.type = \"sawtooth\"; // RICHER SOUND THAN SINE\n    \n    // CREATE CHORUS EFFECT (MULTIPLE DETUNED OSCILLATORS)\n    const chorusOsc1 = this.audioContext.createOscillator();\n    const chorusOsc2 = this.audioContext.createOscillator();\n    const chorusGain1 = this.audioContext.createGain();\n    const chorusGain2 = this.audioContext.createGain();\n    \n    // DETUNE CHORUS OSCILLATORS\n    const detuneAmount = this.chorusDepth * 20; // 0-20 cents detuning\n    chorusOsc1.frequency.setValueAtTime(frequency + detuneAmount, this.audioContext.currentTime);\n    chorusOsc2.frequency.setValueAtTime(frequency - detuneAmount, this.audioContext.currentTime);\n    chorusOsc1.type = \"sawtooth\";\n    chorusOsc2.type = \"sawtooth\";\n    \n    // CHORUS VOLUME (QUIETER THAN MAIN)\n    chorusGain1.gain.setValueAtTime(0.3, this.audioContext.currentTime);\n    chorusGain2.gain.setValueAtTime(0.3, this.audioContext.currentTime);\n    \n    // CREATE FILTER\n    const filter = this.audioContext.createBiquadFilter();\n    filter.type = \"lowpass\";\n    filter.frequency.setValueAtTime(this.filterFrequency, this.audioContext.currentTime);\n    filter.Q.setValueAtTime(1, this.audioContext.currentTime); // RESONANCE\n    \n    // CREATE DISTORTION\n    const distortion = this.audioContext.createWaveShaper();\n    const distortionCurve = this.createDistortionCurve(this.distortionAmount);\n    distortion.curve = distortionCurve;\n    distortion.oversample = \"4x\";\n    \n    // CREATE REVERB USING DELAY (FIXED FEEDBACK)\n    const reverbDelay = this.audioContext.createDelay();\n    const reverbGain = this.audioContext.createGain();\n    const reverbFeedback = this.audioContext.createGain();\n    \n    reverbDelay.delayTime.setValueAtTime(0.1, this.audioContext.currentTime); // SHORTER DELAY\n    reverbGain.gain.setValueAtTime(this.reverbAmount * 0.3, this.audioContext.currentTime); // REDUCED GAIN\n    reverbFeedback.gain.setValueAtTime(0.1, this.audioContext.currentTime); // MUCH LOWER FEEDBACK\n    \n    // CREATE MAIN GAIN NODE\n    const mainGain = this.audioContext.createGain();\n    \n    // CONNECT AUDIO GRAPH\n    mainOsc.connect(mainGain);\n    chorusOsc1.connect(chorusGain1).connect(mainGain);\n    chorusOsc2.connect(chorusGain2).connect(mainGain);\n    \n    mainGain.connect(filter);\n    filter.connect(distortion);\n    \n    // SPLIT SIGNAL: DRY AND WET (REVERB)\n    const dryGain = this.audioContext.createGain();\n    const wetGain = this.audioContext.createGain();\n    \n    dryGain.gain.setValueAtTime(1 - this.reverbAmount, this.audioContext.currentTime);\n    wetGain.gain.setValueAtTime(this.reverbAmount, this.audioContext.currentTime);\n    \n    distortion.connect(dryGain);\n    distortion.connect(wetGain);\n    \n    // REVERB CHAIN (FIXED ROUTING)\n    wetGain.connect(reverbDelay);\n    reverbDelay.connect(reverbFeedback);\n    reverbFeedback.connect(reverbDelay); // CONTROLLED FEEDBACK\n    reverbDelay.connect(outputGain); // DIRECT TO OUTPUT, NO LOOP\n    \n    // COMBINE DRY AND WET\n    const outputGain = this.audioContext.createGain();\n    dryGain.connect(outputGain);\n    wetGain.connect(outputGain);\n    outputGain.connect(this.audioContext.destination);\n    \n    // ENVELOPE (ADSR)\n    const now = this.audioContext.currentTime;\n    const attackTime = 0.01;\n    const decayTime = 0.1;\n    const sustainLevel = 0.7;\n    const releaseTime = 0.3;\n    const noteDuration = GAME_CONSTANTS.AUDIO.NOTE_DURATION;\n    \n    // ATTACK\n    outputGain.gain.setValueAtTime(0, now);\n    outputGain.gain.linearRampToValueAtTime(GAME_CONSTANTS.AUDIO.VOLUME, now + attackTime);\n    \n    // DECAY\n    outputGain.gain.linearRampToValueAtTime(\n      GAME_CONSTANTS.AUDIO.VOLUME * sustainLevel, \n      now + attackTime + decayTime\n    );\n    \n    // RELEASE\n    outputGain.gain.exponentialRampToValueAtTime(\n      0.001, \n      now + noteDuration\n    );\n    \n    // START ALL OSCILLATORS\n    mainOsc.start(now);\n    lfoOsc.start(now);\n    chorusOsc1.start(now);\n    chorusOsc2.start(now);\n    \n    // STOP ALL OSCILLATORS\n    const stopTime = now + noteDuration;\n    mainOsc.stop(stopTime);\n    lfoOsc.stop(stopTime);\n    chorusOsc1.stop(stopTime);\n    chorusOsc2.stop(stopTime);\n  }\n  \n  private createDistortionCurve(amount: number): Float32Array {\n    const samples = 44100;\n    const curve = new Float32Array(samples);\n    const deg = Math.PI / 180;\n    \n    for (let i = 0; i < samples; i++) {\n      const x = (i * 2) / samples - 1;\n      curve[i] = ((3 + amount) * x * 20 * deg) / (Math.PI + amount * Math.abs(x));\n    }\n    \n    return curve;\n  }\n  \n  // GROUND MECHANICS AUDIO METHODS\n  playGroundC2(): void {\n    if (!this.audioContext || this.groundC2Oscillators.length > 0) return;\n    \n    // CREATE RICH PAD-LIKE C2 BASS WITH MULTIPLE OSCILLATORS\n    this.groundC2Gain = this.audioContext.createGain();\n    const now = this.audioContext.currentTime;\n    \n    // FUNDAMENTAL C2 (65.41 Hz) - SINE WAVE\n    const fundamental = this.audioContext.createOscillator();\n    fundamental.frequency.setValueAtTime(GAME_CONSTANTS.GAME.C2_FREQUENCY, now);\n    fundamental.type = \"sine\";\n    \n    // OCTAVE C3 (130.81 Hz) - SAWTOOTH FOR RICHNESS\n    const octave = this.audioContext.createOscillator();\n    octave.frequency.setValueAtTime(GAME_CONSTANTS.GAME.C2_FREQUENCY * 2, now);\n    octave.type = \"sawtooth\";\n    \n    // FIFTH G2 (98.00 Hz) - TRIANGLE FOR WARMTH\n    const fifth = this.audioContext.createOscillator();\n    fifth.frequency.setValueAtTime(GAME_CONSTANTS.GAME.C2_FREQUENCY * 1.5, now);\n    fifth.type = \"triangle\";\n    \n    // SUB-BASS C1 (32.70 Hz) - SINE FOR DEEP FOUNDATION\n    const subBass = this.audioContext.createOscillator();\n    subBass.frequency.setValueAtTime(GAME_CONSTANTS.GAME.C2_FREQUENCY * 0.5, now);\n    subBass.type = \"sine\";\n    \n    // CREATE INDIVIDUAL GAIN NODES FOR MIXING\n    const fundamentalGain = this.audioContext.createGain();\n    const octaveGain = this.audioContext.createGain();\n    const fifthGain = this.audioContext.createGain();\n    const subBassGain = this.audioContext.createGain();\n    \n    // SET VOLUME LEVELS FOR RICH PAD SOUND\n    fundamentalGain.gain.setValueAtTime(0.4, now); // FUNDAMENTAL\n    octaveGain.gain.setValueAtTime(0.2, now); // OCTAVE (QUIETER)\n    fifthGain.gain.setValueAtTime(0.3, now); // FIFTH\n    subBassGain.gain.setValueAtTime(0.3, now); // SUB-BASS\n    \n    // CONNECT OSCILLATORS TO THEIR GAINS\n    fundamental.connect(fundamentalGain);\n    octave.connect(octaveGain);\n    fifth.connect(fifthGain);\n    subBass.connect(subBassGain);\n    \n    // CONNECT ALL TO MAIN GAIN\n    fundamentalGain.connect(this.groundC2Gain);\n    octaveGain.connect(this.groundC2Gain);\n    fifthGain.connect(this.groundC2Gain);\n    subBassGain.connect(this.groundC2Gain);\n    \n    // CONNECT TO AUDIO CONTEXT\n    this.groundC2Gain.connect(this.audioContext.destination);\n    \n    // SET MAIN VOLUME (QUIET, SUSTAINED)\n    this.groundC2Gain.gain.setValueAtTime(0, now);\n    this.groundC2Gain.gain.linearRampToValueAtTime(GAME_CONSTANTS.AUDIO.VOLUME * 0.4, now + 0.8);\n    \n    // START ALL OSCILLATORS\n    fundamental.start(now);\n    octave.start(now);\n    fifth.start(now);\n    subBass.start(now);\n    \n    // STORE OSCILLATORS\n    this.groundC2Oscillators = [fundamental, octave, fifth, subBass];\n  }\n  \n  stopGroundC2(): void {\n    if (this.groundC2Oscillators.length > 0 && this.groundC2Gain) {\n      const now = this.audioContext!.currentTime;\n      this.groundC2Gain.gain.exponentialRampToValueAtTime(0.001, now + 0.3);\n      \n      setTimeout(() => {\n        try {\n          // STOP ALL OSCILLATORS\n          this.groundC2Oscillators.forEach(osc => {\n            osc.stop();\n            osc.disconnect();\n          });\n          this.groundC2Gain!.disconnect();\n        } catch (e) {\n          // Oscillators might already be stopped\n        }\n        this.groundC2Oscillators = [];\n        this.groundC2Gain = null;\n      }, 300);\n    }\n  }\n  \n  playDissonance(intensity: number): void {\n    if (!this.audioContext || this.dissonanceOscillator) return;\n    \n    // CREATE DISSONANT OSCILLATOR (TRITONE ABOVE C2)\n    this.dissonanceOscillator = this.audioContext.createOscillator();\n    this.dissonanceGain = this.audioContext.createGain();\n    \n    // TRITONE FREQUENCY (C2 + 6 semitones = F#2)\n    const dissonanceFreq = GAME_CONSTANTS.GAME.C2_FREQUENCY * Math.pow(2, 6/12);\n    this.dissonanceOscillator.frequency.setValueAtTime(dissonanceFreq, this.audioContext.currentTime);\n    this.dissonanceOscillator.type = \"sawtooth\"; // HARSH, DISSONANT\n    \n    // CONNECT TO AUDIO CONTEXT\n    this.dissonanceOscillator.connect(this.dissonanceGain);\n    this.dissonanceGain.connect(this.audioContext.destination);\n    \n    // SET VOLUME BASED ON INTENSITY\n    const now = this.audioContext.currentTime;\n    this.dissonanceGain.gain.setValueAtTime(0, now);\n    this.dissonanceGain.gain.linearRampToValueAtTime(intensity * GAME_CONSTANTS.AUDIO.VOLUME * 0.2, now + 0.3);\n    \n    // START OSCILLATOR\n    this.dissonanceOscillator.start(now);\n  }\n  \n  stopDissonance(): void {\n    if (this.dissonanceOscillator && this.dissonanceGain) {\n      const now = this.audioContext!.currentTime;\n      this.dissonanceGain.gain.exponentialRampToValueAtTime(0.001, now + 0.3);\n      \n      setTimeout(() => {\n        try {\n          this.dissonanceOscillator!.stop();\n          this.dissonanceOscillator!.disconnect();\n          this.dissonanceGain!.disconnect();\n        } catch (e) {\n          // Oscillator might already be stopped\n        }\n        this.dissonanceOscillator = null;\n        this.dissonanceGain = null;\n      }, 300);\n    }\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport interface IInputManager {\n  initialize(): void;\n  update(currentTime: number): { keyStateChanged: boolean };\n  getInputState(): { pressedKeys: Set<string> };\n  getArrowKeyState(): { up: boolean; down: boolean; left: boolean; right: boolean };\n}\n\nexport class InputManager implements IInputManager {\n  private scene: Scene;\n  private currentlyPressedKeys: Set<string> = new Set();\n  private previouslyPressedKeys: Set<string> = new Set();\n  private isInitialized: boolean = false;\n  private keyObjects: Map<string, Phaser.Input.Keyboard.Key> = new Map();\n  private arrowKeys: {\n    up: Phaser.Input.Keyboard.Key | null;\n    down: Phaser.Input.Keyboard.Key | null;\n    left: Phaser.Input.Keyboard.Key | null;\n    right: Phaser.Input.Keyboard.Key | null;\n  } = { up: null, down: null, left: null, right: null };\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  initialize(): void {\n    if (!this.scene.input.keyboard) {\n      console.warn(\"Keyboard input not available\");\n      return;\n    }\n\n    // Create key objects once during initialization\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      if (key === \";\") {\n        this.keyObjects.set(key, this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SEMICOLON));\n      } else if (key === \"'\") {\n        this.keyObjects.set(key, this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.QUOTES));\n      } else {\n        this.keyObjects.set(key, this.scene.input.keyboard!.addKey(key));\n      }\n    });\n\n    // INITIALIZE ARROW KEYS FOR SYNTHESIS CONTROLS\n    this.arrowKeys.up = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.UP);\n    this.arrowKeys.down = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.DOWN);\n    this.arrowKeys.left = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.LEFT);\n    this.arrowKeys.right = this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.RIGHT);\n\n    // ADDITIONAL SYNTHESIS CONTROLS (NUMBER KEYS)\n    this.keyObjects.set(\"1\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.ONE));\n    this.keyObjects.set(\"2\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.TWO));\n    this.keyObjects.set(\"3\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.THREE));\n    this.keyObjects.set(\"4\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.FOUR));\n    this.keyObjects.set(\"5\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.FIVE));\n    this.keyObjects.set(\"6\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SIX));\n    this.keyObjects.set(\"7\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SEVEN));\n    this.keyObjects.set(\"8\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.EIGHT));\n    this.keyObjects.set(\"0\", this.scene.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.ZERO));\n\n    this.isInitialized = true;\n    // InputManager initialized successfully\n  }\n\n  update(_currentTime: number): { keyStateChanged: boolean } {\n    if (!this.isInitialized || !this.scene.input.keyboard) {\n      return { keyStateChanged: false };\n    }\n\n    // Store previous state\n    this.previouslyPressedKeys = new Set(this.currentlyPressedKeys);\n\n    // Clear current state\n    this.currentlyPressedKeys.clear();\n\n    // Check each valid game key using pre-created key objects\n    GAME_CONSTANTS.VALID_KEYS.forEach((key) => {\n      const keyObject = this.keyObjects.get(key);\n      if (keyObject && keyObject.isDown) {\n        this.currentlyPressedKeys.add(key);\n      }\n    });\n\n    // CHECK NUMBER KEYS FOR SYNTHESIS CONTROLS\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"0\"].forEach((key) => {\n      const keyObject = this.keyObjects.get(key);\n      if (keyObject && keyObject.isDown) {\n        this.currentlyPressedKeys.add(key);\n      }\n    });\n\n    // Determine if key state changed\n    const keyStateChanged = this.hasKeyStateChanged();\n\n    return { keyStateChanged };\n  }\n\n  getInputState(): { pressedKeys: Set<string> } {\n    return {\n      pressedKeys: new Set(this.currentlyPressedKeys),\n    };\n  }\n\n  getArrowKeyState(): { up: boolean; down: boolean; left: boolean; right: boolean } {\n    return {\n      up: this.arrowKeys.up?.isDown || false,\n      down: this.arrowKeys.down?.isDown || false,\n      left: this.arrowKeys.left?.isDown || false,\n      right: this.arrowKeys.right?.isDown || false,\n    };\n  }\n\n  private hasKeyStateChanged(): boolean {\n    // Check if the sets are different\n    if (this.currentlyPressedKeys.size !== this.previouslyPressedKeys.size) {\n      return true;\n    }\n\n    // Check if any key in current set is not in previous set\n    for (const key of this.currentlyPressedKeys) {\n      if (!this.previouslyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    // Check if any key in previous set is not in current set\n    for (const key of this.previouslyPressedKeys) {\n      if (!this.currentlyPressedKeys.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Helper method to check if a key is a valid game key\n  isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\ninterface PlatformData {\n  rectangle: Phaser.GameObjects.Rectangle;\n  startX: number;\n  key: GameKey;\n  startTime: number;\n  isGrowing: boolean;\n  // VISUAL EFFECTS\n  glowEffect?: Phaser.GameObjects.Rectangle;\n  noteSymbol?: Phaser.GameObjects.Text;\n  pulseTween?: Phaser.Tweens.Tween;\n}\n\nexport interface IPlatformManager {\n  initialize(): void;\n  startNewPlatform(key: GameKey, startX: number): void;\n  endPlatform(key: GameKey): void;\n  extendActivePlatforms(characterX: number): void;\n  getHighestActiveKey(): GameKey | null;\n  hasActivePlatforms(): boolean;\n  cleanupOldPlatforms(characterX: number): void;\n  getActivePlatforms(): Map<string, PlatformData>;\n  getPlatformsGroup(): Phaser.GameObjects.Group;\n}\n\nexport class PlatformManager implements IPlatformManager {\n  private scene: Scene;\n  private activePlatforms: Map<string, PlatformData> = new Map();\n  private platformsGroup: Phaser.GameObjects.Group;\n  private isInitialized: boolean = false;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n    this.platformsGroup = this.scene.add.group();\n  }\n\n  initialize(): void {\n    this.isInitialized = true;\n    // PlatformManager initialized successfully\n  }\n\n  startNewPlatform(key: GameKey, startX: number): void {\n    if (!this.isInitialized) {\n      console.warn(\"PlatformManager not initialized\");\n      return;\n    }\n\n    // Don't create duplicate platforms for the same key\n    if (this.activePlatforms.has(key)) {\n      return;\n    }\n\n    const { height } = this.scene.cameras.main;\n    const platformY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n    const platformColor = GAME_CONSTANTS.LEVEL_COLORS[key];\n\n    // CREATE GLOW EFFECT (BEHIND PLATFORM)\n    const glowEffect = this.scene.add.rectangle(\n      startX + GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET,\n      platformY,\n      GAME_CONSTANTS.PLATFORMS.MIN_LENGTH + 20, // SLIGHTLY LARGER\n      GAME_CONSTANTS.PLATFORMS.HEIGHT + 10, // SLIGHTLY TALLER\n      platformColor,\n      0.3 // TRANSPARENT\n    );\n    glowEffect.setStrokeStyle(3, platformColor, 0.6);\n\n    // CREATE MAIN PLATFORM WITH GRADIENT EFFECT\n    const platform = this.scene.add.rectangle(\n      startX + GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET,\n      platformY,\n      GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n      GAME_CONSTANTS.PLATFORMS.HEIGHT,\n      platformColor,\n    );\n    \n    // ADD GRADIENT OVERLAY\n    const gradientOverlay = this.scene.add.rectangle(\n      startX + GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET,\n      platformY - 2, // SLIGHTLY ABOVE\n      GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n      GAME_CONSTANTS.PLATFORMS.HEIGHT / 2,\n      0xFFFFFF, // WHITE GRADIENT\n      0.2\n    );\n    \n    // ADD MUSICAL NOTE SYMBOL\n    const noteSymbol = this.scene.add.text(\n      startX + GAME_CONSTANTS.PLATFORMS.AHEAD_OFFSET,\n      platformY,\n      this.getNoteSymbol(key),\n      {\n        fontSize: \"16px\",\n        color: \"#FFFFFF\",\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#000000\",\n        strokeThickness: 2,\n      }\n    );\n    noteSymbol.setOrigin(0.5);\n\n    // Add to physics (optional, for future collision detection)\n    this.scene.physics.add.existing(platform, true); // true = static body\n\n    // CREATE PULSING ANIMATION\n    const pulseTween = this.scene.tweens.add({\n      targets: [platform, glowEffect, gradientOverlay],\n      scaleX: 1.05,\n      scaleY: 1.05,\n      duration: 1000,\n      yoyo: true,\n      repeat: -1,\n      ease: \"Sine.easeInOut\"\n    });\n\n    // Store platform data\n    const platformData: PlatformData = {\n      rectangle: platform,\n      startX: startX,\n      key: key,\n      startTime: this.scene.time.now,\n      isGrowing: true,\n      glowEffect: glowEffect,\n      noteSymbol: noteSymbol,\n      pulseTween: pulseTween,\n    };\n\n    this.activePlatforms.set(key, platformData);\n    this.platformsGroup.add(platform);\n    this.platformsGroup.add(glowEffect);\n    this.platformsGroup.add(gradientOverlay);\n    this.platformsGroup.add(noteSymbol);\n\n    // Platform created for key at specified height\n  }\n\n  private getNoteSymbol(key: GameKey): string {\n    const noteSymbols: Record<GameKey, string> = {\n      S: \"♪\", // C\n      D: \"♫\", // D  \n      F: \"♪\", // E\n      G: \"♫\", // F\n      H: \"♪\", // G\n      J: \"♫\", // A\n      K: \"♪\", // B\n      R: \"♯\", // D#\n      U: \"♯\", // G#\n      I: \"♭\", // Bb\n      A: \"♪\", // B3\n      L: \"♫\", // C5\n      \";\": \"♪\", // D5\n      \"'\": \"♫\", // E5\n    };\n    return noteSymbols[key] || \"♪\";\n  }\n\n  endPlatform(key: GameKey): void {\n    const platformData = this.activePlatforms.get(key);\n    if (!platformData) {\n      return;\n    }\n\n    // STOP PULSING ANIMATION\n    if (platformData.pulseTween) {\n      platformData.pulseTween.stop();\n    }\n\n    // FADE OUT VISUAL EFFECTS\n    this.scene.tweens.add({\n      targets: [platformData.rectangle, platformData.glowEffect, platformData.noteSymbol],\n      alpha: 0.3,\n      duration: 500,\n      ease: \"Power2\"\n    });\n\n    // Stop growing the platform\n    platformData.isGrowing = false;\n    \n    // Remove from active platforms but keep the visual platform\n    this.activePlatforms.delete(key);\n    // Platform ended for key\n  }\n\n  extendActivePlatforms(characterX: number): void {\n    this.activePlatforms.forEach((platformData, _key) => {\n      if (!platformData.isGrowing) return;\n      \n      const platform = platformData.rectangle;\n      \n      // Calculate how far the character has moved since platform creation\n      const distanceMoved = characterX - platformData.startX;\n      \n      // Platform should extend to keep up with character movement\n      const newWidth = Math.max(\n        GAME_CONSTANTS.PLATFORMS.MIN_LENGTH,\n        GAME_CONSTANTS.PLATFORMS.MIN_LENGTH + distanceMoved\n      );\n      \n      // Update platform size and position\n      const leftEdge = platform.x - platform.width / 2;\n      const newCenterX = leftEdge + newWidth / 2;\n      \n      platform.setSize(newWidth, platform.height);\n      platform.setPosition(newCenterX, platform.y);\n    });\n  }\n\n  getHighestActiveKey(): GameKey | null {\n    if (this.activePlatforms.size === 0) {\n      return null;\n    }\n\n    // Find the key with the highest level (lowest Y value)\n    let highestKey: GameKey | null = null;\n    let highestY = Number.POSITIVE_INFINITY;\n\n    this.activePlatforms.forEach((_platformData, key) => {\n      const levelHeight = GAME_CONSTANTS.LEVEL_HEIGHTS[key as GameKey];\n      if (levelHeight < highestY) {\n        highestY = levelHeight;\n        highestKey = key as GameKey;\n      }\n    });\n\n    return highestKey;\n  }\n\n  hasActivePlatforms(): boolean {\n    return this.activePlatforms.size > 0;\n  }\n\n  cleanupOldPlatforms(characterX: number): void {\n    const platformsToRemove: Phaser.GameObjects.Rectangle[] = [];\n\n    // Check all platforms in the group, not just active ones\n    this.platformsGroup.children.entries.forEach((platform) => {\n      const rect = platform as Phaser.GameObjects.Rectangle;\n      const platformRightEdge = rect.x + rect.width / 2;\n\n      // Remove platforms that are far behind the character\n      if (\n        platformRightEdge <\n        characterX - GAME_CONSTANTS.PLATFORMS.CLEANUP_DISTANCE\n      ) {\n        platformsToRemove.push(rect);\n      }\n    });\n\n    // Remove old platforms\n    platformsToRemove.forEach((platform) => {\n      this.platformsGroup.remove(platform);\n      platform.destroy();\n    });\n\n    // Old platforms cleaned up\n  }\n\n  getActivePlatforms(): Map<string, PlatformData> {\n    return new Map(this.activePlatforms);\n  }\n\n  getPlatformsGroup(): Phaser.GameObjects.Group {\n    return this.platformsGroup;\n  }\n\n  // Helper method to get level height for a key\n  getLevelHeight(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_HEIGHTS[key];\n  }\n\n  // Helper method to get level color for a key\n  getLevelColor(key: GameKey): number {\n    return GAME_CONSTANTS.LEVEL_COLORS[key];\n  }\n}\n","// Note mapping system - maps keyboard keys to musical notes\nexport const NOTE_MAPPING = {\n  // Keyboard key -> Musical note\n  S: \"C\",  // C (Root)\n  D: \"D\",  // D (2nd)\n  F: \"E\",  // E (3rd)\n  G: \"F\",  // F (4th)\n  H: \"G\",  // G (5th)\n  J: \"A\",  // A (6th)\n  K: \"B\",  // B (7th)\n  // Chromatic notes\n  R: \"D#\", // D# (Sharp 2nd)\n  U: \"G#\", // G# (Sharp 5th)\n  I: \"Bb\", // Bb (Flat 7th)\n  // Additional octave keys (same note names for chord detection)\n  A: \"B\",  // B (same as K for chord detection)\n  L: \"C\",  // C (same as S for chord detection)\n  \";\": \"D\", // D (same as D for chord detection)\n  \"'\": \"E\", // E (same as F for chord detection)\n} as const;\n\n// Reverse mapping - Musical note -> Keyboard key\nexport const KEY_MAPPING = {\n  C: \"S\",\n  D: \"D\", \n  E: \"F\",\n  F: \"G\",\n  G: \"H\",\n  A: \"J\",\n  B: \"K\",\n  // Chromatic notes\n  \"D#\": \"R\",\n  \"G#\": \"U\",\n  \"Bb\": \"I\",\n} as const;\n\n// ALL COMMON CHORDS IN THE C MAJOR KEY (NOTES SORTED ALPHABETICALLY)\nexport const CHORD_DEFINITIONS = {\n    // ----------------------------\n    // TRIADS (3 NOTES) - 50 POINTS\n    // ----------------------------\n    \"C,E,G\": { name: \"C Major (I)\", points: 50 },\n    \"A,D,F\": { name: \"D Minor (ii)\", points: 50 },\n    \"B,E,G\": { name: \"E Minor (iii)\", points: 50 },\n    \"A,C,F\": { name: \"F Major (IV)\", points: 50 },\n    \"B,D,G\": { name: \"G Major (V)\", points: 50 },\n    \"A,C,E\": { name: \"A Minor (vi)\", points: 50 },\n    \"B,D,F\": { name: \"B Diminished (vii°)\", points: 50 },\n  \n    // ----------------------------\n    // SEVENTHS (4 NOTES) - 100 POINTS\n    // ----------------------------\n    \"B,C,E,G\": { name: \"C Major 7 (IΔ7)\", points: 100 },\n    \"A,C,D,F\": { name: \"D Minor 7 (ii7)\", points: 100 },\n    \"B,D,E,G\": { name: \"E Minor 7 (iii7)\", points: 100 },\n    \"A,C,E,F\": { name: \"F Major 7 (IVΔ7)\", points: 100 },\n    \"B,D,F,G\": { name: \"G Dominant 7 (V7)\", points: 100 },\n    \"A,C,E,G\": { name: \"A Minor 7 (vi7)\", points: 100 },\n    \"A,B,D,F\": { name: \"B Half-Diminished 7 (viiø7)\", points: 100 },\n  \n    // ----------------------------\n    // EXTENDED CHORDS - 150 POINTS\n    // ----------------------------\n    \"B,C,D,E,G\": { name: \"C Major 9\", points: 150 },\n    \"A,C,D,E,F\": { name: \"D Minor 9\", points: 150 },\n    \"A,B,D,F,G\": { name: \"G9 (Dominant 9)\", points: 150 },\n    \"A,B,C,E,G\": { name: \"A Minor 9\", points: 150 },\n  \n    // ----------------------------\n    // SUSPENDED CHORDS - 50 POINTS\n    // ----------------------------\n    \"C,F,G\": { name: \"Csus4\", points: 50 },\n    \"C,D,G\": { name: \"Csus2\", points: 50 },\n    \"A,D,G\": { name: \"Dsus4\", points: 50 },\n  \n    // ----------------------------\n    // ADD CHORDS - 75 POINTS\n    // ----------------------------\n    \"C,D,E,G\": { name: \"Cadd9\", points: 75 },\n  \n    // ----------------------------\n    // POWER CHORDS (5ths) - 25 POINTS\n    // ----------------------------\n    \"C,G\": { name: \"C5\", points: 25 },\n    \"A,D\": { name: \"D5\", points: 25 },\n    \"B,E\": { name: \"E5\", points: 25 },\n    \"C,F\": { name: \"F5\", points: 25 },\n    \"D,G\": { name: \"G5\", points: 25 },\n    \"A,E\": { name: \"A5\", points: 25 },\n    \"B,F\": { name: \"B5\", points: 25 },\n  } as const;\n  \n// C MAJOR + CHROMATIC EXTENSIONS (Bb, D#, G# INCLUDED, NOTES SORTED ALPHABETICALLY)\nexport const CHORD_DEFINITIONS_EXTENDED = {\n    // ----------------------------\n    // CHROMATIC TRIADS - 50 POINTS\n    // ----------------------------\n    \"A,C,D#\": { name: \"A Diminished (viio/iii)\", points: 50 },\n    \"A,C#,E\": { name: \"A Major (V/ii)\", points: 50 },\n    \"A,D,F#\": { name: \"D Major (V/V)\", points: 50 },\n    \"A#,C#,E\": { name: \"A# Diminished (viio/bII)\", points: 50 },\n    \"A#,C,D,F\": { name: \"F Minor (iv)\", points: 50 },\n    \"A#,F,G#\": { name: \"F Augmented (IV+)\", points: 50 },\n    \"A#,D,F\": { name: \"Bb Major (bVII)\", points: 50 },\n    \"A#,D,G\": { name: \"G Minor (v)\", points: 50 },\n    \"A#,D,G#\": { name: \"Ab Major (bVI)\", points: 50 },\n    \"B,D#,G#\": { name: \"G# Minor (iii/vi)\", points: 50 },\n    \"C,D#,G\": { name: \"C Minor (i)\", points: 50 },\n    \"A#,C,D#,G\": { name: \"C Minor 7 (i7)\", points: 100 },\n    \"C,E,G#\": { name: \"C Augmented (I+)\", points: 50 },\n    \"B,C,E,G#\": { name: \"C Augmented Major 7 (I+Δ7)\", points: 100 },\n    \"C#,E,G#\": { name: \"C# Diminished (viio/ii)\", points: 50 },\n    \"C#,F,G#\": { name: \"C# Minor (ii/ii)\", points: 50 },\n    \"B,C#,F,G#\": { name: \"C# Minor 7 (ii7/ii)\", points: 100 },\n    \"D,F,G#\": { name: \"D Augmented (II+)\", points: 50 },\n    \"A#,D#,G\": { name: \"Eb Minor (biii)\", points: 50 },\n    \"B,D#,G\": { name: \"D# Diminished\", points: 50 },\n    \"B,E,G#\": { name: \"E Major (III)\", points: 50 },\n    \"B,D,E,G#\": { name: \"E Dominant 7 (V7/vi)\", points: 100 },\n    \"C,F,G#\": { name: \"F Augmented (IV+)\", points: 50 },\n    \"A#,C,F\": { name: \"F Minor (iv)\", points: 50 },\n    \"A#,C,F,G#\": { name: \"F Augmented (IV+)\", points: 50 },\n\n  \n    // ----------------------------\n    // POWER CHORDS (5ths) - 25 POINTS\n    // ----------------------------\n    \"A#,F\": { name: \"Bb5 (bVII5)\", points: 25 },\n    \"A#,D#\": { name: \"Eb5 (bIII5)\", points: 25 },\n    \"D#,G#\": { name: \"Ab5 (bVI5)\", points: 25 },\n  } as const;\n  \n  \n\n// Helper functions\nexport function keysToNotes(keys: string[]): string[] {\n  return keys.map(key => NOTE_MAPPING[key as keyof typeof NOTE_MAPPING] || key);\n}\n\nexport function notesToKeys(notes: string[]): string[] {\n  return notes.map(note => KEY_MAPPING[note as keyof typeof KEY_MAPPING] || note);\n}\n\nexport function getChordFromNotes(notes: string[]): { name: string; points: number } | null {\n  const sortedNotes = [...notes].sort();\n  const noteString = sortedNotes.join(\",\");\n  \n  // Debug: Log what we're looking for\n  console.log(\"Looking for chord:\", noteString);\n  console.log(\"Available main chords:\", Object.keys(CHORD_DEFINITIONS).length);\n  console.log(\"Available extended chords:\", Object.keys(CHORD_DEFINITIONS_EXTENDED).length);\n  \n  // Check main chord definitions first\n  const mainChord = CHORD_DEFINITIONS[noteString as keyof typeof CHORD_DEFINITIONS];\n  if (mainChord) {\n    console.log(\"✅ Found in main chords:\", mainChord.name);\n    return mainChord;\n  }\n  \n  // Check extended chord definitions\n  const extendedChord = CHORD_DEFINITIONS_EXTENDED[noteString as keyof typeof CHORD_DEFINITIONS_EXTENDED];\n  if (extendedChord) {\n    console.log(\"✅ Found in extended chords:\", extendedChord.name);\n    return extendedChord;\n  }\n  \n  console.log(\"❌ No chord found for:\", noteString);\n  return null;\n}\n\nexport function getChordFromKeys(keys: string[]): { name: string; points: number } | null {\n  const sortedKeys = [...keys].sort();\n  const notes = keysToNotes(sortedKeys);\n  return getChordFromNotes(notes);\n}\n","import { Scene } from \"phaser\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\nimport { getChordFromKeys, keysToNotes } from \"../config/NoteMapping\";\n\ninterface ChordData {\n  chordType: string;\n  basePoints: number;\n  accumulatedPoints: number;\n  startTime: number;\n  isComplete: boolean;\n}\n\nexport class ChordDetector {\n  private scene: Scene;\n  private currentChord: ChordData | null = null;\n\n  constructor(scene: Scene) {\n    this.scene = scene;\n  }\n\n  update(activeKeys: Set<string>): { points: number; chordName: string | null } {\n    const keyArray = Array.from(activeKeys).sort();\n    const notes = keysToNotes(keyArray);\n    const noteString = notes.join(\",\");\n    \n    // Debug: Log the key combination being checked\n    if (activeKeys.size > 1) {\n      console.log(\"Keys pressed:\", keyArray.join(\",\"));\n      console.log(\"Notes:\", notes.join(\",\"));\n      console.log(\"Looking for chord:\", noteString);\n    }\n    \n    const chordDef = getChordFromKeys(keyArray);\n\n    if (chordDef) {\n      console.log(\"✅ Chord detected:\", chordDef.name);\n      // New chord detected or same chord continuing\n      if (!this.currentChord || this.currentChord.chordType !== chordDef.name) {\n        this.currentChord = {\n          chordType: chordDef.name,\n          basePoints: chordDef.points,\n          accumulatedPoints: 0,\n          startTime: this.scene.time.now,\n          isComplete: false,\n        };\n      }\n\n      // Calculate points earned this frame (not total accumulated)\n      const elapsed = this.scene.time.now - this.currentChord.startTime;\n      const progress = Math.min(elapsed / GAME_CONSTANTS.CHORD_DETECTION.ACCUMULATION_TIME, 1);\n      const newAccumulatedPoints = Math.floor(this.currentChord.basePoints * progress);\n      const pointsThisFrame = newAccumulatedPoints - this.currentChord.accumulatedPoints;\n      \n      this.currentChord.accumulatedPoints = newAccumulatedPoints;\n\n      // Check if chord is complete\n      if (progress >= 1 && !this.currentChord.isComplete) {\n        this.currentChord.isComplete = true;\n      }\n\n      return { points: pointsThisFrame, chordName: this.currentChord.chordType };\n    } else {\n      // No valid chord detected\n      if (activeKeys.size > 1) {\n        console.log(\"❌ No chord found for:\", noteString);\n      }\n      this.currentChord = null;\n      return { points: 0, chordName: null };\n    }\n  }\n\n  getCurrentChord(): ChordData | null {\n    return this.currentChord;\n  }\n}\n","import { Scene } from \"phaser\";\nimport * as Phaser from \"phaser\";\nimport { AudioManager } from \"../audio/AudioManager\";\nimport { InputManager } from \"../input/InputManager\";\nimport { PlatformManager } from \"../platform/PlatformManager\";\nimport { ChordDetector } from \"../audio/ChordDetector\";\nimport { GAME_CONSTANTS, GameKey } from \"../config/GameConstants\";\n\nexport class MuseRunnerGame extends Scene {\n  private character!: Phaser.GameObjects.Image;\n  private scoreText!: Phaser.GameObjects.Text;\n\n  // Game state\n  private isGameRunning: boolean = false;\n  private score: number = 0;\n  \n  // GROUND MECHANICS STATE\n  private isGrounded: boolean = false;\n  private groundStartTime: number = 0;\n  private lastScoreDecayTime: number = 0;\n  \n  // SYNTHESIS PARAMETER DISPLAY\n  private synthDisplay!: Phaser.GameObjects.Text;\n  \n  // FLOATING POINTS SYSTEM\n  private floatingPoints: Phaser.GameObjects.Text[] = [];\n  private floatingPointsFrameCount: number = 0;\n  \n  // CHORD DETECTION TRACKING\n  private lastDetectedChord: string | null = null;\n  \n  // MATHEMATICAL VISUAL BOX\n  private mathVisualBox!: Phaser.GameObjects.Rectangle;\n  private chordDisplayText!: Phaser.GameObjects.Text;\n  private chordProgressBar!: Phaser.GameObjects.Rectangle;\n  \n  // GROUND VISUAL\n  private groundVisual!: Phaser.GameObjects.Rectangle;\n  \n  // MATHEMATICAL BACKGROUND\n  private mathBackground!: Phaser.GameObjects.Graphics;\n  private backgroundData: number[][] = [];\n\n  // Managers\n  private audioManager!: AudioManager;\n  private inputManager!: InputManager;\n  private platformManager!: PlatformManager;\n  private chordDetector!: ChordDetector;\n\n  constructor() {\n    super(\"MuseRunnerGame\");\n  }\n\n  async create(): Promise<void> {\n    const { width, height } = this.cameras.main;\n\n    // Initialize managers with error handling\n    try {\n      this.audioManager = new AudioManager();\n      this.inputManager = new InputManager(this);\n      this.platformManager = new PlatformManager(this);\n      this.chordDetector = new ChordDetector(this);\n\n      // Initialize managers with error handling\n      this.audioManager.initialize();\n      this.inputManager.initialize();\n      this.platformManager.initialize();\n\n      // All managers initialized successfully\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.MANAGER_INIT_FAILED, error);\n      // Game can still continue with degraded functionality\n    }\n\n    // Create character using player.png image\n    this.character = this.add.image(\n      100,\n      height - 80,\n      \"player\"\n    );\n    this.character.setOrigin(0.5, 1); // BOTTOM CENTER ANCHOR - character's bottom touches platforms\n    this.character.setDepth(1000); // Ensure character appears above platforms\n    this.physics.add.existing(this.character);\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Set up physics for endless running - no collision needed\n    characterBody.setCollideWorldBounds(false);\n    characterBody.setDragX(0);\n    characterBody.setFrictionX(0);\n    characterBody.setGravityY(0); // No gravity - character rides platforms directly\n\n    // Create UI - make sure it's visible and doesn't scroll\n    this.scoreText = this.add.text(16, 16, \"Score: 0\", {\n      fontSize: \"24px\",\n      color: \"#ffffff\",\n      fontFamily: \"Nabla, system-ui\",\n      stroke: \"#000000\",\n      strokeThickness: 2,\n    });\n    this.scoreText.setScrollFactor(0); // Don't scroll with camera\n\n    // CREATE SYNTHESIS PARAMETER DISPLAY\n    this.synthDisplay = this.add.text(16, 50, \"SYNTH CONTROLS:\\n5/6 LFO Rate | 7/8 Chorus\\n1/2 Delay Vol | 3/4 Reverb\\n0: Waveform\", {\n      fontSize: \"16px\",\n      color: \"#ffff00\",\n      fontFamily: \"Nabla, system-ui\",\n      stroke: \"#000000\",\n      strokeThickness: 1,\n    });\n    this.synthDisplay.setScrollFactor(0); // Don't scroll with camera\n\n    // CREATE CHORD DISPLAY BOX AT BOTTOM\n    this.createChordDisplayBox();\n\n    // REMOVED: Instructions and key guide UI elements\n\n    // Controls info\n    this.add\n      .text(width - 16, 16, \"v0.0.4 | ESC: Menu | T: Restart\", {\n        fontSize: \"14px\",\n        color: \"#95a5a6\",\n        fontFamily: \"Nabla, system-ui\",\n      })\n      .setOrigin(1, 0)\n      .setScrollFactor(0); // Don't scroll with camera\n\n    // ESC key to return to menu\n    this.input.keyboard!.on(\"keydown-ESC\", () => {\n      this.scene.start(\"MainMenu\");\n    });\n\n    // T key to restart (R is now used for D# note)\n    this.input.keyboard!.on(\"keydown-T\", () => {\n      this.scene.restart();\n    });\n\n    // Start the game\n    this.isGameRunning = true;\n\n    // Camera follows character\n    this.cameras.main.startFollow(\n      this.character,\n      true,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_X,\n      GAME_CONSTANTS.GAME.CAMERA_FOLLOW_LERP_Y,\n    );\n    this.cameras.main.setDeadzone(\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_X,\n      GAME_CONSTANTS.GAME.CAMERA_DEADZONE_Y,\n    );\n\n    // Reset game state\n    this.score = 0;\n\n    // Don't start with any musical platform - wait for first key press\n  }\n\n  override update(): void {\n    if (!this.isGameRunning) return;\n\n    // Auto-run character forward - ALWAYS moving, never stops\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Force constant forward movement - override any physics that might stop it\n    characterBody.setVelocityX(GAME_CONSTANTS.CHARACTER.SPEED);\n    characterBody.setDragX(0); // No drag to slow down\n    characterBody.setFrictionX(0); // No friction from platforms\n\n    // Handle input for multiple simultaneous keys with error handling\n    try {\n      const { keyStateChanged } = this.inputManager.update(this.time.now);\n      const inputState = this.inputManager.getInputState();\n      const arrowKeys = this.inputManager.getArrowKeyState();\n\n      // SYNTHESIS CONTROLS (NUMBER KEYS)\n      if (inputState.pressedKeys.has(\"5\")) {\n        this.audioManager.updateLFORate(-0.1); // DECREASE LFO RATE\n        console.log(\"🎛️ Key 5 pressed - LFO Rate decreased\");\n      }\n      if (inputState.pressedKeys.has(\"6\")) {\n        this.audioManager.updateLFORate(0.1); // INCREASE LFO RATE\n        console.log(\"🎛️ Key 6 pressed - LFO Rate increased\");\n      }\n      if (inputState.pressedKeys.has(\"7\")) {\n        this.audioManager.updateChorusDepth(-0.05); // DECREASE CHORUS DEPTH\n        console.log(\"🎛️ Key 7 pressed - Chorus Depth decreased\");\n      }\n      if (inputState.pressedKeys.has(\"8\")) {\n        this.audioManager.updateChorusDepth(0.05); // INCREASE CHORUS DEPTH\n        console.log(\"🎛️ Key 8 pressed - Chorus Depth increased\");\n      }\n      if (inputState.pressedKeys.has(\"1\")) {\n        this.audioManager.updateDelayVolume(-0.05); // DECREASE DELAY VOLUME\n      }\n      if (inputState.pressedKeys.has(\"2\")) {\n        this.audioManager.updateDelayVolume(0.05); // INCREASE DELAY VOLUME\n      }\n      if (inputState.pressedKeys.has(\"3\")) {\n        this.audioManager.updateReverbAmount(-0.05); // DECREASE REVERB\n      }\n      if (inputState.pressedKeys.has(\"4\")) {\n        this.audioManager.updateReverbAmount(0.05); // INCREASE REVERB\n      }\n      // WAVEFORM SWITCHING (ONLY ON KEY PRESS, NOT HOLD)\n      if (keyStateChanged && inputState.pressedKeys.has(\"0\")) {\n        this.audioManager.switchWaveform(); // SWITCH WAVEFORM\n        console.log(\"🎛️ Key 0 pressed - Waveform switched\");\n      }\n\n      // UPDATE SYNTHESIS PARAMETER DISPLAY\n      this.updateSynthesisDisplay();\n\n      if (keyStateChanged) {\n        this.handleKeyChanges(inputState.pressedKeys);\n      }\n\n      // Update chord detection\n      const chordResult = this.chordDetector.update(inputState.pressedKeys);\n      \n      // RESET CHORD TRACKING IF NO CHORD DETECTED\n      if (!chordResult.chordName) {\n        this.lastDetectedChord = null;\n      }\n      \n      if (chordResult.points > 0) {\n        this.score += chordResult.points;\n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n        \n        // SHOW FLOATING POINTS FOR CHORD POINTS (FIXED SCREEN POSITION)\n        const currentChord = this.chordDetector.getCurrentChord();\n        if (currentChord) {\n          this.showFloatingPoints(currentChord.accumulatedPoints, this.cameras.main.width / 2, this.cameras.main.height / 2);\n        }\n        \n        // UPDATE CHORD DISPLAY BOX\n        this.updateChordDisplayBox(chordResult.chordName, chordResult.points);\n        \n        // SHOW CHORD NAME AS FLOATING TEXT WHEN FIRST DETECTED\n        if (chordResult.chordName && chordResult.chordName !== this.lastDetectedChord) {\n          this.showChordNameFloating(chordResult.chordName);\n          this.lastDetectedChord = chordResult.chordName;\n        }\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.INPUT_HANDLING_ERROR, error);\n    }\n\n    // Extend all active platforms as character moves with error handling\n    try {\n      if (this.platformManager.hasActivePlatforms()) {\n        this.platformManager.extendActivePlatforms(this.character.x);\n      }\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_EXTENSION_ERROR, error);\n    }\n\n    // Make character ride the highest active platform with error handling\n    try {\n      this.updateCharacterHeight();\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.CHARACTER_HEIGHT_ERROR, error);\n    }\n\n    // Character position tracking removed for performance\n    \n    // UPDATE MATHEMATICAL BACKGROUND\n    this.updateMathBackground();\n  }\n\n  private updateSynthesisDisplay(): void {\n    const lfoRate = this.audioManager.getLFORate();\n    const chorusDepth = this.audioManager.getChorusDepth();\n    const delayVolume = this.audioManager.getDelayVolume();\n    const reverbAmount = this.audioManager.getReverbAmount();\n    const waveform = this.audioManager.getCurrentWaveform();\n    \n    this.synthDisplay.setText(\n      `SYNTH CONTROLS:\\n` +\n      `5/6 LFO: ${lfoRate.toFixed(1)}Hz | 7/8 Chorus: ${(chorusDepth * 100).toFixed(0)}%\\n` +\n      `1/2 Delay: ${(delayVolume * 100).toFixed(0)}% | 3/4 Reverb: ${(reverbAmount * 100).toFixed(0)}%\\n` +\n      `0: Waveform: ${waveform.toUpperCase()}`\n    );\n\n    // Game over condition - only if character falls WAY off screen (make it more lenient)\n    if (\n      this.character.y >\n      this.cameras.main.height + GAME_CONSTANTS.GAME.OVER_FALL_DISTANCE\n    ) {\n      // Game over triggered - character fell too far\n      this.gameOver();\n    }\n\n    // Clean up old platforms through platform manager with error handling\n    try {\n      this.platformManager.cleanupOldPlatforms(this.character.x);\n    } catch (error) {\n      console.warn(GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_CLEANUP_ERROR, error);\n    }\n  }\n\n  private handleKeyChanges(currentlyPressedKeys: Set<string>): void {\n    try {\n      const activePlatforms = this.platformManager.getActivePlatforms();\n\n      // Start new platforms for newly pressed keys\n      currentlyPressedKeys.forEach((key) => {\n        if (this.isValidGameKey(key) && !activePlatforms.has(key)) {\n          try {\n            this.platformManager.startNewPlatform(key, this.character.x);\n            this.audioManager.playNote(key);\n            // Platform started for key\n\n            // Visual feedback - scale character briefly\n            this.character.setScale(1.2);\n            this.time.delayedCall(\n              GAME_CONSTANTS.CHARACTER.VISUAL_FEEDBACK_DURATION,\n              () => {\n                this.character.setScale(1.0); // Back to normal size\n              },\n            );\n\n            this.score += GAME_CONSTANTS.GAME.SCORE_PER_PLATFORM;\n            this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n            \n            // SHOW FLOATING POINTS FOR PLATFORM CREATION (FIXED SCREEN POSITION)\n            this.showFloatingPoints(GAME_CONSTANTS.GAME.SCORE_PER_PLATFORM, this.cameras.main.width / 2, this.cameras.main.height / 2);\n            \n            // CREATE PLATFORM PARTICLE EFFECTS\n            this.createPlatformParticles(key, this.character.x);\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_START_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n\n      // End platforms for released keys\n      activePlatforms.forEach((_platformData, key) => {\n        if (!currentlyPressedKeys.has(key)) {\n          try {\n            this.platformManager.endPlatform(key as GameKey);\n            this.audioManager.stopNote(key as GameKey); // STOP AUDIO WHEN KEY IS RELEASED\n            // Platform ended for key\n          } catch (error) {\n            console.warn(`${GAME_CONSTANTS.ERROR_HANDLING.PLATFORM_END_ERROR} for key ${key}:`, error);\n          }\n        }\n      });\n    } catch (error) {\n      console.error(GAME_CONSTANTS.ERROR_HANDLING.KEY_CHANGE_ERROR, error);\n    }\n  }\n\n  private isValidGameKey(key: string): key is GameKey {\n    return GAME_CONSTANTS.VALID_KEYS.includes(key as GameKey);\n  }\n\n  private updateCharacterHeight(): void {\n    const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n\n    // Get the highest active key to determine target height\n    const highestKey = this.platformManager.getHighestActiveKey();\n\n    if (highestKey) {\n      // CHARACTER IS ON A PLATFORM - NOT GROUNDED\n      if (this.isGrounded) {\n        this.handleLeaveGround();\n      }\n      \n      // Calculate target Y based on the highest active key\n      const { height } = this.cameras.main;\n      const targetY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[highestKey];\n      const currentY = this.character.y;\n      const heightDiff = targetY - currentY;\n\n      // Very smooth transition with slower lerp\n      if (Math.abs(heightDiff) > 0.5) {\n        // Use slower lerp for ultra-smooth movement\n        const newY = Phaser.Math.Linear(\n          currentY,\n          targetY,\n          GAME_CONSTANTS.GAME.CHARACTER_HEIGHT_LERP_SPEED,\n        );\n        this.character.y = newY;\n        characterBody.setVelocityY(0); // Override physics velocity\n      } else {\n        // Close enough, lock to platform\n        this.character.y = targetY;\n        characterBody.setVelocityY(0);\n      }\n    } else {\n      // NO ACTIVE PLATFORMS - CHARACTER IS GROUNDED\n      const { height } = this.cameras.main;\n      const groundY = height - 20; // BELOW all notes (A is at -40, so ground at -20)\n\n      if (this.character.y < groundY) {\n        characterBody.setVelocityY(GAME_CONSTANTS.GAME.FALL_VELOCITY); // Fall down\n      } else {\n        this.character.y = groundY; // Hit ground\n        characterBody.setVelocityY(0);\n        \n        // HANDLE GROUND MECHANICS\n        if (!this.isGrounded) {\n          this.handleHitGround();\n        } else {\n          this.handleStayGrounded();\n        }\n      }\n    }\n  }\n\n  // GROUND MECHANICS HANDLERS\n  private handleHitGround(): void {\n    this.isGrounded = true;\n    this.groundStartTime = this.time.now;\n    this.lastScoreDecayTime = this.time.now;\n    \n    // START C2 BASE NOTE\n    this.audioManager.playGroundC2();\n    \n    // UPDATE CHARACTER VISUAL (DARKER)\n    this.character.setTint(0x666666);\n    \n    console.log(\"🎵 Character hit ground - C2 base note started\");\n  }\n  \n  private handleStayGrounded(): void {\n    const timeOnGround = this.time.now - this.groundStartTime;\n    \n    // SCORE DECAY AFTER GRACE PERIOD\n    if (timeOnGround > GAME_CONSTANTS.GAME.GROUND_GRACE_PERIOD) {\n      const timeSinceLastDecay = this.time.now - this.lastScoreDecayTime;\n      if (timeSinceLastDecay >= 1000) { // 1 second intervals\n        this.score -= GAME_CONSTANTS.GAME.SCORE_DECAY_RATE;\n        this.score = Math.max(0, this.score); // PREVENT NEGATIVE SCORE\n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n        this.lastScoreDecayTime = this.time.now;\n        \n        // SHOW NEGATIVE FLOATING POINTS\n        this.showFloatingPoints(-GAME_CONSTANTS.GAME.SCORE_DECAY_RATE, this.cameras.main.width / 2, this.cameras.main.height / 2);\n        \n        console.log(\"📉 Score decay: -1 point\");\n      }\n    }\n    \n    // DISSONANCE REMOVED\n  }\n  \n  private handleLeaveGround(): void {\n    this.isGrounded = false;\n    \n    // STOP GROUND AUDIO\n    this.audioManager.stopGroundC2();\n    \n    // RESTORE CHARACTER VISUAL (NORMAL COLOR)\n    this.character.clearTint();\n    \n    console.log(\"🎵 Character left ground - audio stopped\");\n  }\n  \n\n  private showFloatingPoints(points: number, x: number, y: number): void {\n    // CREATE FLOATING POINTS TEXT\n    const pointsText = this.add.text(x, y, `${points > 0 ? '+' : ''}${points}`, {\n      fontSize: \"24px\",\n      color: this.getPointsColor(points),\n      fontFamily: \"Nabla, system-ui\",\n      stroke: \"#000000\",\n      strokeThickness: 2,\n    });\n    pointsText.setOrigin(0.5);\n    pointsText.setScrollFactor(0);\n    \n    // ADD TO FLOATING POINTS ARRAY\n    this.floatingPoints.push(pointsText);\n    \n    // CREATE PARTICLE EFFECTS\n    this.createPointsParticles(x, y, points);\n    \n    // ANIMATE THE FLOATING TEXT\n    this.animateFloatingPoints(pointsText, points);\n  }\n  \n  private getPointsColor(points: number): string {\n    if (points < 0) return \"#E74C3C\"; // Red for negative points\n    if (points >= 100) return \"#FFD700\"; // Gold for 100+\n    if (points >= 50) return \"#9B59B6\";  // Purple for 50+\n    if (points >= 25) return \"#3498DB\";  // Blue for 25+\n    return \"#2ECC71\"; // Green for 10+\n  }\n  \n  private createPointsParticles(x: number, y: number, points: number): void {\n    // ONLY CREATE PARTICLES FOR FINAL CHORD COMPLETION (100+ points) OR PLATFORM CREATION\n    const shouldShowParticles = (points >= 100) || (points === 10); // FINAL CHORD COMPLETION OR PLATFORM CREATION\n    \n    if (!shouldShowParticles) {\n      return; // NO PARTICLES FOR CHORD ACCUMULATION\n    }\n    \n    // CREATE SPARKLE PARTICLES\n    const particleCount = Math.min(points / 10, 8); // More particles for higher points\n    \n    for (let i = 0; i < particleCount; i++) {\n      const sparkle = this.add.circle(x, y, 2, 0xFFFFFF, 0.8);\n      sparkle.setScrollFactor(0);\n      \n      // RANDOM DIRECTION AND SPEED\n      const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.5;\n      const speed = 50 + Math.random() * 100;\n      \n      this.tweens.add({\n        targets: sparkle,\n        x: x + Math.cos(angle) * speed,\n        y: y + Math.sin(angle) * speed,\n        alpha: 0,\n        scale: 0,\n        duration: 800 + Math.random() * 400,\n        ease: \"Power2\",\n        onComplete: () => sparkle.destroy(),\n      });\n    }\n  }\n  \n  private animateFloatingPoints(pointsText: Phaser.GameObjects.Text, points: number): void {\n    let frameCount = 0;\n    const maxFrames = 60; // 1 second at 60fps\n    \n    // UPDATE FUNCTION FOR PULSING EFFECT\n    const updatePulse = () => {\n      frameCount++;\n      \n      // PULSE ONLY ON MULTIPLES OF 10 POINTS\n      if (points % 10 === 0) {\n        if (frameCount % 10 === 0) { // PULSE EVERY 10 FRAMES (1/2 PULSE TIME)\n          const pulseScale = 1.2 + (frameCount % 20 === 0 ? 0.3 : 0.1); // BIGGER PULSE EVERY 20TH FRAME\n          this.tweens.add({\n            targets: pointsText,\n            scaleX: pulseScale,\n            scaleY: pulseScale,\n            duration: 100,\n            yoyo: true,\n            ease: \"Power2\",\n          });\n        }\n      }\n      \n      if (frameCount < maxFrames) {\n        this.time.delayedCall(16, updatePulse); // ~60fps\n      }\n    };\n    \n    // START THE PULSING\n    updatePulse();\n    \n    // MAIN FLOATING ANIMATION\n    this.tweens.add({\n      targets: pointsText,\n      y: pointsText.y - 100,\n      alpha: 0,\n      rotation: Math.random() * 0.5 - 0.25, // SLIGHT ROTATION\n      duration: 1500,\n      ease: \"Power2\",\n      onComplete: () => {\n        pointsText.destroy();\n        // REMOVE FROM ARRAY\n        const index = this.floatingPoints.indexOf(pointsText);\n        if (index > -1) {\n          this.floatingPoints.splice(index, 1);\n        }\n      },\n    });\n  }\n\n  private createChordDisplayBox(): void {\n    const { width, height } = this.cameras.main;\n    \n    // CREATE BACKGROUND BOX\n    this.chordDisplayBox = this.add.rectangle(\n      width / 2,\n      height - 60,\n      width - 40,\n      80,\n      0x2c3e50,\n      0.9\n    );\n    this.chordDisplayBox.setScrollFactor(0);\n    this.chordDisplayBox.setStrokeStyle(2, 0x3498db);\n    \n    // CREATE CHORD TEXT (HIDDEN - CHORD BOX IS PURELY VISUAL)\n    this.chordDisplayText = this.add.text(\n      width / 2,\n      height - 80,\n      \"\",\n      {\n        fontSize: \"20px\",\n        color: \"#ecf0f1\",\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#000000\",\n        strokeThickness: 1,\n      }\n    );\n    this.chordDisplayText.setOrigin(0.5);\n    this.chordDisplayText.setScrollFactor(0);\n    this.chordDisplayText.setVisible(false); // HIDDEN\n    \n    // CREATE PROGRESS BAR BACKGROUND\n    const progressBg = this.add.rectangle(\n      width / 2,\n      height - 40,\n      width - 60,\n      8,\n      0x34495e\n    );\n    progressBg.setScrollFactor(0);\n    \n    // CREATE PROGRESS BAR\n    this.chordProgressBar = this.add.rectangle(\n      width / 2 - (width - 60) / 2,\n      height - 40,\n      0,\n      8,\n      0x2ecc71\n    );\n    this.chordProgressBar.setOrigin(0, 0.5);\n    this.chordProgressBar.setScrollFactor(0);\n    \n    // CREATE MATHEMATICAL BACKGROUND\n    this.createMathBackground();\n  }\n\n\n  private createPlatformParticles(key: string, x: number): void {\n    const { height } = this.cameras.main;\n    const platformY = height + GAME_CONSTANTS.LEVEL_HEIGHTS[key as GameKey];\n    const platformColor = GAME_CONSTANTS.LEVEL_COLORS[key as GameKey];\n    \n    // CREATE MUSICAL PARTICLE EFFECTS\n    const particleCount = 8;\n    \n    for (let i = 0; i < particleCount; i++) {\n      // CREATE MUSICAL NOTE PARTICLES\n      const particle = this.add.text(x, platformY, \"♪\", {\n        fontSize: \"12px\",\n        color: `#${platformColor.toString(16).padStart(6, '0')}`,\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#FFFFFF\",\n        strokeThickness: 1,\n      });\n      particle.setOrigin(0.5);\n      \n      // RANDOM DIRECTION AND SPEED\n      const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.5;\n      const speed = 80 + Math.random() * 120;\n      const endX = x + Math.cos(angle) * speed;\n      const endY = platformY + Math.sin(angle) * speed;\n      \n      // ANIMATE PARTICLES\n      this.tweens.add({\n        targets: particle,\n        x: endX,\n        y: endY,\n        alpha: 0,\n        scale: 0.3,\n        rotation: Math.random() * Math.PI * 2,\n        duration: 800 + Math.random() * 400,\n        ease: \"Power2\",\n        onComplete: () => particle.destroy(),\n      });\n    }\n    \n    // CREATE SPARKLE EFFECT\n    const sparkleCount = 5;\n    for (let i = 0; i < sparkleCount; i++) {\n      const sparkle = this.add.circle(x, platformY, 2, platformColor, 0.8);\n      \n      const sparkleAngle = (Math.PI * 2 * i) / sparkleCount;\n      const sparkleSpeed = 60 + Math.random() * 80;\n      const sparkleEndX = x + Math.cos(sparkleAngle) * sparkleSpeed;\n      const sparkleEndY = platformY + Math.sin(sparkleAngle) * sparkleSpeed;\n      \n      this.tweens.add({\n        targets: sparkle,\n        x: sparkleEndX,\n        y: sparkleEndY,\n        alpha: 0,\n        scale: 0,\n        duration: 600 + Math.random() * 300,\n        ease: \"Power2\",\n        onComplete: () => sparkle.destroy(),\n      });\n    }\n  }\n\n  private updateChordDisplayBox(chordName: string | null, points: number): void {\n    // CHORD BOX IS PURELY MATHEMATICAL BACKGROUND - NO PROGRESS BAR OR TEXT\n    // The mathematical background updates automatically in updateMathBackground()\n  }\n\n  private showChordNameFloating(chordName: string): void {\n    // Create floating chord name text - position relative to camera viewport\n    const chordText = this.add.text(\n      this.cameras.main.width / 2,\n      this.cameras.main.height / 2 - 50, // ABOVE THE POINTS\n      chordName,\n      {\n        fontSize: \"28px\",\n        color: \"#f39c12\",\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#000000\",\n        strokeThickness: 2,\n      }\n    );\n    chordText.setOrigin(0.5);\n    chordText.setScrollFactor(0);\n\n    // Animate the chord name floating up\n    this.tweens.add({\n      targets: chordText,\n      y: chordText.y - 80,\n      alpha: 0,\n      duration: 3000,\n      ease: \"Power2\",\n      onComplete: () => chordText.destroy(),\n    });\n  }\n\n  private showChordName(chordName: string, points: number): void {\n    // Remove any existing chord name text\n    this.children.list.forEach(child => {\n      if (child.name === 'chordName') {\n        child.destroy();\n      }\n    });\n\n    // Get current chord data to show accumulated points\n    const currentChord = this.chordDetector.getCurrentChord();\n    const accumulatedPoints = currentChord ? currentChord.accumulatedPoints : 0;\n\n    // Create new chord name text - position relative to camera viewport\n    const chordText = this.add.text(\n      this.cameras.main.width / 2,\n      100,\n      `${chordName} ${accumulatedPoints}/${currentChord?.basePoints || 0}`,\n      {\n        fontSize: \"32px\",\n        color: \"#f39c12\",\n        fontFamily: \"Nabla, system-ui\",\n        stroke: \"#000000\",\n        strokeThickness: 2,\n      }\n    );\n    chordText.setOrigin(0.5);\n    chordText.setScrollFactor(0);\n    chordText.name = 'chordName';\n\n    // Animate the chord name\n    this.tweens.add({\n      targets: chordText,\n      alpha: 0,\n      y: chordText.y - 50,\n      duration: 2000,\n      ease: \"Power2\",\n      onComplete: () => chordText.destroy(),\n    });\n  }\n\n  private gameOver(): void {\n    this.isGameRunning = false;\n\n    const { width, height } = this.cameras.main;\n\n    // Stop camera follow\n    this.cameras.main.stopFollow();\n\n    // Game over screen\n    const gameOverBg = this.add.rectangle(\n      this.cameras.main.scrollX + width / 2,\n      this.cameras.main.scrollY + height / 2,\n      width,\n      height,\n      0x000000,\n      0.8,\n    );\n    gameOverBg.setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 80,\n        \"Game Over!\",\n        {\n          fontSize: \"48px\",\n          color: \"#e74c3c\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 - 20,\n        `Final Score: ${Math.floor(this.score)}`,\n        {\n          fontSize: \"24px\",\n          color: \"#ffffff\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    const restartText = this.add\n      .text(\n        this.cameras.main.scrollX + width / 2,\n        this.cameras.main.scrollY + height / 2 + 30,\n        \"Press T to restart or ESC for menu\",\n        {\n          fontSize: \"18px\",\n          color: \"#bdc3c7\",\n          fontFamily: \"Arial, sans-serif\",\n        },\n      )\n      .setOrigin(0.5)\n      .setScrollFactor(0);\n\n    // Pulsing restart text\n    this.tweens.add({\n      targets: restartText,\n      alpha: 0.5,\n      duration: 1000,\n      yoyo: true,\n      repeat: -1,\n    });\n\n    // Send score to parent (Reddit)\n    if (window.parent) {\n      window.parent.postMessage(\n        {\n          type: \"GAME_OVER\",\n          data: { finalScore: Math.floor(this.score) },\n        },\n        \"*\",\n      );\n    }\n  }\n\n  private createMathBackground(): void {\n    const { width, height } = this.cameras.main;\n    \n    // CREATE GRAPHICS OBJECT FOR MATHEMATICAL BACKGROUND\n    this.mathBackground = this.add.graphics();\n    this.mathBackground.setScrollFactor(0);\n    this.mathBackground.setDepth(-1); // BEHIND CHORD BOX BUT ABOVE GAME BACKGROUND\n    \n    // INITIALIZE BACKGROUND DATA ARRAY\n    const boxWidth = width - 40;\n    const boxHeight = 80;\n    const boxX = 20;\n    const boxY = height - 100;\n    \n    // CREATE 2D ARRAY FOR BACKGROUND VALUES\n    this.backgroundData = [];\n    for (let y = 0; y < boxHeight; y++) {\n      this.backgroundData[y] = [];\n      for (let x = 0; x < boxWidth; x++) {\n        this.backgroundData[y][x] = 0;\n      }\n    }\n  }\n\n  private updateMathBackground(): void {\n    if (!this.mathBackground) return;\n    \n    const { width, height } = this.cameras.main;\n    const boxWidth = width - 40;\n    const boxHeight = 80;\n    const boxX = 20;\n    const boxY = height - 100;\n    \n    // GET AUDIO PARAMETERS\n    const lfoRate = this.audioManager.getLFORate();\n    const chorusDepth = this.audioManager.getChorusDepth();\n    const delayVolume = this.audioManager.getDelayVolume();\n    const reverbAmount = this.audioManager.getReverbAmount();\n    \n    // GET ACTIVE NOTES\n    const activeNotes = this.platformManager.getActivePlatforms();\n    const time = this.time.now * 0.001; // CONVERT TO SECONDS\n    \n    // CLEAR PREVIOUS GRAPHICS\n    this.mathBackground.clear();\n    \n    // CALCULATE MATHEMATICAL FUNCTION FOR EACH PIXEL\n    for (let y = 0; y < boxHeight; y++) {\n      for (let x = 0; x < boxWidth; x++) {\n        let value = 0;\n        \n        // BASE LFO WAVE (SINE) - INCREASED AMPLITUDE\n        value += Math.sin(x * lfoRate * 0.1 + time) * 0.8;\n        \n        // CHORUS WAVE (COSINE) - INCREASED AMPLITUDE\n        value += Math.cos(y * chorusDepth * 0.1 + time) * 0.6;\n        \n        // DELAY WAVE (SINE WITH PHASE SHIFT) - INCREASED AMPLITUDE\n        value += Math.sin((x + y) * delayVolume * 0.05 + time) * 0.4;\n        \n        // REVERB WAVE (TANGENT FOR COMPLEXITY) - INCREASED AMPLITUDE\n        value += Math.tan(x * reverbAmount * 0.02 + time) * 0.3;\n        \n        // ADD NOTE-SPECIFIC WAVES - INCREASED AMPLITUDE\n        activeNotes.forEach((note, key) => {\n          const frequency = this.getNoteFrequency(key);\n          if (frequency) {\n            value += Math.sin(x * frequency * 0.001 + time) * 0.5;\n            value += Math.cos(y * frequency * 0.001 + time) * 0.5;\n          }\n        });\n        \n        // NORMALIZE VALUE TO 0-1 RANGE\n        value = (value + 1) / 2;\n        \n        // CREATE VIBRANT COLOR SPECTRUM BASED ON VALUE\n        let color;\n        if (value < 0.25) {\n          // BLUE TO CYAN\n          color = Phaser.Display.Color.Interpolate.ColorWithColor(\n            { r: 0, g: 0, b: 255 }, // BLUE\n            { r: 0, g: 255, b: 255 }, // CYAN\n            100,\n            (value / 0.25) * 100\n          );\n        } else if (value < 0.5) {\n          // CYAN TO GREEN\n          color = Phaser.Display.Color.Interpolate.ColorWithColor(\n            { r: 0, g: 255, b: 255 }, // CYAN\n            { r: 0, g: 255, b: 0 }, // GREEN\n            100,\n            ((value - 0.25) / 0.25) * 100\n          );\n        } else if (value < 0.75) {\n          // GREEN TO YELLOW\n          color = Phaser.Display.Color.Interpolate.ColorWithColor(\n            { r: 0, g: 255, b: 0 }, // GREEN\n            { r: 255, g: 255, b: 0 }, // YELLOW\n            100,\n            ((value - 0.5) / 0.25) * 100\n          );\n        } else {\n          // YELLOW TO RED\n          color = Phaser.Display.Color.Interpolate.ColorWithColor(\n            { r: 255, g: 255, b: 0 }, // YELLOW\n            { r: 255, g: 0, b: 0 }, // RED\n            100,\n            ((value - 0.75) / 0.25) * 100\n          );\n        }\n        \n        // DRAW PIXEL WITH HIGHER OPACITY\n        this.mathBackground.fillStyle(\n          Phaser.Display.Color.GetColor(color.r, color.g, color.b),\n          0.7 // MUCH HIGHER TRANSPARENCY FOR VIBRANCY\n        );\n        this.mathBackground.fillRect(boxX + x, boxY + y, 1, 1);\n      }\n    }\n  }\n\n  private getNoteFrequency(key: string): number | null {\n    const NOTE_FREQUENCIES: Record<string, number> = {\n      S: 261.63, // C4\n      D: 293.66, // D4\n      F: 329.63, // E4\n      G: 349.23, // F4\n      H: 392.0, // G4\n      J: 440.0, // A4\n      K: 493.88, // B4\n      R: 311.13, // D#4\n      U: 415.30, // G#4\n      I: 466.16, // Bb4\n      A: 246.94, // B3\n      L: 523.25, // C5\n      \";\": 587.33, // D5\n      \"'\": 659.25, // E5\n    };\n    return NOTE_FREQUENCIES[key] || null;\n  }\n}\n","import { Scene, GameObjects } from \"phaser\";\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super(\"MainMenu\");\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on(\"resize\", () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once(\"pointerdown\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n\n    this.input.keyboard!.on(\"keydown-SPACE\", () => {\n      this.scene.start(\"MuseRunnerGame\");\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add\n        .text(0, 0, \"🎵 Muse Runner 🏃‍♂️\", {\n          fontSize: \"48px\",\n          color: \"#ffffff\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add\n        .text(0, 0, \"Rhythm Platformer\", {\n          fontSize: \"24px\",\n          color: \"#3498db\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add\n        .text(\n          0,\n          0,\n          \"Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen\",\n          {\n            fontSize: \"18px\",\n            color: \"#ecf0f1\",\n            fontFamily: \"Nabla, system-ui\",\n            align: \"center\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add\n        .text(0, 0, \"Click to Start or Press SPACE\", {\n          fontSize: \"24px\",\n          color: \"#2ecc71\",\n          fontFamily: \"Nabla, system-ui\",\n        })\n        .setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1,\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add\n        .text(\n          0,\n          0,\n          \"v0.0.4 - Built with Phaser.js for Reddit's Community Games Challenge\",\n          {\n            fontSize: \"14px\",\n            color: \"#95a5a6\",\n            fontFamily: \"Nabla, system-ui\",\n          },\n        )\n        .setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from \"phaser\";\n\nexport class Preloader extends Scene {\n  constructor() {\n    super(\"Preloader\");\n  }\n\n  init() {\n    // REMOVED: Background image and progress bars that were persisting behind the game\n    // The game now loads cleanly without old UI elements\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath(\"assets\");\n\n    this.load.image(\"logo\", \"logo.png\");\n    this.load.image(\"player\", \"player.png\");\n    \n    // Preload the Nabla font to ensure it's available\n    this.load.setPath(\"assets/fonts\");\n    this.load.font(\"nabla\", \"nabla.ttf\");\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start(\"MainMenu\");\n  }\n}\n","import { Boot } from \"./scenes/Boot\";\nimport { GameOver } from \"./scenes/GameOver\";\nimport { MuseRunnerGame } from \"./scenes/MuseRunnerGame\";\nimport { MainMenu } from \"./scenes/MainMenu\";\nimport * as Phaser from \"phaser\";\nimport { AUTO, Game } from \"phaser\";\nimport { Preloader } from \"./scenes/Preloader\";\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: \"game-container\",\n  backgroundColor: \"#2c3e50\",\n  physics: {\n    default: \"arcade\",\n    arcade: {\n      gravity: { x: 0, y: 0 }, // NO GRAVITY - character rides platforms directly\n      debug: false,\n    },\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from \"./game/main\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  StartGame(\"game-container\");\n});\n"],"names":["Boot","Scene","constructor","super","preload","create","this","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","image","setOrigin","setAlpha","gameOverText","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","GAME_CONSTANTS","CHARACTER","SPEED","WIDTH","HEIGHT","COLOR","VISUAL_FEEDBACK_COLOR","VISUAL_FEEDBACK_DURATION","PLATFORMS","EXTENSION_DISTANCE","AHEAD_OFFSET","CLEANUP_DISTANCE","MIN_LENGTH","GROWTH_RATE","AUDIO","NOTE_DURATION","ATTACK_TIME","VOLUME","GAME","OVER_FALL_DISTANCE","SCORE_PER_PLATFORM","GROUND_OFFSET","CHARACTER_HEIGHT_LERP_SPEED","FALL_VELOCITY","CAMERA_DEADZONE_X","CAMERA_DEADZONE_Y","CAMERA_FOLLOW_LERP_X","CAMERA_FOLLOW_LERP_Y","GROUND_GRACE_PERIOD","SCORE_DECAY_RATE","SCREEN_SHAKE_INTENSITY","C2_FREQUENCY","DISSONANCE_START_TIME","CHORD_DETECTION","ACCUMULATION_TIME","TRIAD_POINTS","SEVENTH_POINTS","POWER_CHORD_POINTS","LEVEL_HEIGHTS","S","R","D","F","G","H","J","K","U","I","A","L","LEVEL_COLORS","VALID_KEYS","ERROR_HANDLING","MANAGER_INIT_FAILED","INPUT_HANDLING_ERROR","PLATFORM_EXTENSION_ERROR","CHARACTER_HEIGHT_ERROR","PLATFORM_CLEANUP_ERROR","KEY_CHANGE_ERROR","PLATFORM_START_ERROR","PLATFORM_END_ERROR","NOTE_FREQUENCIES","AudioManager","Map","initialize","audioContext","window","AudioContext","webkitAudioContext","audioAvailable","isInitialized","error","console","warn","playNote","key","frequency","activeNotes","has","startSustainedNote","stopNote","activeNote","get","now","currentTime","gainNode","gain","exponentialRampToValueAtTime","setTimeout","oscillators","forEach","osc","stop","disconnect","e","delete","isAudioAvailable","updateLFORate","delta","lfoRate","max","log","toFixed","updateChorusDepth","chorusDepth","updateDelayVolume","delayVolume","updateReverbAmount","reverbAmount","switchWaveform","waveforms","nextIndex","indexOf","currentWaveform","length","getLFORate","getChorusDepth","getDelayVolume","getReverbAmount","getDistortionAmount","distortionAmount","getCurrentWaveform","mainOsc","createOscillator","lfoOsc","lfoGain","createGain","setValueAtTime","type","connect","chorusOsc1","chorusOsc2","chorusGain1","chorusGain2","detuneAmount","delay","createDelay","delayGain","delayFeedback","delayTime","distortion","createWaveShaper","distortionCurve","createDistortionCurve","curve","oversample","mainGain","dryGain","wetGain","outputGain","destination","linearRampToValueAtTime","set","isSustaining","playMusicalTone","filter","createBiquadFilter","filterFrequency","Q","reverbDelay","reverbGain","reverbFeedback","noteDuration","stopTime","amount","samples","Float32Array","deg","PI","i","x","abs","playGroundC2","groundC2Oscillators","groundC2Gain","fundamental","octave","fifth","subBass","fundamentalGain","octaveGain","fifthGain","subBassGain","stopGroundC2","playDissonance","intensity","dissonanceOscillator","dissonanceGain","dissonanceFreq","pow","stopDissonance","InputManager","Set","up","down","left","right","keyboard","keyObjects","addKey","Phaser.Input","Keyboard","KeyCodes","SEMICOLON","QUOTES","arrowKeys","UP","DOWN","LEFT","RIGHT","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","ZERO","update","_currentTime","previouslyPressedKeys","currentlyPressedKeys","clear","keyObject","isDown","keyStateChanged","hasKeyStateChanged","getInputState","pressedKeys","getArrowKeyState","_a","_b","_c","_d","size","isValidGameKey","includes","PlatformManager","platformsGroup","group","startNewPlatform","startX","activePlatforms","platformY","platformColor","glowEffect","rectangle","setStrokeStyle","platform","gradientOverlay","noteSymbol","getNoteSymbol","physics","existing","pulseTween","tweens","targets","scaleX","scaleY","duration","yoyo","repeat","ease","platformData","startTime","time","isGrowing","endPlatform","alpha","extendActivePlatforms","characterX","_key","distanceMoved","newWidth","newCenterX","setSize","y","getHighestActiveKey","highestKey","highestY","Number","POSITIVE_INFINITY","_platformData","levelHeight","hasActivePlatforms","cleanupOldPlatforms","platformsToRemove","children","entries","rect","push","remove","destroy","getActivePlatforms","getPlatformsGroup","getLevelHeight","getLevelColor","NOTE_MAPPING","CHORD_DEFINITIONS","name","points","CHORD_DEFINITIONS_EXTENDED","keysToNotes","keys","map","ChordDetector","activeKeys","keyArray","Array","from","sort","notes","noteString","join","chordDef","Object","mainChord","extendedChord","getChordFromNotes","currentChord","chordType","basePoints","accumulatedPoints","isComplete","elapsed","progress","newAccumulatedPoints","floor","pointsThisFrame","chordName","getCurrentChord","MuseRunnerGame","audioManager","inputManager","platformManager","chordDetector","character","setDepth","characterBody","body","setCollideWorldBounds","setDragX","setFrictionX","setGravityY","scoreText","setScrollFactor","synthDisplay","createChordDisplayBox","restart","isGameRunning","startFollow","setDeadzone","score","setVelocityX","inputState","updateSynthesisDisplay","handleKeyChanges","chordResult","lastDetectedChord","setText","showFloatingPoints","updateChordDisplayBox","showChordNameFloating","updateCharacterHeight","updateMathBackground","waveform","toUpperCase","gameOver","delayedCall","createPlatformParticles","isGrounded","handleLeaveGround","targetY","currentY","heightDiff","newY","Phaser.Math","Linear","setVelocityY","groundY","handleStayGrounded","handleHitGround","groundStartTime","lastScoreDecayTime","setTint","clearTint","pointsText","getPointsColor","floatingPoints","createPointsParticles","animateFloatingPoints","particleCount","sparkle","circle","angle","random","speed","cos","sin","onComplete","frameCount","updatePulse","pulseScale","rotation","index","splice","chordDisplayBox","chordDisplayText","setVisible","chordProgressBar","createMathBackground","particle","toString","padStart","endX","endY","sparkleAngle","sparkleSpeed","sparkleEndX","sparkleEndY","chordText","showChordName","list","child","stopFollow","scrollX","scrollY","restartText","parent","postMessage","data","finalScore","mathBackground","graphics","boxWidth","backgroundData","boxY","value","tan","note","getNoteFrequency","Phaser.Display","Color","Interpolate","ColorWithColor","r","g","b","fillStyle","GetColor","fillRect","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","load","setPath","font","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}