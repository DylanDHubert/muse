{"version":3,"file":"index-D-XldnF9.js","sources":["../../../src/client/game/scenes/Boot.ts","../../../src/client/game/scenes/GameOver.ts","../../../src/client/game/scenes/MuseRunnerGame.ts","../../../src/client/game/scenes/MainMenu.ts","../../../src/client/game/scenes/Preloader.ts","../../../src/client/game/main.ts","../../../src/client/main.ts"],"sourcesContent":["import { Scene } from 'phaser';\n\nexport class Boot extends Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    this.load.image('background', 'assets/bg.png');\n  }\n\n  create() {\n    this.scene.start('Preloader');\n  }\n}\n","import { Scene } from 'phaser';\nimport * as Phaser from 'phaser';\n\nexport class GameOver extends Scene {\n  camera: Phaser.Cameras.Scene2D.Camera;\n  background: Phaser.GameObjects.Image;\n  gameover_text: Phaser.GameObjects.Text;\n\n  constructor() {\n    super('GameOver');\n  }\n\n  create() {\n    // Configure camera\n    this.camera = this.cameras.main;\n    this.camera.setBackgroundColor(0xff0000);\n\n    // Background – create once, full-screen\n    this.background = this.add.image(0, 0, 'background').setOrigin(0).setAlpha(0.5);\n\n    // \"Game Over\" text – created once and scaled responsively\n    this.gameover_text = this.add\n      .text(0, 0, 'Game Over', {\n        fontFamily: 'Arial Black',\n        fontSize: '64px',\n        color: '#ffffff',\n        stroke: '#000000',\n        strokeThickness: 8,\n        align: 'center',\n      })\n      .setOrigin(0.5);\n\n    // Initial responsive layout\n    this.updateLayout(this.scale.width, this.scale.height);\n\n    // Update layout on canvas resize / orientation change\n    this.scale.on('resize', (gameSize: Phaser.Structs.Size) => {\n      const { width, height } = gameSize;\n      this.updateLayout(width, height);\n    });\n\n    // Return to Main Menu on tap / click\n    this.input.once('pointerdown', () => {\n      this.scene.start('MainMenu');\n    });\n  }\n\n  private updateLayout(width: number, height: number): void {\n    // Resize camera viewport to prevent black bars\n    this.cameras.resize(width, height);\n\n    // Stretch background to fill entire screen\n    if (this.background) {\n      this.background.setDisplaySize(width, height);\n    }\n\n    // Compute scale factor (never enlarge above 1×)\n    const scaleFactor = Math.min(Math.min(width / 1024, height / 768), 1);\n\n    // Centre and scale the game-over text\n    if (this.gameover_text) {\n      this.gameover_text.setPosition(width / 2, height / 2);\n      this.gameover_text.setScale(scaleFactor);\n    }\n  }\n}\n","import { Scene } from 'phaser';\n\nexport class MuseRunnerGame extends Scene {\n    private character!: Phaser.GameObjects.Rectangle;\n    private platforms!: Phaser.GameObjects.Group;\n    private gameKeys!: { [key: string]: Phaser.Input.Keyboard.Key };\n    \n    // Game state\n    private isGameRunning: boolean = false;\n    private score: number = 0;\n    private streak: number = 0;\n    private characterSpeed: number = 120;\n    private scoreText!: Phaser.GameObjects.Text;\n    private streakText!: Phaser.GameObjects.Text;\n\n    // Platform system\n    private currentPlatform: Phaser.GameObjects.Rectangle | null = null;\n    private currentKey: string | null = null;\n    private platformStartX: number = 0;\n\n    // Musical note frequencies (C major scale)\n    private noteFrequencies = {\n        'S': 261.63, // C4\n        'D': 293.66, // D4\n        'F': 329.63, // E4\n        'G': 349.23, // F4\n        'H': 392.00, // G4\n        'J': 440.00, // A4\n        'K': 493.88  // B4\n    };\n\n    // Audio context for musical notes\n    private audioContext: AudioContext | null = null;\n\n    constructor() {\n        super('MuseRunnerGame');\n    }\n\n    create(): void {\n        const { width, height } = this.cameras.main;\n\n        // Create character (blue rectangle) - start at ground level\n        this.character = this.add.rectangle(100, height - 60, 30, 40, 0x3498db);\n        this.physics.add.existing(this.character);\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        characterBody.setCollideWorldBounds(true);\n        characterBody.setBounce(0.2); // Slight bounce for smoother landings\n        characterBody.setMaxVelocity(200, 1000); // Limit horizontal speed, allow falling\n\n        // Create platforms group\n        this.platforms = this.add.group();\n\n        // No initial platform - we'll create one when the game starts\n\n        // Set up collisions\n        this.physics.add.collider(this.character, this.platforms);\n\n        // Musical keys setup (S-D-F-G-H-J-K)\n        this.gameKeys = {\n            'S': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.S),\n            'D': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.D),\n            'F': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.F),\n            'G': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.G),\n            'H': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.H),\n            'J': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.J),\n            'K': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.K)\n        };\n\n        // Create UI\n        this.scoreText = this.add.text(16, 16, 'Score: 0', {\n            fontSize: '24px',\n            color: '#ffffff'\n        });\n\n        this.streakText = this.add.text(16, 50, 'Streak: 0', {\n            fontSize: '18px',\n            color: '#f39c12'\n        });\n\n        // Instructions\n        const instructionText = this.add.text(width / 2, 30, '🎵 Press S-D-F-G-H-J-K to create platforms at different heights! 🎵', {\n            fontSize: '16px',\n            color: '#ecf0f1',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Key guide\n        const keyGuide = this.add.text(width / 2, 60, 'S=Low → D → F → G → H → J → K=High', {\n            fontSize: '14px',\n            color: '#95a5a6',\n            fontFamily: 'Arial, sans-serif'\n        }).setOrigin(0.5);\n\n        // Make instructions pulse to draw attention\n        this.tweens.add({\n            targets: instructionText,\n            alpha: 0.6,\n            duration: 1500,\n            yoyo: true,\n            repeat: -1\n        });\n\n        // Controls info\n        this.add.text(width - 16, 16, 'v0.0.4 | ESC: Menu | R: Restart', {\n            fontSize: '14px',\n            color: '#95a5a6'\n        }).setOrigin(1, 0);\n\n        // ESC key to return to menu\n        this.input.keyboard!.on('keydown-ESC', () => {\n            this.scene.start('MainMenu');\n        });\n\n        // R key to restart\n        this.input.keyboard!.on('keydown-R', () => {\n            this.scene.restart();\n        });\n\n        // Start the game\n        this.isGameRunning = true;\n        \n        // Camera follows character\n        this.cameras.main.startFollow(this.character, true, 0.1, 0.1);\n        this.cameras.main.setDeadzone(200, 100);\n\n        // Reset game state\n        this.score = 0;\n        this.streak = 0;\n        this.characterSpeed = 120;\n\n        // Start with ground level platform (S key)\n        this.startNewPlatform('S');\n    }\n\n    update(): void {\n        if (!this.isGameRunning) return;\n\n        // Auto-run character forward at a slower, more manageable speed\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        characterBody.setVelocityX(80); // Much slower for testing\n\n        // Check for musical key presses - continuous platform system\n        Object.keys(this.gameKeys).forEach(key => {\n            if (Phaser.Input.Keyboard.JustDown(this.gameKeys[key])) {\n                console.log(`Key ${key} pressed!`);\n                this.switchToKey(key);\n            }\n        });\n\n        // Extend current platform as character moves\n        if (this.currentPlatform && this.currentKey) {\n            this.extendCurrentPlatform();\n        }\n\n        // Increase difficulty over time\n        this.characterSpeed = Math.min(200, 120 + (this.score / 100));\n\n        // Game over condition\n        if (this.character.y > this.cameras.main.height + 100) {\n            this.gameOver();\n        }\n\n        // Clean up old platforms\n        this.platforms.children.entries.forEach((platform: any) => {\n            if (platform.x < this.character.x - 400) {\n                platform.destroy();\n            }\n        });\n    }\n\n    private playNote(key: string): void {\n        console.log(`Playing note ${key} at ${this.noteFrequencies[key]}Hz`);\n        \n        // Play musical note sound\n        this.playMusicalTone(this.noteFrequencies[key]);\n        \n        // Visual feedback - change fill color\n        this.character.setFillStyle(0xf39c12);\n        this.time.delayedCall(200, () => {\n            this.character.setFillStyle(0x3498db); // Back to blue\n        });\n    }\n\n    private playMusicalTone(frequency: number): void {\n        try {\n            // Initialize audio context if needed\n            if (!this.audioContext) {\n                this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            }\n\n            // Create oscillator for the musical note\n            const oscillator = this.audioContext.createOscillator();\n            const gainNode = this.audioContext.createGain();\n            \n            oscillator.connect(gainNode);\n            gainNode.connect(this.audioContext.destination);\n            \n            // Set frequency and type\n            oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);\n            oscillator.type = 'sine'; // Pure tone\n            \n            // Set volume envelope (attack and decay)\n            gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n            gainNode.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.01);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);\n            \n            // Play the note\n            oscillator.start(this.audioContext.currentTime);\n            oscillator.stop(this.audioContext.currentTime + 0.5);\n            \n        } catch (error) {\n            console.log('Audio not available:', error);\n        }\n    }\n\n\n\n    private switchToKey(key: string): void {\n        // If switching to a different key, make character jump\n        if (this.currentKey && this.currentKey !== key) {\n            this.makeCharacterJump(key);\n        }\n\n        // End current platform and start new one\n        this.endCurrentPlatform();\n        this.startNewPlatform(key);\n        this.playNote(key);\n        \n        this.score += 10;\n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n    }\n\n    private startNewPlatform(key: string): void {\n        const { height } = this.cameras.main;\n        \n        // Define height levels for each key\n        const keyHeights: { [key: string]: number } = {\n            'S': height - 80,  // Ground level\n            'D': height - 120, // Level 2\n            'F': height - 160, // Level 3  \n            'G': height - 200, // Level 4\n            'H': height - 240, // Level 5\n            'J': height - 280, // Level 6\n            'K': height - 320  // Highest level\n        };\n        \n        // Color code platforms by height\n        const keyColors: { [key: string]: number } = {\n            'S': 0xe74c3c, // Red (lowest)\n            'D': 0xf39c12, // Orange\n            'F': 0xf1c40f, // Yellow\n            'G': 0x2ecc71, // Green\n            'H': 0x3498db, // Blue\n            'J': 0x9b59b6, // Purple\n            'K': 0xe91e63  // Pink (highest)\n        };\n        \n        // Start platform slightly behind character for smooth landing\n        this.platformStartX = this.character.x - 30;\n        const platformY = keyHeights[key];\n        \n        this.currentPlatform = this.add.rectangle(this.platformStartX, platformY, 60, 15, keyColors[key]);\n        this.physics.add.existing(this.currentPlatform, true);\n        this.platforms.add(this.currentPlatform);\n        \n        this.currentKey = key;\n        console.log(`Started ${key} platform at height ${platformY}`);\n    }\n\n    private extendCurrentPlatform(): void {\n        if (!this.currentPlatform) return;\n        \n        // Extend platform to character's current position\n        const newWidth = this.character.x - this.platformStartX + 50;\n        const newX = this.platformStartX + newWidth / 2;\n        \n        this.currentPlatform.width = Math.max(20, newWidth);\n        this.currentPlatform.x = newX;\n        \n        // Update physics body\n        const body = this.currentPlatform.body as Phaser.Physics.Arcade.StaticBody;\n        body.setSize(this.currentPlatform.width, this.currentPlatform.height);\n        body.updateFromGameObject();\n    }\n\n    private endCurrentPlatform(): void {\n        // Current platform stays in place, just stop extending it\n        this.currentPlatform = null;\n        this.currentKey = null;\n    }\n\n    private makeCharacterJump(newKey: string): void {\n        const characterBody = this.character.body as Phaser.Physics.Arcade.Body;\n        \n        // Calculate height difference for smooth jumping\n        const currentHeight = this.getKeyHeight(this.currentKey!);\n        const newHeight = this.getKeyHeight(newKey);\n        const heightDiff = Math.abs(currentHeight - newHeight);\n        \n        // Base jump velocity scaled by height difference\n        const baseJump = 250;\n        const jumpVelocity = baseJump + (heightDiff * 0.8);\n        \n        // Always jump (even for same level to create smooth transition)\n        characterBody.setVelocityY(-jumpVelocity);\n        \n        console.log(`Character jumping from ${this.currentKey} to ${newKey} (velocity: ${jumpVelocity})`);\n    }\n\n    private getKeyHeight(key: string): number {\n        const { height } = this.cameras.main;\n        const keyHeights: { [key: string]: number } = {\n            'S': height - 80,\n            'D': height - 120,\n            'F': height - 160,\n            'G': height - 200,\n            'H': height - 240,\n            'J': height - 280,\n            'K': height - 320\n        };\n        return keyHeights[key];\n    }\n\n    private updateScore(points: number): void {\n        this.score += points;\n        this.streak++;\n        \n        this.scoreText.setText(`Score: ${Math.floor(this.score)}`);\n        this.streakText.setText(`Streak: ${this.streak}`);\n    }\n\n    private gameOver(): void {\n        this.isGameRunning = false;\n        this.streak = 0;\n        \n        const { width, height } = this.cameras.main;\n        \n        // Stop camera follow\n        this.cameras.main.stopFollow();\n        \n        // Game over screen\n        const gameOverBg = this.add.rectangle(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2,\n            width,\n            height,\n            0x000000,\n            0.8\n        );\n        gameOverBg.setScrollFactor(0);\n        \n        const gameOverTitle = this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 - 80,\n            'Game Over!',\n            {\n                fontSize: '48px',\n                color: '#e74c3c',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        const finalScore = this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 - 20,\n            `Final Score: ${Math.floor(this.score)}`,\n            {\n                fontSize: '24px',\n                color: '#ffffff',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        const restartText = this.add.text(\n            this.cameras.main.scrollX + width / 2,\n            this.cameras.main.scrollY + height / 2 + 30,\n            'Press R to restart or ESC for menu',\n            {\n                fontSize: '18px',\n                color: '#bdc3c7',\n                fontFamily: 'Arial, sans-serif'\n            }\n        ).setOrigin(0.5).setScrollFactor(0);\n\n        // Pulsing restart text\n        this.tweens.add({\n            targets: restartText,\n            alpha: 0.5,\n            duration: 1000,\n            yoyo: true,\n            repeat: -1\n        });\n\n        // Send score to parent (Reddit)\n        if (window.parent) {\n            window.parent.postMessage({\n                type: 'GAME_OVER',\n                data: { finalScore: Math.floor(this.score) }\n            }, '*');\n        }\n    }\n}","import { Scene, GameObjects } from 'phaser';\n\nexport class MainMenu extends Scene {\n  private title: GameObjects.Text | null = null;\n  private subtitle: GameObjects.Text | null = null;\n  private instructions: GameObjects.Text | null = null;\n  private startText: GameObjects.Text | null = null;\n  private credits: GameObjects.Text | null = null;\n\n  constructor() {\n    super('MainMenu');\n  }\n\n  init(): void {\n    this.title = null;\n    this.subtitle = null;\n    this.instructions = null;\n    this.startText = null;\n    this.credits = null;\n  }\n\n  create() {\n    this.refreshLayout();\n\n    // Re-calculate positions whenever the game canvas is resized\n    this.scale.on('resize', () => this.refreshLayout());\n\n    // Start game on click or space\n    this.input.once('pointerdown', () => {\n      this.scene.start('MuseRunnerGame');\n    });\n\n    this.input.keyboard!.on('keydown-SPACE', () => {\n      this.scene.start('MuseRunnerGame');\n    });\n  }\n\n  private refreshLayout(): void {\n    const { width, height } = this.scale;\n\n    // Resize camera to new viewport\n    this.cameras.resize(width, height);\n\n    // Background\n    this.add.rectangle(width / 2, height / 2, width, height, 0x2c3e50);\n\n    // Scale factor for responsive design\n    const scaleFactor = Math.min(width / 1024, height / 768);\n\n    // Title\n    if (!this.title) {\n      this.title = this.add.text(0, 0, '🎵 Muse Runner 🏃‍♂️', {\n        fontSize: '48px',\n        color: '#ffffff',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.title.setPosition(width / 2, height / 3);\n    this.title.setScale(scaleFactor);\n\n    // Subtitle\n    if (!this.subtitle) {\n      this.subtitle = this.add.text(0, 0, 'Rhythm Platformer', {\n        fontSize: '24px',\n        color: '#3498db',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.subtitle.setPosition(width / 2, height / 3 + 60 * scaleFactor);\n    this.subtitle.setScale(scaleFactor);\n\n    // Instructions\n    if (!this.instructions) {\n      this.instructions = this.add.text(0, 0, \n        'Control your character by playing musical notes!\\n\\nPress S-D-F-G-H-J-K keys to create platforms\\nKeep your character from falling off the screen', {\n        fontSize: '18px',\n        color: '#ecf0f1',\n        fontFamily: 'Arial, sans-serif',\n        align: 'center'\n      }).setOrigin(0.5);\n    }\n    this.instructions.setPosition(width / 2, height / 2);\n    this.instructions.setScale(scaleFactor);\n\n    // Start button text\n    if (!this.startText) {\n      this.startText = this.add.text(0, 0, 'Click to Start or Press SPACE', {\n        fontSize: '24px',\n        color: '#2ecc71',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n\n      // Pulsing effect\n      this.tweens.add({\n        targets: this.startText,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1\n      });\n    }\n    this.startText.setPosition(width / 2, height * 0.75);\n    this.startText.setScale(scaleFactor);\n\n    // Version info\n    if (!this.credits) {\n      this.credits = this.add.text(0, 0, 'v0.0.4 - Built with Phaser.js for Reddit\\'s Community Games Challenge', {\n        fontSize: '14px',\n        color: '#95a5a6',\n        fontFamily: 'Arial, sans-serif'\n      }).setOrigin(0.5);\n    }\n    this.credits.setPosition(width / 2, height - 40);\n    this.credits.setScale(scaleFactor * 0.8);\n  }\n}\n","import { Scene } from 'phaser';\n\nexport class Preloader extends Scene {\n  constructor() {\n    super('Preloader');\n  }\n\n  init() {\n    //  We loaded this image in our Boot Scene, so we can display it here\n    this.add.image(512, 384, 'background');\n\n    //  A simple progress bar. This is the outline of the bar.\n    this.add.rectangle(512, 384, 468, 32).setStrokeStyle(1, 0xffffff);\n\n    //  This is the progress bar itself. It will increase in size from the left based on the % of progress.\n    const bar = this.add.rectangle(512 - 230, 384, 4, 28, 0xffffff);\n\n    //  Use the 'progress' event emitted by the LoaderPlugin to update the loading bar\n    this.load.on('progress', (progress: number) => {\n      //  Update the progress bar (our bar is 464px wide, so 100% = 464px)\n      bar.width = 4 + 460 * progress;\n    });\n  }\n\n  preload() {\n    //  Load the assets for the game - Replace with your own assets\n    this.load.setPath('assets');\n\n    this.load.image('logo', 'logo.png');\n\n    // Assets loaded - spark texture removed to fix freezing issue\n  }\n\n  create() {\n    //  When all the assets have loaded, it's often worth creating global objects here that the rest of the game can use.\n    //  For example, you can define global animations here, so we can use them in other scenes.\n\n    //  Move to the MainMenu. You could also swap this for a Scene Transition, such as a camera fade.\n    this.scene.start('MainMenu');\n  }\n}\n","import { Boot } from './scenes/Boot';\nimport { GameOver } from './scenes/GameOver';\nimport { MuseRunnerGame } from './scenes/MuseRunnerGame';\nimport { MainMenu } from './scenes/MainMenu';\nimport * as Phaser from 'phaser';\nimport { AUTO, Game } from 'phaser';\nimport { Preloader } from './scenes/Preloader';\n\n//  Muse Runner - Rhythm Platformer Game Configuration\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  parent: 'game-container',\n  backgroundColor: '#2c3e50',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 600 },\n      debug: false\n    }\n  },\n  scale: {\n    mode: Phaser.Scale.RESIZE,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1024,\n    height: 768,\n  },\n  scene: [Boot, Preloader, MainMenu, MuseRunnerGame, GameOver],\n};\n\nconst StartGame = (parent: string) => {\n  return new Game({ ...config, parent });\n};\n\nexport default StartGame;\n","import StartGame from './game/main';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  StartGame('game-container');\n});\n"],"names":["Boot","Scene","constructor","super","preload","this","load","image","create","scene","start","GameOver","__publicField","camera","cameras","main","setBackgroundColor","background","add","setOrigin","setAlpha","gameover_text","text","fontFamily","fontSize","color","stroke","strokeThickness","align","updateLayout","scale","width","height","on","gameSize","input","once","resize","setDisplaySize","scaleFactor","Math","min","setPosition","setScale","MuseRunnerGame","S","D","F","G","H","J","K","character","rectangle","physics","existing","characterBody","body","setCollideWorldBounds","setBounce","setMaxVelocity","platforms","group","collider","gameKeys","keyboard","addKey","Phaser","Input","Keyboard","KeyCodes","scoreText","streakText","instructionText","tweens","targets","alpha","duration","yoyo","repeat","restart","isGameRunning","startFollow","setDeadzone","score","streak","characterSpeed","startNewPlatform","update","setVelocityX","Object","keys","forEach","key","JustDown","console","log","switchToKey","currentPlatform","currentKey","extendCurrentPlatform","y","gameOver","children","entries","platform","x","destroy","playNote","noteFrequencies","playMusicalTone","setFillStyle","time","delayedCall","frequency","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","setValueAtTime","currentTime","type","gain","linearRampToValueAtTime","exponentialRampToValueAtTime","stop","error","makeCharacterJump","endCurrentPlatform","setText","floor","keyHeights","platformStartX","platformY","newWidth","newX","max","setSize","updateFromGameObject","newKey","currentHeight","getKeyHeight","newHeight","jumpVelocity","abs","setVelocityY","updateScore","points","stopFollow","scrollX","scrollY","setScrollFactor","restartText","parent","postMessage","data","finalScore","MainMenu","init","title","subtitle","instructions","startText","credits","refreshLayout","Preloader","setStrokeStyle","bar","progress","setPath","config","AUTO","backgroundColor","default","arcade","gravity","debug","mode","Phaser.Scale","RESIZE","autoCenter","CENTER_BOTH","document","addEventListener","Game"],"mappings":"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"}