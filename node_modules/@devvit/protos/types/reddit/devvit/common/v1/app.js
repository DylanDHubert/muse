/**
 * #app.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { AdsConfig } from "../../ads/v1/ads.js";
import { scopeFromJSON, scopeToJSON } from "../../app_permission/v1/app_permission.js";
export var AppVisibility;
(function (AppVisibility) {
    AppVisibility[AppVisibility["PUBLIC"] = 0] = "PUBLIC";
    AppVisibility[AppVisibility["PRIVATE"] = 1] = "PRIVATE";
    AppVisibility[AppVisibility["UNLISTED"] = 2] = "UNLISTED";
    AppVisibility[AppVisibility["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AppVisibility || (AppVisibility = {}));
export function appVisibilityFromJSON(object) {
    switch (object) {
        case 0:
        case "PUBLIC":
            return AppVisibility.PUBLIC;
        case 1:
        case "PRIVATE":
            return AppVisibility.PRIVATE;
        case 2:
        case "UNLISTED":
            return AppVisibility.UNLISTED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AppVisibility.UNRECOGNIZED;
    }
}
export function appVisibilityToJSON(object) {
    switch (object) {
        case AppVisibility.PUBLIC:
            return 0;
        case AppVisibility.PRIVATE:
            return 1;
        case AppVisibility.UNLISTED:
            return 2;
        case AppVisibility.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseApp() {
    return {
        id: "",
        slug: "",
        name: "",
        visibility: 0,
        owner: undefined,
        version: "",
        adsConfig: undefined,
        termsAndConditions: "",
        privacyPolicy: "",
        requestedPermissionScopes: [],
    };
}
export const App = {
    $type: "reddit.devvit.common.v1.App",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.slug !== "") {
            writer.uint32(18).string(message.slug);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.visibility !== 0) {
            writer.uint32(32).int32(message.visibility);
        }
        if (message.owner !== undefined) {
            AppOwner.encode(message.owner, writer.uint32(42).fork()).ldelim();
        }
        if (message.version !== "") {
            writer.uint32(50).string(message.version);
        }
        if (message.adsConfig !== undefined) {
            AdsConfig.encode(message.adsConfig, writer.uint32(58).fork()).ldelim();
        }
        if (message.termsAndConditions !== "") {
            writer.uint32(66).string(message.termsAndConditions);
        }
        if (message.privacyPolicy !== "") {
            writer.uint32(74).string(message.privacyPolicy);
        }
        writer.uint32(82).fork();
        for (const v of message.requestedPermissionScopes) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.owner = AppOwner.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.adsConfig = AdsConfig.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.termsAndConditions = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.privacyPolicy = reader.string();
                    continue;
                case 10:
                    if (tag === 80) {
                        message.requestedPermissionScopes.push(reader.int32());
                        continue;
                    }
                    if (tag === 82) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.requestedPermissionScopes.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            visibility: isSet(object.visibility) ? appVisibilityFromJSON(object.visibility) : 0,
            owner: isSet(object.owner) ? AppOwner.fromJSON(object.owner) : undefined,
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            adsConfig: isSet(object.adsConfig) ? AdsConfig.fromJSON(object.adsConfig) : undefined,
            termsAndConditions: isSet(object.termsAndConditions) ? globalThis.String(object.termsAndConditions) : "",
            privacyPolicy: isSet(object.privacyPolicy) ? globalThis.String(object.privacyPolicy) : "",
            requestedPermissionScopes: globalThis.Array.isArray(object?.requestedPermissionScopes)
                ? object.requestedPermissionScopes.map((e) => scopeFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.visibility !== 0) {
            obj.visibility = appVisibilityToJSON(message.visibility);
        }
        if (message.owner !== undefined) {
            obj.owner = AppOwner.toJSON(message.owner);
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.adsConfig !== undefined) {
            obj.adsConfig = AdsConfig.toJSON(message.adsConfig);
        }
        if (message.termsAndConditions !== "") {
            obj.termsAndConditions = message.termsAndConditions;
        }
        if (message.privacyPolicy !== "") {
            obj.privacyPolicy = message.privacyPolicy;
        }
        if (message.requestedPermissionScopes?.length) {
            obj.requestedPermissionScopes = message.requestedPermissionScopes.map((e) => scopeToJSON(e));
        }
        return obj;
    },
    create(base) {
        return App.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseApp();
        message.id = object.id ?? "";
        message.slug = object.slug ?? "";
        message.name = object.name ?? "";
        message.visibility = object.visibility ?? 0;
        message.owner = (object.owner !== undefined && object.owner !== null)
            ? AppOwner.fromPartial(object.owner)
            : undefined;
        message.version = object.version ?? "";
        message.adsConfig = (object.adsConfig !== undefined && object.adsConfig !== null)
            ? AdsConfig.fromPartial(object.adsConfig)
            : undefined;
        message.termsAndConditions = object.termsAndConditions ?? "";
        message.privacyPolicy = object.privacyPolicy ?? "";
        message.requestedPermissionScopes = object.requestedPermissionScopes?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(App.$type, App);
function createBaseAppOwner() {
    return { userId: "", userName: "" };
}
export const AppOwner = {
    $type: "reddit.devvit.common.v1.AppOwner",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.userName !== "") {
            writer.uint32(18).string(message.userName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        return obj;
    },
    create(base) {
        return AppOwner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppOwner();
        message.userId = object.userId ?? "";
        message.userName = object.userName ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppOwner.$type, AppOwner);
function createBaseAppConfig() {
    return { entrypoints: {} };
}
export const AppConfig = {
    $type: "reddit.devvit.common.v1.AppConfig",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.entrypoints).forEach(([key, value]) => {
            AppConfig_EntrypointsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = AppConfig_EntrypointsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.entrypoints[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entrypoints: isObject(object.entrypoints)
                ? Object.entries(object.entrypoints).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.entrypoints) {
            const entries = Object.entries(message.entrypoints);
            if (entries.length > 0) {
                obj.entrypoints = {};
                entries.forEach(([k, v]) => {
                    obj.entrypoints[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return AppConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppConfig();
        message.entrypoints = Object.entries(object.entrypoints ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(AppConfig.$type, AppConfig);
function createBaseAppConfig_EntrypointsEntry() {
    return { key: "", value: "" };
}
export const AppConfig_EntrypointsEntry = {
    $type: "reddit.devvit.common.v1.AppConfig.EntrypointsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppConfig_EntrypointsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return AppConfig_EntrypointsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppConfig_EntrypointsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppConfig_EntrypointsEntry.$type, AppConfig_EntrypointsEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
