import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, } from '../../../../../devvit/dev_portal/installation/installation.js';
export var InstallationServiceMethod;
(function (InstallationServiceMethod) {
    InstallationServiceMethod["Create"] = "Create";
    InstallationServiceMethod["GetByAppNameAndInstallLocation"] = "GetByAppNameAndInstallLocation";
})(InstallationServiceMethod || (InstallationServiceMethod = {}));
export const InstallationServiceMethodList = [
    InstallationServiceMethod.Create,
    InstallationServiceMethod.GetByAppNameAndInstallLocation,
];
export function createInstallationServiceServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.dev_portal.v1',
        serviceName: 'InstallationService',
        methodList: InstallationServiceMethodList,
        matchRoute: matchInstallationServiceRoute,
    });
}
function matchInstallationServiceRoute(method, events) {
    switch (method) {
        case 'Create':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Create' };
                await events.onMatch(ctx);
                return handleInstallationServiceCreateRequest(ctx, service, data, interceptors);
            };
        case 'GetByAppNameAndInstallLocation':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetByAppNameAndInstallLocation' };
                await events.onMatch(ctx);
                return handleInstallationServiceGetByAppNameAndInstallLocationRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInstallationServiceCreateRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInstallationServiceCreateJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInstallationServiceCreateProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInstallationServiceGetByAppNameAndInstallLocationRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInstallationServiceGetByAppNameAndInstallLocationJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInstallationServiceGetByAppNameAndInstallLocationProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleInstallationServiceCreateJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = InstallationCreationRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Create(ctx, inputReq);
        });
    }
    else {
        response = await service.Create(ctx, request);
    }
    return JSON.stringify(FullInstallationInfo.toJSON(response));
}
async function handleInstallationServiceGetByAppNameAndInstallLocationJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetByAppNameAndInstallLocationRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetByAppNameAndInstallLocation(ctx, inputReq);
        });
    }
    else {
        response = await service.GetByAppNameAndInstallLocation(ctx, request);
    }
    return JSON.stringify(FullInstallationInfo.toJSON(response));
}
async function handleInstallationServiceCreateProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = InstallationCreationRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Create(ctx, inputReq);
        });
    }
    else {
        response = await service.Create(ctx, request);
    }
    return Buffer.from(FullInstallationInfo.encode(response).finish());
}
async function handleInstallationServiceGetByAppNameAndInstallLocationProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetByAppNameAndInstallLocationRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetByAppNameAndInstallLocation(ctx, inputReq);
        });
    }
    else {
        response = await service.GetByAppNameAndInstallLocation(ctx, request);
    }
    return Buffer.from(FullInstallationInfo.encode(response).finish());
}
