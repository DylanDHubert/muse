import { InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, } from '../../../../../devvit/dev_portal/installation/installation.js';
export class InstallationServiceClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.GetByAppNameAndInstallLocation.bind(this);
    }
    Create(request) {
        const data = InstallationCreationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.v1.InstallationService', 'Create', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
    GetByAppNameAndInstallLocation(request) {
        const data = GetByAppNameAndInstallLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.dev_portal.v1.InstallationService', 'GetByAppNameAndInstallLocation', 'application/json', data);
        return promise.then((data) => FullInstallationInfo.fromJSON(data));
    }
}
export class InstallationServiceClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Create.bind(this);
        this.GetByAppNameAndInstallLocation.bind(this);
    }
    Create(request) {
        const data = InstallationCreationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.v1.InstallationService', 'Create', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
    GetByAppNameAndInstallLocation(request) {
        const data = GetByAppNameAndInstallLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.dev_portal.v1.InstallationService', 'GetByAppNameAndInstallLocation', 'application/protobuf', data);
        return promise.then((data) => FullInstallationInfo.decode(data));
    }
}
