/**
 * #cache.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseCacheEntry() {
    return { key: "", value: undefined, byteValue: undefined, ttl: 0 };
}
export const CacheEntry = {
    $type: "devvit.gateway.cache.v1alpha.CacheEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            writer.uint32(18).string(message.value);
        }
        if (message.byteValue !== undefined) {
            writer.uint32(34).bytes(message.byteValue);
        }
        if (message.ttl !== 0) {
            writer.uint32(24).int64(message.ttl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCacheEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.byteValue = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.ttl = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : undefined,
            byteValue: isSet(object.byteValue) ? bytesFromBase64(object.byteValue) : undefined,
            ttl: isSet(object.ttl) ? globalThis.Number(object.ttl) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = message.value;
        }
        if (message.byteValue !== undefined) {
            obj.byteValue = base64FromBytes(message.byteValue);
        }
        if (message.ttl !== 0) {
            obj.ttl = Math.round(message.ttl);
        }
        return obj;
    },
    create(base) {
        return CacheEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCacheEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? undefined;
        message.byteValue = object.byteValue ?? undefined;
        message.ttl = object.ttl ?? 0;
        return message;
    },
};
messageTypeRegistry.set(CacheEntry.$type, CacheEntry);
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
