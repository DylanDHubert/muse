/**
 * #app_permission.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { consentStatusFromJSON, consentStatusToJSON, } from "../../../../reddit/devvit/app_permission/v1/app_permission.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseCanRunAsUserEffect() {
    return { postId: undefined, appSlug: undefined, subredditId: undefined };
}
export const CanRunAsUserEffect = {
    $type: "devvit.ui.effects.v1alpha.CanRunAsUserEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postId !== undefined) {
            writer.uint32(10).string(message.postId);
        }
        if (message.appSlug !== undefined) {
            writer.uint32(18).string(message.appSlug);
        }
        if (message.subredditId !== undefined) {
            writer.uint32(26).string(message.subredditId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCanRunAsUserEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appSlug = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.subredditId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postId: isSet(object.postId) ? globalThis.String(object.postId) : undefined,
            appSlug: isSet(object.appSlug) ? globalThis.String(object.appSlug) : undefined,
            subredditId: isSet(object.subredditId) ? globalThis.String(object.subredditId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postId !== undefined) {
            obj.postId = message.postId;
        }
        if (message.appSlug !== undefined) {
            obj.appSlug = message.appSlug;
        }
        if (message.subredditId !== undefined) {
            obj.subredditId = message.subredditId;
        }
        return obj;
    },
    create(base) {
        return CanRunAsUserEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCanRunAsUserEffect();
        message.postId = object.postId ?? undefined;
        message.appSlug = object.appSlug ?? undefined;
        message.subredditId = object.subredditId ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(CanRunAsUserEffect.$type, CanRunAsUserEffect);
function createBaseConsentStatusEvent() {
    return { consentStatus: 0 };
}
export const ConsentStatusEvent = {
    $type: "devvit.ui.effects.v1alpha.ConsentStatusEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.consentStatus !== 0) {
            writer.uint32(8).int32(message.consentStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConsentStatusEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.consentStatus = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { consentStatus: isSet(object.consentStatus) ? consentStatusFromJSON(object.consentStatus) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.consentStatus !== 0) {
            obj.consentStatus = consentStatusToJSON(message.consentStatus);
        }
        return obj;
    },
    create(base) {
        return ConsentStatusEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConsentStatusEvent();
        message.consentStatus = object.consentStatus ?? 0;
        return message;
    },
};
messageTypeRegistry.set(ConsentStatusEvent.$type, ConsentStatusEvent);
function isSet(value) {
    return value !== null && value !== undefined;
}
