/**
 * #immersive_mode.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
/** How a Devvit app is presented. */
export var WebViewImmersiveMode;
(function (WebViewImmersiveMode) {
    WebViewImmersiveMode[WebViewImmersiveMode["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * INLINE_MODE - Conventional post presentation. May appear adjacent other posts in a feed
     * or with comments.
     */
    WebViewImmersiveMode[WebViewImmersiveMode["INLINE_MODE"] = 1] = "INLINE_MODE";
    /**
     * IMMERSIVE_MODE - Large modal expanded presentation. Appears popped out from the rest of the
     * Reddit experience which is disabled.
     */
    WebViewImmersiveMode[WebViewImmersiveMode["IMMERSIVE_MODE"] = 2] = "IMMERSIVE_MODE";
    WebViewImmersiveMode[WebViewImmersiveMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebViewImmersiveMode || (WebViewImmersiveMode = {}));
export function webViewImmersiveModeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSPECIFIED":
            return WebViewImmersiveMode.UNSPECIFIED;
        case 1:
        case "INLINE_MODE":
            return WebViewImmersiveMode.INLINE_MODE;
        case 2:
        case "IMMERSIVE_MODE":
            return WebViewImmersiveMode.IMMERSIVE_MODE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return WebViewImmersiveMode.UNRECOGNIZED;
    }
}
export function webViewImmersiveModeToJSON(object) {
    switch (object) {
        case WebViewImmersiveMode.UNSPECIFIED:
            return 0;
        case WebViewImmersiveMode.INLINE_MODE:
            return 1;
        case WebViewImmersiveMode.IMMERSIVE_MODE:
            return 2;
        case WebViewImmersiveMode.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseWebViewImmersiveModeEffect() {
    return { immersiveMode: 0, entryUrl: undefined };
}
export const WebViewImmersiveModeEffect = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewImmersiveModeEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.immersiveMode !== 0) {
            writer.uint32(8).int32(message.immersiveMode);
        }
        if (message.entryUrl !== undefined) {
            writer.uint32(18).string(message.entryUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewImmersiveModeEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.immersiveMode = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.entryUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            immersiveMode: isSet(object.immersiveMode) ? webViewImmersiveModeFromJSON(object.immersiveMode) : 0,
            entryUrl: isSet(object.entryUrl) ? globalThis.String(object.entryUrl) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.immersiveMode !== 0) {
            obj.immersiveMode = webViewImmersiveModeToJSON(message.immersiveMode);
        }
        if (message.entryUrl !== undefined) {
            obj.entryUrl = message.entryUrl;
        }
        return obj;
    },
    create(base) {
        return WebViewImmersiveModeEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewImmersiveModeEffect();
        message.immersiveMode = object.immersiveMode ?? 0;
        message.entryUrl = object.entryUrl ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewImmersiveModeEffect.$type, WebViewImmersiveModeEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
