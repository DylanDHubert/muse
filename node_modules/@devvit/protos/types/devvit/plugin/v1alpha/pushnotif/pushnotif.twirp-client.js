import { QueuePushNotificationRequest, QueuePushNotificationResponse, BulkQueuePushNotificationRequest, BulkQueuePushNotificationResponse, OptInCurrentUserResponse, OptOutCurrentUserResponse, ListOptedInUsersRequest, ListOptedInUsersResponse, } from './pushnotif.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export class PushNotifClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.QueuePushNotification.bind(this);
        this.BulkQueuePushNotification.bind(this);
        this.OptInCurrentUser.bind(this);
        this.OptOutCurrentUser.bind(this);
        this.ListOptedInUsers.bind(this);
    }
    QueuePushNotification(request) {
        const data = QueuePushNotificationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'QueuePushNotification', 'application/json', data);
        return promise.then((data) => QueuePushNotificationResponse.fromJSON(data));
    }
    BulkQueuePushNotification(request) {
        const data = BulkQueuePushNotificationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'BulkQueuePushNotification', 'application/json', data);
        return promise.then((data) => BulkQueuePushNotificationResponse.fromJSON(data));
    }
    OptInCurrentUser(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'OptInCurrentUser', 'application/json', data);
        return promise.then((data) => OptInCurrentUserResponse.fromJSON(data));
    }
    OptOutCurrentUser(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'OptOutCurrentUser', 'application/json', data);
        return promise.then((data) => OptOutCurrentUserResponse.fromJSON(data));
    }
    ListOptedInUsers(request) {
        const data = ListOptedInUsersRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'ListOptedInUsers', 'application/json', data);
        return promise.then((data) => ListOptedInUsersResponse.fromJSON(data));
    }
}
export class PushNotifClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.QueuePushNotification.bind(this);
        this.BulkQueuePushNotification.bind(this);
        this.OptInCurrentUser.bind(this);
        this.OptOutCurrentUser.bind(this);
        this.ListOptedInUsers.bind(this);
    }
    QueuePushNotification(request) {
        const data = QueuePushNotificationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'QueuePushNotification', 'application/protobuf', data);
        return promise.then((data) => QueuePushNotificationResponse.decode(data));
    }
    BulkQueuePushNotification(request) {
        const data = BulkQueuePushNotificationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'BulkQueuePushNotification', 'application/protobuf', data);
        return promise.then((data) => BulkQueuePushNotificationResponse.decode(data));
    }
    OptInCurrentUser(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'OptInCurrentUser', 'application/protobuf', data);
        return promise.then((data) => OptInCurrentUserResponse.decode(data));
    }
    OptOutCurrentUser(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'OptOutCurrentUser', 'application/protobuf', data);
        return promise.then((data) => OptOutCurrentUserResponse.decode(data));
    }
    ListOptedInUsers(request) {
        const data = ListOptedInUsersRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.v1alpha.pushnotif.PushNotif', 'ListOptedInUsers', 'application/protobuf', data);
        return promise.then((data) => ListOptedInUsersResponse.decode(data));
    }
}
