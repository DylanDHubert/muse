/**
 * #pushnotif.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseQueuePushNotificationRequest() {
    return { recipientId: "", title: "", body: "", comment: undefined, post: undefined };
}
export const QueuePushNotificationRequest = {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.recipientId !== "") {
            writer.uint32(10).string(message.recipientId);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.body !== "") {
            writer.uint32(26).string(message.body);
        }
        if (message.comment !== undefined) {
            writer.uint32(34).string(message.comment);
        }
        if (message.post !== undefined) {
            writer.uint32(42).string(message.post);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueuePushNotificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.recipientId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.post = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            recipientId: isSet(object.recipientId) ? globalThis.String(object.recipientId) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            comment: isSet(object.comment) ? globalThis.String(object.comment) : undefined,
            post: isSet(object.post) ? globalThis.String(object.post) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.recipientId !== "") {
            obj.recipientId = message.recipientId;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.comment !== undefined) {
            obj.comment = message.comment;
        }
        if (message.post !== undefined) {
            obj.post = message.post;
        }
        return obj;
    },
    create(base) {
        return QueuePushNotificationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueuePushNotificationRequest();
        message.recipientId = object.recipientId ?? "";
        message.title = object.title ?? "";
        message.body = object.body ?? "";
        message.comment = object.comment ?? undefined;
        message.post = object.post ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(QueuePushNotificationRequest.$type, QueuePushNotificationRequest);
function createBaseQueuePushNotificationResponse() {
    return { success: false, message: "", timestamp: 0 };
}
export const QueuePushNotificationResponse = {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.timestamp !== 0) {
            writer.uint32(24).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueuePushNotificationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        return obj;
    },
    create(base) {
        return QueuePushNotificationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueuePushNotificationResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        message.timestamp = object.timestamp ?? 0;
        return message;
    },
};
messageTypeRegistry.set(QueuePushNotificationResponse.$type, QueuePushNotificationResponse);
function createBaseBulkQueuePushNotificationRequest() {
    return { title: "", body: "", recipients: [] };
}
export const BulkQueuePushNotificationRequest = {
    $type: "devvit.plugin.v1alpha.pushnotif.BulkQueuePushNotificationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.body !== "") {
            writer.uint32(18).string(message.body);
        }
        for (const v of message.recipients) {
            Recipient.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkQueuePushNotificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.recipients.push(Recipient.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? globalThis.String(object.body) : "",
            recipients: globalThis.Array.isArray(object?.recipients)
                ? object.recipients.map((e) => Recipient.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        if (message.recipients?.length) {
            obj.recipients = message.recipients.map((e) => Recipient.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return BulkQueuePushNotificationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkQueuePushNotificationRequest();
        message.title = object.title ?? "";
        message.body = object.body ?? "";
        message.recipients = object.recipients?.map((e) => Recipient.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(BulkQueuePushNotificationRequest.$type, BulkQueuePushNotificationRequest);
function createBaseBulkQueuePushNotificationResponse() {
    return { successCount: 0, failureCount: 0, errors: [], timestamp: 0 };
}
export const BulkQueuePushNotificationResponse = {
    $type: "devvit.plugin.v1alpha.pushnotif.BulkQueuePushNotificationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.successCount !== 0) {
            writer.uint32(8).int32(message.successCount);
        }
        if (message.failureCount !== 0) {
            writer.uint32(16).int32(message.failureCount);
        }
        for (const v of message.errors) {
            PushNotificationError.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.timestamp !== 0) {
            writer.uint32(32).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkQueuePushNotificationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.successCount = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.failureCount = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.errors.push(PushNotificationError.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            successCount: isSet(object.successCount) ? globalThis.Number(object.successCount) : 0,
            failureCount: isSet(object.failureCount) ? globalThis.Number(object.failureCount) : 0,
            errors: globalThis.Array.isArray(object?.errors)
                ? object.errors.map((e) => PushNotificationError.fromJSON(e))
                : [],
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.successCount !== 0) {
            obj.successCount = Math.round(message.successCount);
        }
        if (message.failureCount !== 0) {
            obj.failureCount = Math.round(message.failureCount);
        }
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => PushNotificationError.toJSON(e));
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        return obj;
    },
    create(base) {
        return BulkQueuePushNotificationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkQueuePushNotificationResponse();
        message.successCount = object.successCount ?? 0;
        message.failureCount = object.failureCount ?? 0;
        message.errors = object.errors?.map((e) => PushNotificationError.fromPartial(e)) || [];
        message.timestamp = object.timestamp ?? 0;
        return message;
    },
};
messageTypeRegistry.set(BulkQueuePushNotificationResponse.$type, BulkQueuePushNotificationResponse);
function createBaseRecipient() {
    return { userId: "", comment: undefined, post: undefined, data: undefined };
}
export const Recipient = {
    $type: "devvit.plugin.v1alpha.pushnotif.Recipient",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.comment !== undefined) {
            writer.uint32(18).string(message.comment);
        }
        if (message.post !== undefined) {
            writer.uint32(26).string(message.post);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecipient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.post = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            comment: isSet(object.comment) ? globalThis.String(object.comment) : undefined,
            post: isSet(object.post) ? globalThis.String(object.post) : undefined,
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.comment !== undefined) {
            obj.comment = message.comment;
        }
        if (message.post !== undefined) {
            obj.post = message.post;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return Recipient.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRecipient();
        message.userId = object.userId ?? "";
        message.comment = object.comment ?? undefined;
        message.post = object.post ?? undefined;
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(Recipient.$type, Recipient);
function createBasePushNotificationError() {
    return { userId: "", message: "" };
}
export const PushNotificationError = {
    $type: "devvit.plugin.v1alpha.pushnotif.PushNotificationError",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePushNotificationError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return PushNotificationError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePushNotificationError();
        message.userId = object.userId ?? "";
        message.message = object.message ?? "";
        return message;
    },
};
messageTypeRegistry.set(PushNotificationError.$type, PushNotificationError);
function createBaseOptInCurrentUserResponse() {
    return { success: false, message: "" };
}
export const OptInCurrentUserResponse = {
    $type: "devvit.plugin.v1alpha.pushnotif.OptInCurrentUserResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptInCurrentUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return OptInCurrentUserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptInCurrentUserResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        return message;
    },
};
messageTypeRegistry.set(OptInCurrentUserResponse.$type, OptInCurrentUserResponse);
function createBaseOptOutCurrentUserResponse() {
    return { success: false, message: "" };
}
export const OptOutCurrentUserResponse = {
    $type: "devvit.plugin.v1alpha.pushnotif.OptOutCurrentUserResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptOutCurrentUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return OptOutCurrentUserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptOutCurrentUserResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        return message;
    },
};
messageTypeRegistry.set(OptOutCurrentUserResponse.$type, OptOutCurrentUserResponse);
function createBaseListOptedInUsersRequest() {
    return { after: undefined, before: undefined, limit: undefined };
}
export const ListOptedInUsersRequest = {
    $type: "devvit.plugin.v1alpha.pushnotif.ListOptedInUsersRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.after !== undefined) {
            writer.uint32(10).string(message.after);
        }
        if (message.before !== undefined) {
            writer.uint32(18).string(message.before);
        }
        if (message.limit !== undefined) {
            writer.uint32(24).int64(message.limit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOptedInUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.after = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.before = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.limit = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            after: isSet(object.after) ? globalThis.String(object.after) : undefined,
            before: isSet(object.before) ? globalThis.String(object.before) : undefined,
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.after !== undefined) {
            obj.after = message.after;
        }
        if (message.before !== undefined) {
            obj.before = message.before;
        }
        if (message.limit !== undefined) {
            obj.limit = Math.round(message.limit);
        }
        return obj;
    },
    create(base) {
        return ListOptedInUsersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListOptedInUsersRequest();
        message.after = object.after ?? undefined;
        message.before = object.before ?? undefined;
        message.limit = object.limit ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(ListOptedInUsersRequest.$type, ListOptedInUsersRequest);
function createBaseListOptedInUsersResponse() {
    return { userIds: [], next: undefined, prev: undefined };
}
export const ListOptedInUsersResponse = {
    $type: "devvit.plugin.v1alpha.pushnotif.ListOptedInUsersResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.userIds) {
            writer.uint32(10).string(v);
        }
        if (message.next !== undefined) {
            writer.uint32(18).string(message.next);
        }
        if (message.prev !== undefined) {
            writer.uint32(26).string(message.prev);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOptedInUsersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userIds.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.next = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.prev = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e) => globalThis.String(e)) : [],
            next: isSet(object.next) ? globalThis.String(object.next) : undefined,
            prev: isSet(object.prev) ? globalThis.String(object.prev) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userIds?.length) {
            obj.userIds = message.userIds;
        }
        if (message.next !== undefined) {
            obj.next = message.next;
        }
        if (message.prev !== undefined) {
            obj.prev = message.prev;
        }
        return obj;
    },
    create(base) {
        return ListOptedInUsersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListOptedInUsersResponse();
        message.userIds = object.userIds?.map((e) => e) || [];
        message.next = object.next ?? undefined;
        message.prev = object.prev ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(ListOptedInUsersResponse.$type, ListOptedInUsersResponse);
export const PushNotifServiceName = "devvit.plugin.v1alpha.pushnotif.PushNotif";
export class PushNotifClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PushNotifServiceName;
        this.rpc = rpc;
        this.QueuePushNotification = this.QueuePushNotification.bind(this);
        this.BulkQueuePushNotification = this.BulkQueuePushNotification.bind(this);
        this.OptInCurrentUser = this.OptInCurrentUser.bind(this);
        this.OptOutCurrentUser = this.OptOutCurrentUser.bind(this);
        this.ListOptedInUsers = this.ListOptedInUsers.bind(this);
    }
    QueuePushNotification(request, metadata) {
        const data = QueuePushNotificationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "QueuePushNotification", data, metadata);
        return promise.then((data) => QueuePushNotificationResponse.decode(_m0.Reader.create(data)));
    }
    BulkQueuePushNotification(request, metadata) {
        const data = BulkQueuePushNotificationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkQueuePushNotification", data, metadata);
        return promise.then((data) => BulkQueuePushNotificationResponse.decode(_m0.Reader.create(data)));
    }
    OptInCurrentUser(request, metadata) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "OptInCurrentUser", data, metadata);
        return promise.then((data) => OptInCurrentUserResponse.decode(_m0.Reader.create(data)));
    }
    OptOutCurrentUser(request, metadata) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "OptOutCurrentUser", data, metadata);
        return promise.then((data) => OptOutCurrentUserResponse.decode(_m0.Reader.create(data)));
    }
    ListOptedInUsers(request, metadata) {
        const data = ListOptedInUsersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListOptedInUsers", data, metadata);
        return promise.then((data) => ListOptedInUsersResponse.decode(_m0.Reader.create(data)));
    }
}
export const PushNotifDefinition = {
    name: "PushNotif",
    fullName: "devvit.plugin.v1alpha.pushnotif.PushNotif",
    methods: {
        /**
         * Queue a push notification for delivery to a user
         *
         * This method queues a notification for asynchronous delivery. The actual
         * delivery timing and success is not guaranteed by this service.
         */
        queuePushNotification: {
            name: "QueuePushNotification",
            requestType: QueuePushNotificationRequest,
            requestStream: false,
            responseType: QueuePushNotificationResponse,
            responseStream: false,
            options: {},
        },
        bulkQueuePushNotification: {
            name: "BulkQueuePushNotification",
            requestType: BulkQueuePushNotificationRequest,
            requestStream: false,
            responseType: BulkQueuePushNotificationResponse,
            responseStream: false,
            options: {},
        },
        optInCurrentUser: {
            name: "OptInCurrentUser",
            requestType: Empty,
            requestStream: false,
            responseType: OptInCurrentUserResponse,
            responseStream: false,
            options: {},
        },
        optOutCurrentUser: {
            name: "OptOutCurrentUser",
            requestType: Empty,
            requestStream: false,
            responseType: OptOutCurrentUserResponse,
            responseStream: false,
            options: {},
        },
        listOptedInUsers: {
            name: "ListOptedInUsers",
            requestType: ListOptedInUsersRequest,
            requestStream: false,
            responseType: ListOptedInUsersResponse,
            responseStream: false,
            options: {},
        },
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
