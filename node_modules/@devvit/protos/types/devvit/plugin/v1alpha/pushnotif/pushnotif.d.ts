/**
 * #pushnotif.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
/** Request to queue a push notification for a user */
export interface QueuePushNotificationRequest {
    /** The Reddit user ID to send the notification to (e.g. "t2_abc123") */
    recipientId: string;
    /** The title of the push notification */
    title: string;
    /** The body text of the push notification */
    body: string;
    /** The fullname of a comment (e.g., "t1_abc123") */
    comment?: string | undefined;
    /** The fullname of a post (e.g., "t3_abc123") */
    post?: string | undefined;
}
/** Response from queuing a push notification */
export interface QueuePushNotificationResponse {
    /** Whether the notification was successfully queued */
    success: boolean;
    /** Optional message providing additional context about the operation */
    message: string;
    /** Unix timestamp when the notification was queued */
    timestamp: number;
}
/** Request to queue multiple push notifications */
export interface BulkQueuePushNotificationRequest {
    /** The title of the push notification (mustache template supported) */
    title: string;
    /** The body text of the push notification (mustache template supported) */
    body: string;
    /** List of recipients to send the notification to */
    recipients: Recipient[];
}
/** Response from queuing multiple push notifications */
export interface BulkQueuePushNotificationResponse {
    /** Number of notifications successfully queued */
    successCount: number;
    /** Number of notifications that failed to queue */
    failureCount: number;
    /** Array of errors for notifications that failed to queue */
    errors: PushNotificationError[];
    /** Unix timestamp when the bulk operation was performed */
    timestamp: number;
}
export interface Recipient {
    /** The Reddit user ID to send the notification to (e.g. "t2_abc123") */
    userId: string;
    /** The fullname of a comment (e.g., "t1_abc123") */
    comment?: string | undefined;
    /** The fullname of a post (e.g., "t3_abc123") */
    post?: string | undefined;
    /** Additional data to include with the notification's mustache template */
    data?: {
        [key: string]: any;
    } | undefined;
}
export interface PushNotificationError {
    /** The Reddit user ID for which the notification failed to queue (e.g. "t2_abc123") */
    userId: string;
    /** Error message describing why the notification failed to queue */
    message: string;
}
export interface OptInCurrentUserResponse {
    /** Whether the user successfully opted in */
    success: boolean;
    /** Optional message providing additional context about the operation */
    message: string;
}
export interface OptOutCurrentUserResponse {
    /** Whether the user successfully opted out */
    success: boolean;
    /** Optional message providing additional context about the operation */
    message: string;
}
export interface ListOptedInUsersRequest {
    /** The ID of the item after which to start listing (e.g. "t2_abc123") */
    after?: string | undefined;
    /** The ID of the item before which to end listing (e.g. "t2_abc123") */
    before?: string | undefined;
    /** The maximum number of users to return. If this is greater than our max page size, it will be capped. */
    limit?: number | undefined;
}
export interface ListOptedInUsersResponse {
    /** List of T2 user IDs who have opted in to receive push notifications (e.g. "t2_abc123", "t2_def456") */
    userIds: string[];
    /** To fetch the next page of results; use as the `after` parameter in the next request (e.g. "t2_abc123") */
    next?: string | undefined;
    /** To fetch the previous page of results; use as the `before` parameter in the next request (e.g. "t2_abc123") */
    prev?: string | undefined;
}
export declare const QueuePushNotificationRequest: {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationRequest";
    encode(message: QueuePushNotificationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationRequest;
    fromJSON(object: any): QueuePushNotificationRequest;
    toJSON(message: QueuePushNotificationRequest): unknown;
    create(base?: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
    fromPartial(object: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
};
export declare const QueuePushNotificationResponse: {
    $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationResponse";
    encode(message: QueuePushNotificationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationResponse;
    fromJSON(object: any): QueuePushNotificationResponse;
    toJSON(message: QueuePushNotificationResponse): unknown;
    create(base?: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
    fromPartial(object: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
};
export declare const BulkQueuePushNotificationRequest: {
    $type: "devvit.plugin.v1alpha.pushnotif.BulkQueuePushNotificationRequest";
    encode(message: BulkQueuePushNotificationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BulkQueuePushNotificationRequest;
    fromJSON(object: any): BulkQueuePushNotificationRequest;
    toJSON(message: BulkQueuePushNotificationRequest): unknown;
    create(base?: DeepPartial<BulkQueuePushNotificationRequest>): BulkQueuePushNotificationRequest;
    fromPartial(object: DeepPartial<BulkQueuePushNotificationRequest>): BulkQueuePushNotificationRequest;
};
export declare const BulkQueuePushNotificationResponse: {
    $type: "devvit.plugin.v1alpha.pushnotif.BulkQueuePushNotificationResponse";
    encode(message: BulkQueuePushNotificationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BulkQueuePushNotificationResponse;
    fromJSON(object: any): BulkQueuePushNotificationResponse;
    toJSON(message: BulkQueuePushNotificationResponse): unknown;
    create(base?: DeepPartial<BulkQueuePushNotificationResponse>): BulkQueuePushNotificationResponse;
    fromPartial(object: DeepPartial<BulkQueuePushNotificationResponse>): BulkQueuePushNotificationResponse;
};
export declare const Recipient: {
    $type: "devvit.plugin.v1alpha.pushnotif.Recipient";
    encode(message: Recipient, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Recipient;
    fromJSON(object: any): Recipient;
    toJSON(message: Recipient): unknown;
    create(base?: DeepPartial<Recipient>): Recipient;
    fromPartial(object: DeepPartial<Recipient>): Recipient;
};
export declare const PushNotificationError: {
    $type: "devvit.plugin.v1alpha.pushnotif.PushNotificationError";
    encode(message: PushNotificationError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PushNotificationError;
    fromJSON(object: any): PushNotificationError;
    toJSON(message: PushNotificationError): unknown;
    create(base?: DeepPartial<PushNotificationError>): PushNotificationError;
    fromPartial(object: DeepPartial<PushNotificationError>): PushNotificationError;
};
export declare const OptInCurrentUserResponse: {
    $type: "devvit.plugin.v1alpha.pushnotif.OptInCurrentUserResponse";
    encode(message: OptInCurrentUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OptInCurrentUserResponse;
    fromJSON(object: any): OptInCurrentUserResponse;
    toJSON(message: OptInCurrentUserResponse): unknown;
    create(base?: DeepPartial<OptInCurrentUserResponse>): OptInCurrentUserResponse;
    fromPartial(object: DeepPartial<OptInCurrentUserResponse>): OptInCurrentUserResponse;
};
export declare const OptOutCurrentUserResponse: {
    $type: "devvit.plugin.v1alpha.pushnotif.OptOutCurrentUserResponse";
    encode(message: OptOutCurrentUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OptOutCurrentUserResponse;
    fromJSON(object: any): OptOutCurrentUserResponse;
    toJSON(message: OptOutCurrentUserResponse): unknown;
    create(base?: DeepPartial<OptOutCurrentUserResponse>): OptOutCurrentUserResponse;
    fromPartial(object: DeepPartial<OptOutCurrentUserResponse>): OptOutCurrentUserResponse;
};
export declare const ListOptedInUsersRequest: {
    $type: "devvit.plugin.v1alpha.pushnotif.ListOptedInUsersRequest";
    encode(message: ListOptedInUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListOptedInUsersRequest;
    fromJSON(object: any): ListOptedInUsersRequest;
    toJSON(message: ListOptedInUsersRequest): unknown;
    create(base?: DeepPartial<ListOptedInUsersRequest>): ListOptedInUsersRequest;
    fromPartial(object: DeepPartial<ListOptedInUsersRequest>): ListOptedInUsersRequest;
};
export declare const ListOptedInUsersResponse: {
    $type: "devvit.plugin.v1alpha.pushnotif.ListOptedInUsersResponse";
    encode(message: ListOptedInUsersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListOptedInUsersResponse;
    fromJSON(object: any): ListOptedInUsersResponse;
    toJSON(message: ListOptedInUsersResponse): unknown;
    create(base?: DeepPartial<ListOptedInUsersResponse>): ListOptedInUsersResponse;
    fromPartial(object: DeepPartial<ListOptedInUsersResponse>): ListOptedInUsersResponse;
};
/**
 * Push notification service for queuing notifications to users
 *
 * EXPERIMENTAL: This service is experimental and intended for limited use.
 * The API may change without notice and should not be used in production
 * without explicit approval.
 */
export interface PushNotif {
    /**
     * Queue a push notification for delivery to a user
     *
     * This method queues a notification for asynchronous delivery. The actual
     * delivery timing and success is not guaranteed by this service.
     */
    QueuePushNotification(request: QueuePushNotificationRequest, metadata?: Metadata): Promise<QueuePushNotificationResponse>;
    BulkQueuePushNotification(request: BulkQueuePushNotificationRequest, metadata?: Metadata): Promise<BulkQueuePushNotificationResponse>;
    OptInCurrentUser(request: Empty, metadata?: Metadata): Promise<OptInCurrentUserResponse>;
    OptOutCurrentUser(request: Empty, metadata?: Metadata): Promise<OptOutCurrentUserResponse>;
    ListOptedInUsers(request: ListOptedInUsersRequest, metadata?: Metadata): Promise<ListOptedInUsersResponse>;
}
export declare const PushNotifServiceName = "devvit.plugin.v1alpha.pushnotif.PushNotif";
export declare class PushNotifClientImpl implements PushNotif {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    QueuePushNotification(request: QueuePushNotificationRequest, metadata?: Metadata): Promise<QueuePushNotificationResponse>;
    BulkQueuePushNotification(request: BulkQueuePushNotificationRequest, metadata?: Metadata): Promise<BulkQueuePushNotificationResponse>;
    OptInCurrentUser(request: Empty, metadata?: Metadata): Promise<OptInCurrentUserResponse>;
    OptOutCurrentUser(request: Empty, metadata?: Metadata): Promise<OptOutCurrentUserResponse>;
    ListOptedInUsers(request: ListOptedInUsersRequest, metadata?: Metadata): Promise<ListOptedInUsersResponse>;
}
/**
 * Push notification service for queuing notifications to users
 *
 * EXPERIMENTAL: This service is experimental and intended for limited use.
 * The API may change without notice and should not be used in production
 * without explicit approval.
 */
export type PushNotifDefinition = typeof PushNotifDefinition;
export declare const PushNotifDefinition: {
    readonly name: "PushNotif";
    readonly fullName: "devvit.plugin.v1alpha.pushnotif.PushNotif";
    readonly methods: {
        /**
         * Queue a push notification for delivery to a user
         *
         * This method queues a notification for asynchronous delivery. The actual
         * delivery timing and success is not guaranteed by this service.
         */
        readonly queuePushNotification: {
            readonly name: "QueuePushNotification";
            readonly requestType: {
                $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationRequest";
                encode(message: QueuePushNotificationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationRequest;
                fromJSON(object: any): QueuePushNotificationRequest;
                toJSON(message: QueuePushNotificationRequest): unknown;
                create(base?: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
                fromPartial(object: DeepPartial<QueuePushNotificationRequest>): QueuePushNotificationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v1alpha.pushnotif.QueuePushNotificationResponse";
                encode(message: QueuePushNotificationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): QueuePushNotificationResponse;
                fromJSON(object: any): QueuePushNotificationResponse;
                toJSON(message: QueuePushNotificationResponse): unknown;
                create(base?: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
                fromPartial(object: DeepPartial<QueuePushNotificationResponse>): QueuePushNotificationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly bulkQueuePushNotification: {
            readonly name: "BulkQueuePushNotification";
            readonly requestType: {
                $type: "devvit.plugin.v1alpha.pushnotif.BulkQueuePushNotificationRequest";
                encode(message: BulkQueuePushNotificationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BulkQueuePushNotificationRequest;
                fromJSON(object: any): BulkQueuePushNotificationRequest;
                toJSON(message: BulkQueuePushNotificationRequest): unknown;
                create(base?: DeepPartial<BulkQueuePushNotificationRequest>): BulkQueuePushNotificationRequest;
                fromPartial(object: DeepPartial<BulkQueuePushNotificationRequest>): BulkQueuePushNotificationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v1alpha.pushnotif.BulkQueuePushNotificationResponse";
                encode(message: BulkQueuePushNotificationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BulkQueuePushNotificationResponse;
                fromJSON(object: any): BulkQueuePushNotificationResponse;
                toJSON(message: BulkQueuePushNotificationResponse): unknown;
                create(base?: DeepPartial<BulkQueuePushNotificationResponse>): BulkQueuePushNotificationResponse;
                fromPartial(object: DeepPartial<BulkQueuePushNotificationResponse>): BulkQueuePushNotificationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly optInCurrentUser: {
            readonly name: "OptInCurrentUser";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v1alpha.pushnotif.OptInCurrentUserResponse";
                encode(message: OptInCurrentUserResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): OptInCurrentUserResponse;
                fromJSON(object: any): OptInCurrentUserResponse;
                toJSON(message: OptInCurrentUserResponse): unknown;
                create(base?: DeepPartial<OptInCurrentUserResponse>): OptInCurrentUserResponse;
                fromPartial(object: DeepPartial<OptInCurrentUserResponse>): OptInCurrentUserResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly optOutCurrentUser: {
            readonly name: "OptOutCurrentUser";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v1alpha.pushnotif.OptOutCurrentUserResponse";
                encode(message: OptOutCurrentUserResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): OptOutCurrentUserResponse;
                fromJSON(object: any): OptOutCurrentUserResponse;
                toJSON(message: OptOutCurrentUserResponse): unknown;
                create(base?: DeepPartial<OptOutCurrentUserResponse>): OptOutCurrentUserResponse;
                fromPartial(object: DeepPartial<OptOutCurrentUserResponse>): OptOutCurrentUserResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly listOptedInUsers: {
            readonly name: "ListOptedInUsers";
            readonly requestType: {
                $type: "devvit.plugin.v1alpha.pushnotif.ListOptedInUsersRequest";
                encode(message: ListOptedInUsersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListOptedInUsersRequest;
                fromJSON(object: any): ListOptedInUsersRequest;
                toJSON(message: ListOptedInUsersRequest): unknown;
                create(base?: DeepPartial<ListOptedInUsersRequest>): ListOptedInUsersRequest;
                fromPartial(object: DeepPartial<ListOptedInUsersRequest>): ListOptedInUsersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.v1alpha.pushnotif.ListOptedInUsersResponse";
                encode(message: ListOptedInUsersResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListOptedInUsersResponse;
                fromJSON(object: any): ListOptedInUsersResponse;
                toJSON(message: ListOptedInUsersResponse): unknown;
                create(base?: DeepPartial<ListOptedInUsersResponse>): ListOptedInUsersResponse;
                fromPartial(object: DeepPartial<ListOptedInUsersResponse>): ListOptedInUsersResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=pushnotif.d.ts.map