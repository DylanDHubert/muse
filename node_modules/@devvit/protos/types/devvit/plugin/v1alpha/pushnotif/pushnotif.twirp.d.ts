import { TwirpContext, TwirpServer } from 'twirp-ts';
import { QueuePushNotificationRequest, QueuePushNotificationResponse, BulkQueuePushNotificationRequest, BulkQueuePushNotificationResponse, OptInCurrentUserResponse, OptOutCurrentUserResponse, ListOptedInUsersRequest, ListOptedInUsersResponse } from './pushnotif.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export interface PushNotifTwirp<T extends TwirpContext = TwirpContext> {
    QueuePushNotification(ctx: T, request: QueuePushNotificationRequest): Promise<QueuePushNotificationResponse>;
    BulkQueuePushNotification(ctx: T, request: BulkQueuePushNotificationRequest): Promise<BulkQueuePushNotificationResponse>;
    OptInCurrentUser(ctx: T, request: Empty): Promise<OptInCurrentUserResponse>;
    OptOutCurrentUser(ctx: T, request: Empty): Promise<OptOutCurrentUserResponse>;
    ListOptedInUsers(ctx: T, request: ListOptedInUsersRequest): Promise<ListOptedInUsersResponse>;
}
export declare enum PushNotifMethod {
    QueuePushNotification = "QueuePushNotification",
    BulkQueuePushNotification = "BulkQueuePushNotification",
    OptInCurrentUser = "OptInCurrentUser",
    OptOutCurrentUser = "OptOutCurrentUser",
    ListOptedInUsers = "ListOptedInUsers"
}
export declare const PushNotifMethodList: PushNotifMethod[];
export declare function createPushNotifServer<T extends TwirpContext = TwirpContext>(service: PushNotifTwirp<T>): TwirpServer<PushNotifTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=pushnotif.twirp.d.ts.map