syntax = "proto3";

package devvit.plugin.v1alpha.pushnotif;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

option go_package = "github.snooguts.net/reddit/reddit-devplatform-monorepo/go-common/generated/protos/types/devvit/plugin/v1alpha/pushnotif";
option java_package = "com.reddit.devvit.plugin.v1alpha.pushnotif";

// Request to queue a push notification for a user
message QueuePushNotificationRequest {
  // The Reddit user ID to send the notification to (e.g. "t2_abc123")
  string recipient_id = 1;

  // The title of the push notification
  string title = 2;

  // The body text of the push notification
  string body = 3;

  // The thing (comment or post) associated with this notification
  oneof thing {
    // The fullname of a comment (e.g., "t1_abc123")
    string comment = 4;

    // The fullname of a post (e.g., "t3_abc123")
    string post = 5;
  }
}

// Response from queuing a push notification
message QueuePushNotificationResponse {
  // Whether the notification was successfully queued
  bool success = 1;

  // Optional message providing additional context about the operation
  string message = 2;

  // Unix timestamp when the notification was queued
  int64 timestamp = 3;
}

// Request to queue multiple push notifications
message BulkQueuePushNotificationRequest {
  // The title of the push notification (mustache template supported)
  string title = 1;

  // The body text of the push notification (mustache template supported)
  string body = 2;

  // List of recipients to send the notification to
  repeated Recipient recipients = 5;
}

// Response from queuing multiple push notifications
message BulkQueuePushNotificationResponse {
  // Number of notifications successfully queued
  int32 success_count = 1;

  // Number of notifications that failed to queue
  int32 failure_count = 2;

  // Array of errors for notifications that failed to queue
  repeated PushNotificationError errors = 3;

  // Unix timestamp when the bulk operation was performed
  int64 timestamp = 4;
}

message Recipient {
  // The Reddit user ID to send the notification to (e.g. "t2_abc123")
  string user_id = 1;

  // The thing (comment or post) associated with this notification
  oneof thing {
    // The fullname of a comment (e.g., "t1_abc123")
    string comment = 2;

    // The fullname of a post (e.g., "t3_abc123")
    string post = 3;
  }

  // Additional data to include with the notification's mustache template
  google.protobuf.Struct data = 4;
}

message PushNotificationError {
  // The Reddit user ID for which the notification failed to queue (e.g. "t2_abc123")
  string user_id = 1;

  // Error message describing why the notification failed to queue
  string message = 2;
}

message OptInCurrentUserResponse {
  // Whether the user successfully opted in
  bool success = 1;

  // Optional message providing additional context about the operation
  string message = 2;
}

message OptOutCurrentUserResponse {
  // Whether the user successfully opted out
  bool success = 1;

  // Optional message providing additional context about the operation
  string message = 2;
}

message ListOptedInUsersRequest {
  // The ID of the item after which to start listing (e.g. "t2_abc123")
  optional string after = 1;

  // The ID of the item before which to end listing (e.g. "t2_abc123")
  optional string before = 2;

  // The maximum number of users to return. If this is greater than our max page size, it will be capped.
  optional int64 limit = 3;
}

message ListOptedInUsersResponse {
  // List of T2 user IDs who have opted in to receive push notifications (e.g. "t2_abc123", "t2_def456")
  repeated string user_ids = 1;

  // To fetch the next page of results; use as the `after` parameter in the next request (e.g. "t2_abc123")
  optional string next = 2;

  // To fetch the previous page of results; use as the `before` parameter in the next request (e.g. "t2_abc123")
  optional string prev = 3;
}

// Push notification service for queuing notifications to users
//
// EXPERIMENTAL: This service is experimental and intended for limited use.
// The API may change without notice and should not be used in production
// without explicit approval.
service PushNotif {
  // Queue a push notification for delivery to a user
  //
  // This method queues a notification for asynchronous delivery. The actual
  // delivery timing and success is not guaranteed by this service.
  rpc QueuePushNotification(QueuePushNotificationRequest) returns (QueuePushNotificationResponse);
  rpc BulkQueuePushNotification(BulkQueuePushNotificationRequest) returns (BulkQueuePushNotificationResponse);
  rpc OptInCurrentUser(google.protobuf.Empty) returns (OptInCurrentUserResponse);
  rpc OptOutCurrentUser(google.protobuf.Empty) returns (OptOutCurrentUserResponse);
  rpc ListOptedInUsers(ListOptedInUsersRequest) returns (ListOptedInUsersResponse);
}
