/**
 * #post_message.ts
 *
 * Code generated by ts-proto. DO NOT EDIT.
 * @packageDocumentation
 */
import type { NavigateToUrlEffect } from "../../../effect_types/v1alpha/navigate_to_url.js";
import type { RealtimeSubscriptionsEffect } from "../../../effect_types/v1alpha/realtime_subscription.js";
import type { ShowFormEffect } from "../../../effect_types/v1alpha/show_form.js";
import type { ShowToastEffect } from "../../../effect_types/v1alpha/show_toast.js";
import type { WebViewImmersiveModeEffect } from "./immersive_mode.js";
import type { WebViewShareEffect } from "./share.js";
export declare enum WebViewInternalMessageScope {
    /** CLIENT - Message is intended for the client only */
    CLIENT = 0,
    UNRECOGNIZED = -1
}
/** Devvit internal message, sent via postMessage */
export type WebViewInternalMessage = {
    /** type: devvit-internal */
    type: string;
    /** Scope of the message, used to determine where the message should be sent */
    scope: WebViewInternalMessageScope;
    /** Origin: devvit-analytics */
    analytics?: {
        [key: string]: any;
    } | undefined;
    /**
     * Origin: devvit-client
     * @deprecated Use effect_type instead
     */
    effect?: {
        [key: string]: any;
    } | undefined;
    /** Origin: devvit-client */
    realtimeEffect?: RealtimeSubscriptionsEffect | undefined;
    immersiveMode?: WebViewImmersiveModeEffect | undefined;
    share?: WebViewShareEffect | undefined;
    showToast?: ShowToastEffect | undefined;
    navigateToUrl?: NavigateToUrlEffect | undefined;
    showForm?: ShowFormEffect | undefined;
    id?: string | undefined;
};
/** Generic structure of messages sent via postMessage from WebView block */
export type WebViewPostMessage = {
    /** See comments for each message */
    type: string;
    /** One of the following messages converted to a Struct */
    data?: {
        [key: string]: any;
    } | undefined;
};
/**
 * Arbitrary message, sent by block app to a WebView block
 * type: devvit-message
 */
export type WebViewAppMessage = {
    /**
     * Any serializable value given to postMessage in a WebView
     * @deprecated Use json_string instead
     */
    message?: any | undefined;
    /** JSON string payload */
    jsonString?: string | undefined;
};
/**
 * Used to pass stateful data into a WebView
 * type: devvit-state
 * @deprecated
 */
export type WebViewStateMessage = {
    state?: {
        [key: string]: any;
    } | undefined;
};
/** Message wrapper for messages sent by block app to a webview block */
export type WebViewPostMessageEffect = {
    /** ID of the WebView block */
    webViewId: string;
    app?: WebViewAppMessage | undefined;
    /**
     * WebViewUIEventMessage event = 4;
     * WebViewUIEnvironmentMessage environment = 5;
     */
    state?: WebViewStateMessage | undefined;
};
//# sourceMappingURL=post_message.d.ts.map