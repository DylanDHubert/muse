import type { MediaSignature } from '@devvit/protos/community.js';
import { type AssetMap } from '@devvit/shared-types/Assets.js';
import type { DevvitCommand } from './commands/DevvitCommand.js';
export declare const DEVVIT_JS_URL = "https://webview.devvit.net/scripts/devvit.v1.min.js";
type MediaSignatureWithContents = MediaSignature & {
    contents: Uint8Array;
};
type SyncAssetsResult = {
    assetMap?: AssetMap;
    webViewAssetMap?: AssetMap;
    iconAsset?: string;
};
export declare class AssetUploader {
    #private;
    constructor(cmd: DevvitCommand, appSlug: string, { verbose }: {
        verbose: boolean;
    });
    /**
     * Checks if there are any new assets to upload, and if there are, uploads them.
     * Returns a map of asset names to their asset IDs.
     * Can throw an exception if the app's assets exceed our limits.
     *
     * If present, WebView assets will also be synced but will not be included in
     * the asset map.
     */
    syncAssets(): Promise<SyncAssetsResult>;
    assertAssetCanBeAnIcon(data: Buffer): Promise<void>;
}
/**
 * Read assets from disk and transform them.
 *
 * Asset kind controls transform. Client (historically webroot/) is for web view
 * assets. Media (historically assets/) is for everything else.
 *
 * @internal
 */
export declare function queryAssets(dir: string, allowedExtensions: readonly string[], assetKind: 'Client' | 'Media', clientVersionNum: string | undefined, skipWebViewScriptInjection: boolean): Promise<MediaSignatureWithContents[]>;
export declare function transformHTMLBuffer(buf: Buffer, clientVersionNum: string | undefined): Buffer;
export declare function transformHTML(str: string, clientVersionNum: string | undefined): string;
export {};
//# sourceMappingURL=AssetUploader.d.ts.map