import type { Effect } from '@devvit/protos/types/devvit/ui/effects/v1alpha/effect.js';
import type { Form } from './form-types.js';
export declare const mockSubreddit: {
    readonly id: "t5_123";
    readonly name: "test";
    readonly permalink: "/r/test";
    readonly createdAt: Date;
    readonly type: "public";
    readonly title: "Test Subreddit";
    readonly description: "A test subreddit";
    readonly language: "en";
    readonly nsfw: false;
    readonly numberOfSubscribers: 1000;
    readonly numberOfActiveUsers: 100;
    readonly settings: {
        readonly acceptFollowers: true;
        readonly allOriginalContent: false;
        readonly allowChatPostCreation: true;
        readonly allowDiscovery: true;
        readonly allowGalleries: true;
        readonly allowImages: true;
        readonly allowPolls: true;
        readonly allowPredictionContributors: true;
        readonly allowPredictions: true;
        readonly allowPredictionsTournament: true;
        readonly allowTalks: true;
        readonly allowVideoGifs: true;
        readonly allowVideos: true;
        readonly chatPostEnabled: true;
        readonly collectionsEnabled: true;
        readonly crosspostable: true;
        readonly emojisEnabled: true;
        readonly eventPostsEnabled: true;
        readonly linkFlairEnabled: true;
        readonly originalContentTagEnabled: true;
        readonly restrictCommenting: false;
        readonly restrictPosting: false;
        readonly shouldArchivePosts: true;
        readonly spoilersEnabled: true;
        readonly wikiEnabled: true;
        readonly allowedPostType: "any";
        readonly allowedMediaInComments: readonly ["giphy", "static", "animated", "expression"];
        readonly userFlairs: {
            readonly enabled: true;
            readonly usersCanAssign: true;
        };
        readonly postFlairs: {
            readonly enabled: true;
            readonly usersCanAssign: true;
        };
        readonly url: "https://www.reddit.com/r/test";
    };
    readonly url: "https://www.reddit.com/r/test";
};
export declare const mockPost: {
    readonly id: "t3_123";
    readonly title: "Test Post";
    readonly permalink: "/r/test/comments/123/test_post";
    readonly authorId: "t2_456";
    readonly authorName: "testuser";
    readonly subredditId: "t5_123";
    readonly subredditName: "test";
    readonly body: "Test post body";
    readonly bodyHtml: "<div>Test post body</div>";
    readonly url: "https://www.reddit.com/r/test/comments/123/test_post";
    readonly createdAt: Date;
    readonly score: 100;
    readonly numberOfComments: 10;
    readonly numberOfReports: 0;
    readonly approved: true;
    readonly spam: false;
    readonly stickied: false;
    readonly removed: false;
    readonly removedBy: undefined;
    readonly removedByCategory: undefined;
    readonly archived: false;
    readonly edited: false;
    readonly locked: false;
    readonly nsfw: false;
    readonly quarantined: false;
    readonly spoiler: false;
    readonly hidden: false;
    readonly ignoringReports: false;
    readonly distinguishedBy: undefined;
    readonly flair: undefined;
    readonly secureMedia: undefined;
    readonly userReportReasons: readonly [];
    readonly modReportReasons: readonly [];
};
export declare const mockComment: {
    readonly id: "t1_123";
    readonly body: "Test comment";
    readonly permalink: "/r/test/comments/123/test_post/comment";
    readonly authorId: "t2_456";
    readonly authorName: "testuser";
    readonly subredditId: "t5_123";
    readonly subredditName: "test";
    readonly createdAt: Date;
    readonly parentId: "t3_123";
    readonly postId: "t3_123";
    readonly approved: true;
    readonly locked: false;
    readonly removed: false;
    readonly stickied: false;
    readonly spam: false;
    readonly edited: false;
    readonly distinguishedBy: undefined;
    readonly numReports: 0;
    readonly collapsedBecauseCrowdControl: false;
    readonly score: 10;
    readonly userReportReasons: readonly [];
    readonly modReportReasons: readonly [];
    readonly url: "https://www.reddit.com/r/test/comments/123/test_post/comment";
    readonly ignoringReports: false;
};
export declare const mockUser: {
    readonly id: "t2_123";
    readonly username: "testuser";
    readonly createdAt: Date;
    readonly linkKarma: 1000;
    readonly commentKarma: 500;
    readonly nsfw: false;
    readonly isAdmin: false;
    readonly modPermissions: Map<any, any>;
    readonly url: "https://www.reddit.com/user/testuser";
    readonly permalink: "/user/testuser";
    readonly hasVerifiedEmail: true;
};
export declare const basicFormDefinition: Readonly<Form>;
export declare const complexFormDefinition: Readonly<Form>;
export declare const expectedShowFormMessage: (form: Readonly<Form>) => Effect;
//# sourceMappingURL=test-helpers.d.ts.map