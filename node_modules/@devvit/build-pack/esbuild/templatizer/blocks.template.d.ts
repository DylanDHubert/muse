import type { Metadata } from '@devvit/protos';
import { Devvit, type FormKey } from '@devvit/public-api';
import type { SettingsValidationResponse, UiResponse } from '@devvit/shared';
import type { JsonObject, PartialJsonObject } from '@devvit/shared-types/json.js';
declare module '@devvit/public-api' {
    namespace Devvit {
        function _initForms(): void;
        function _initMenu(): void;
        function _initScheduler(): void;
        function _initSettings(global: boolean, sub: boolean): void;
    }
}
/** @internal [state] Map of devvit.json form keys to Devvit-singleton form keys. */
export declare const formKeyMap: {
    [formKey: string]: FormKey;
};
/** @internal */
export declare function abbreviate(str: string): string;
/** @internal */
export declare function assertUiResponse(endpoint: string, rsp: Readonly<PartialJsonObject>): asserts rsp is UiResponse;
/** @internal */
export declare function assertSettingsValidationResponse(rsp: Readonly<JsonObject>): asserts rsp is SettingsValidationResponse;
/**
 * Post to endpoint and return user Node.js server response. All responses are
 * expected to be empty or a JSON _object_.
 *
 * @throws Throws on `!Response.ok`.
 * @throws Response body is nonempty and content-type is not JSON.
 * @throws Response body is nonempty and unparsable.
 * @throws Response body is nonempty and not a JSON object.
 * @internal
 */
export declare function fetchWebbit(endpoint: string, body: Readonly<PartialJsonObject>, meta: Readonly<Metadata>): Promise<JsonObject | undefined>;
export default Devvit;
//# sourceMappingURL=blocks.template.d.ts.map