import type { WebViewMessageEvent_MessageData } from '@devvit/protos/json/devvit/ui/events/v1alpha/web_view.js';
import type { JsonValue } from '@devvit/shared';
export type ConnectRealtimeOptions<Msg extends JsonValue> = {
    channel: string;
    onConnect?: (channel: string) => void;
    onDisconnect?: (channel: string) => void;
    onMessage: (data: Msg) => void;
};
/**
 * Connects to a realtime channel for receiving messages.
 *
 * @param opts - Connection options including channel name and callbacks
 * @returns A Connection object with a disconnect method
 *
 * @example
 *
 * ```ts
 * import {connectRealtime, context} from '@devvit/web/client'
 * import type {T2} from '@devvit/web/shared'
 *
 * type RealtimeMessage = {x: number, y: number, t2: T2}
 *
 * connectRealtime<RealtimeMessage>({
 *   channel: context.postId,
 *   onConnect() {
 *     console.log(`${context.userId} connected`)
 *   },
 *   onDisconnect() {
 *     console.log(`${context.userId} disconnected`)
 *   },
 *   onMessage(msg) {
 *     // Filter out current user across all sessions.
 *     if (msg.t2 === context.userId) return
 *
 *     console.log(`user ${msg.t2} at (${msg.x}, ${msg.y})`)
 *   }
 * })
 * ```
 */
export declare const connectRealtime: <Msg extends JsonValue>(opts: Readonly<ConnectRealtimeOptions<Msg>>) => Promise<Connection>;
export declare function disconnectRealtime(channel: string): Promise<void>;
/** True if the channel socket is connected. */
export declare function isRealtimeConnected(channel: string): boolean;
/**
 * Clears all connections. Used for testing purposes.
 * @internal
 */
export declare const __clearConnections: () => void;
export declare class Connection {
    /** @internal */
    connected: boolean;
    /** @internal */
    readonly opts: Readonly<ConnectRealtimeOptions<JsonValue>>;
    constructor(opts: Readonly<ConnectRealtimeOptions<JsonValue>>);
    /**
     * Disconnects from the realtime channel.
     *
     * @deprecated Use `disconnectRealtime()`.
     */
    disconnect(): Promise<void>;
    /** @internal */
    onMessage: (ev: MessageEvent<WebViewMessageEvent_MessageData>) => void;
}
//# sourceMappingURL=realtime.d.ts.map